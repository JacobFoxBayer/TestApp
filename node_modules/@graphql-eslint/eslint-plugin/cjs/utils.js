"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNodeName = exports.displayNodeName = exports.truthy = exports.englishJoinWords = exports.ARRAY_DEFAULT_OPTIONS = exports.REPORT_ON_FIRST_CHARACTER = exports.getLocation = exports.convertCase = exports.camelCase = exports.pascalCase = exports.TYPES_KINDS = exports.getTypeName = exports.CWD = exports.VIRTUAL_DOCUMENT_REGEX = exports.normalizePath = exports.logger = exports.requireGraphQLSchemaFromContext = exports.requireSiblingsOperations = void 0;
const tslib_1 = require("tslib");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const graphql_1 = require("graphql");
const lodash_lowercase_1 = tslib_1.__importDefault(require("lodash.lowercase"));
function requireSiblingsOperations(ruleId, context) {
    const { siblingOperations } = context.parserServices;
    if (!siblingOperations.available) {
        throw new Error(`Rule \`${ruleId}\` requires \`parserOptions.operations\` to be set and loaded. See https://bit.ly/graphql-eslint-operations for more info`);
    }
    return siblingOperations;
}
exports.requireSiblingsOperations = requireSiblingsOperations;
function requireGraphQLSchemaFromContext(ruleId, context) {
    const { schema } = context.parserServices;
    if (!schema) {
        throw new Error(`Rule \`${ruleId}\` requires \`parserOptions.schema\` to be set and loaded. See https://bit.ly/graphql-eslint-schema for more info`);
    }
    return schema;
}
exports.requireGraphQLSchemaFromContext = requireGraphQLSchemaFromContext;
exports.logger = {
    error: (...args) => 
    // eslint-disable-next-line no-console
    console.error(chalk_1.default.red('error'), '[graphql-eslint]', (0, chalk_1.default)(...args)),
    warn: (...args) => 
    // eslint-disable-next-line no-console
    console.warn(chalk_1.default.yellow('warning'), '[graphql-eslint]', (0, chalk_1.default)(...args)),
};
const normalizePath = (path) => (path || '').replace(/\\/g, '/');
exports.normalizePath = normalizePath;
exports.VIRTUAL_DOCUMENT_REGEX = /\/\d+_document.graphql$/;
exports.CWD = process.cwd();
const getTypeName = (node) => 'type' in node ? (0, exports.getTypeName)(node.type) : 'name' in node && node.name ? node.name.value : '';
exports.getTypeName = getTypeName;
exports.TYPES_KINDS = [
    graphql_1.Kind.OBJECT_TYPE_DEFINITION,
    graphql_1.Kind.INTERFACE_TYPE_DEFINITION,
    graphql_1.Kind.ENUM_TYPE_DEFINITION,
    graphql_1.Kind.SCALAR_TYPE_DEFINITION,
    graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
    graphql_1.Kind.UNION_TYPE_DEFINITION,
];
const pascalCase = (str) => (0, lodash_lowercase_1.default)(str)
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('');
exports.pascalCase = pascalCase;
const camelCase = (str) => {
    const result = (0, exports.pascalCase)(str);
    return result.charAt(0).toLowerCase() + result.slice(1);
};
exports.camelCase = camelCase;
const convertCase = (style, str) => {
    switch (style) {
        case 'camelCase':
            return (0, exports.camelCase)(str);
        case 'PascalCase':
            return (0, exports.pascalCase)(str);
        case 'snake_case':
            return (0, lodash_lowercase_1.default)(str).replace(/ /g, '_');
        case 'UPPER_CASE':
            return (0, lodash_lowercase_1.default)(str).replace(/ /g, '_').toUpperCase();
        case 'kebab-case':
            return (0, lodash_lowercase_1.default)(str).replace(/ /g, '-');
    }
};
exports.convertCase = convertCase;
function getLocation(start, fieldName = '') {
    const { line, column } = start;
    return {
        start: {
            line,
            column,
        },
        end: {
            line,
            column: column + fieldName.length,
        },
    };
}
exports.getLocation = getLocation;
exports.REPORT_ON_FIRST_CHARACTER = { column: 0, line: 1 };
exports.ARRAY_DEFAULT_OPTIONS = {
    type: 'array',
    uniqueItems: true,
    minItems: 1,
    items: {
        type: 'string',
    },
};
const englishJoinWords = (words) => new Intl.ListFormat('en-US', { type: 'disjunction' }).format(words);
exports.englishJoinWords = englishJoinWords;
function truthy(value) {
    return !!value;
}
exports.truthy = truthy;
const DisplayNodeNameMap = {
    [graphql_1.Kind.OBJECT_TYPE_DEFINITION]: 'type',
    [graphql_1.Kind.OBJECT_TYPE_EXTENSION]: 'type',
    [graphql_1.Kind.INTERFACE_TYPE_DEFINITION]: 'interface',
    [graphql_1.Kind.INTERFACE_TYPE_EXTENSION]: 'interface',
    [graphql_1.Kind.ENUM_TYPE_DEFINITION]: 'enum',
    [graphql_1.Kind.ENUM_TYPE_EXTENSION]: 'enum',
    [graphql_1.Kind.SCALAR_TYPE_DEFINITION]: 'scalar',
    [graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION]: 'input',
    [graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION]: 'input',
    [graphql_1.Kind.UNION_TYPE_DEFINITION]: 'union',
    [graphql_1.Kind.UNION_TYPE_EXTENSION]: 'union',
    [graphql_1.Kind.DIRECTIVE_DEFINITION]: 'directive',
    [graphql_1.Kind.FIELD_DEFINITION]: 'field',
    [graphql_1.Kind.ENUM_VALUE_DEFINITION]: 'enum value',
    [graphql_1.Kind.INPUT_VALUE_DEFINITION]: 'input value',
    [graphql_1.Kind.ARGUMENT]: 'argument',
    [graphql_1.Kind.VARIABLE]: 'variable',
    [graphql_1.Kind.FRAGMENT_DEFINITION]: 'fragment',
    [graphql_1.Kind.OPERATION_DEFINITION]: 'operation',
    [graphql_1.Kind.FIELD]: 'field',
};
function displayNodeName(node) {
    var _a, _b;
    return `${node.kind === graphql_1.Kind.OPERATION_DEFINITION ? node.operation : DisplayNodeNameMap[node.kind]} "${('alias' in node && ((_a = node.alias) === null || _a === void 0 ? void 0 : _a.value)) || ('name' in node && ((_b = node.name) === null || _b === void 0 ? void 0 : _b.value))}"`;
}
exports.displayNodeName = displayNodeName;
function getNodeName(node) {
    switch (node.kind) {
        case graphql_1.Kind.OBJECT_TYPE_DEFINITION:
        case graphql_1.Kind.OBJECT_TYPE_EXTENSION:
        case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:
        case graphql_1.Kind.ENUM_TYPE_DEFINITION:
        case graphql_1.Kind.SCALAR_TYPE_DEFINITION:
        case graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:
        case graphql_1.Kind.UNION_TYPE_DEFINITION:
        case graphql_1.Kind.DIRECTIVE_DEFINITION:
            return displayNodeName(node);
        case graphql_1.Kind.FIELD_DEFINITION:
        case graphql_1.Kind.INPUT_VALUE_DEFINITION:
        case graphql_1.Kind.ENUM_VALUE_DEFINITION:
            return `${displayNodeName(node)} in ${displayNodeName(node.parent)}`;
        case graphql_1.Kind.OPERATION_DEFINITION:
            return node.name ? displayNodeName(node) : node.operation;
    }
    return '';
}
exports.getNodeName = getNodeName;
