"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const graphql_1 = require("graphql");
const utils_js_1 = require("../utils.js");
const RULE_ID = 'require-field-of-type-query-in-mutation-result';
exports.rule = {
    meta: {
        type: 'suggestion',
        docs: {
            category: 'Schema',
            description: 'Allow the client in one round-trip not only to call mutation but also to get a wagon of data to update their application.\n> Currently, no errors are reported for result type `union`, `interface` and `scalar`.',
            url: `https://the-guild.dev/graphql/eslint/rules/${RULE_ID}`,
            requiresSchema: true,
            examples: [
                {
                    title: 'Incorrect',
                    code: /* GraphQL */ `
            type User { ... }

            type Mutation {
              createUser: User!
            }
          `,
                },
                {
                    title: 'Correct',
                    code: /* GraphQL */ `
            type User { ... }

            type Query { ... }

            type CreateUserPayload {
              user: User!
              query: Query!
            }

            type Mutation {
              createUser: CreateUserPayload!
            }
          `,
                },
            ],
        },
        schema: [],
    },
    create(context) {
        const schema = (0, utils_js_1.requireGraphQLSchemaFromContext)(RULE_ID, context);
        const mutationType = schema.getMutationType();
        const queryType = schema.getQueryType();
        if (!mutationType || !queryType) {
            return {};
        }
        const selector = `:matches(ObjectTypeDefinition, ObjectTypeExtension)[name.value=${mutationType.name}] > FieldDefinition > .gqlType Name`;
        return {
            [selector](node) {
                const typeName = node.value;
                const graphQLType = schema.getType(typeName);
                if ((0, graphql_1.isObjectType)(graphQLType)) {
                    const { fields } = graphQLType.astNode;
                    const hasQueryType = fields === null || fields === void 0 ? void 0 : fields.some(field => (0, utils_js_1.getTypeName)(field) === queryType.name);
                    if (!hasQueryType) {
                        context.report({
                            node,
                            message: `Mutation result type "${graphQLType.name}" must contain field of type "${queryType.name}"`,
                        });
                    }
                }
            },
        };
    },
};
