"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rule = void 0;
const graphql_1 = require("graphql");
const utils_js_1 = require("../utils.js");
const RULE_ID = 'require-nullable-result-in-root';
exports.rule = {
    meta: {
        type: 'suggestion',
        hasSuggestions: true,
        docs: {
            category: 'Schema',
            description: 'Require nullable fields in root types.',
            url: `https://github.com/B2o5T/graphql-eslint/blob/master/docs/rules/${RULE_ID}.md`,
            requiresSchema: true,
            examples: [
                {
                    title: 'Incorrect',
                    code: /* GraphQL */ `
            type Query {
              user: User!
            }
          `,
                },
                {
                    title: 'Correct',
                    code: /* GraphQL */ `
            type Query {
              foo: User
              baz: [User]!
              bar: [User!]!
            }
          `,
                },
            ],
        },
        messages: {
            [RULE_ID]: 'Unexpected non-null result {{ resultType }} in {{ rootType }}',
        },
        schema: [],
    },
    create(context) {
        const schema = (0, utils_js_1.requireGraphQLSchemaFromContext)(RULE_ID, context);
        const rootTypeNames = new Set([schema.getQueryType(), schema.getMutationType(), schema.getSubscriptionType()]
            .filter(utils_js_1.truthy)
            .map(type => type.name));
        const sourceCode = context.getSourceCode();
        return {
            'ObjectTypeDefinition,ObjectTypeExtension'(node) {
                if (!rootTypeNames.has(node.name.value))
                    return;
                for (const field of node.fields || []) {
                    if (field.gqlType.type !== graphql_1.Kind.NON_NULL_TYPE ||
                        field.gqlType.gqlType.type !== graphql_1.Kind.NAMED_TYPE)
                        continue;
                    const name = field.gqlType.gqlType.name.value;
                    const type = schema.getType(name);
                    const resultType = (type === null || type === void 0 ? void 0 : type.astNode) ? (0, utils_js_1.getNodeName)(type.astNode) : type === null || type === void 0 ? void 0 : type.name;
                    context.report({
                        node: field.gqlType,
                        messageId: RULE_ID,
                        data: {
                            resultType: resultType || '',
                            rootType: (0, utils_js_1.getNodeName)(node),
                        },
                        suggest: [
                            {
                                desc: `Make ${resultType} nullable`,
                                fix(fixer) {
                                    const text = sourceCode.getText(field.gqlType);
                                    return fixer.replaceText(field.gqlType, text.replace('!', ''));
                                },
                            },
                        ],
                    });
                }
            },
        };
    },
};
