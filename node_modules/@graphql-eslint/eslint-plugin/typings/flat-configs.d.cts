import { parseForESLint } from './parser.cjs';
export declare const flatConfigs: {
    'operations-all': {
        languageOptions: {
            parser: {
                parseForESLint: typeof parseForESLint;
            };
        };
        rules: {
            '@graphql-eslint/alphabetize': (string | {
                selections: string[];
                variables: string[];
                arguments: string[];
            })[];
            '@graphql-eslint/lone-executable-definition': string;
            '@graphql-eslint/match-document-filename': (string | {
                query: string;
                mutation: string;
                subscription: string;
                fragment: string;
            })[];
            '@graphql-eslint/no-one-place-fragments': string;
            '@graphql-eslint/unique-fragment-name': string;
            '@graphql-eslint/unique-operation-name': string;
            '@graphql-eslint/executable-definitions': string;
            '@graphql-eslint/fields-on-correct-type': string;
            '@graphql-eslint/fragments-on-composite-type': string;
            '@graphql-eslint/known-argument-names': string;
            '@graphql-eslint/known-directives': string;
            '@graphql-eslint/known-fragment-names': string;
            '@graphql-eslint/known-type-names': string;
            '@graphql-eslint/lone-anonymous-operation': string;
            '@graphql-eslint/naming-convention': (string | {
                VariableDefinition: string;
                OperationDefinition: {
                    style: string;
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
                FragmentDefinition: {
                    style: string;
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
            })[];
            '@graphql-eslint/no-anonymous-operations': string;
            '@graphql-eslint/no-deprecated': string;
            '@graphql-eslint/no-duplicate-fields': string;
            '@graphql-eslint/no-fragment-cycles': string;
            '@graphql-eslint/no-undefined-variables': string;
            '@graphql-eslint/no-unused-fragments': string;
            '@graphql-eslint/no-unused-variables': string;
            '@graphql-eslint/one-field-subscriptions': string;
            '@graphql-eslint/overlapping-fields-can-be-merged': string;
            '@graphql-eslint/possible-fragment-spread': string;
            '@graphql-eslint/provided-required-arguments': string;
            '@graphql-eslint/require-id-when-available': string;
            '@graphql-eslint/scalar-leafs': string;
            '@graphql-eslint/selection-set-depth': (string | {
                maxDepth: number;
            })[];
            '@graphql-eslint/unique-argument-names': string;
            '@graphql-eslint/unique-directive-names-per-location': string;
            '@graphql-eslint/unique-input-field-names': string;
            '@graphql-eslint/unique-variable-names': string;
            '@graphql-eslint/value-literals-of-correct-type': string;
            '@graphql-eslint/variables-are-input-types': string;
            '@graphql-eslint/variables-in-allowed-position': string;
        };
    };
    'operations-recommended': {
        languageOptions: {
            parser: {
                parseForESLint: typeof parseForESLint;
            };
        };
        rules: {
            '@graphql-eslint/executable-definitions': string;
            '@graphql-eslint/fields-on-correct-type': string;
            '@graphql-eslint/fragments-on-composite-type': string;
            '@graphql-eslint/known-argument-names': string;
            '@graphql-eslint/known-directives': string;
            '@graphql-eslint/known-fragment-names': string;
            '@graphql-eslint/known-type-names': string;
            '@graphql-eslint/lone-anonymous-operation': string;
            '@graphql-eslint/naming-convention': (string | {
                VariableDefinition: string;
                OperationDefinition: {
                    style: string;
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
                FragmentDefinition: {
                    style: string;
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
            })[];
            '@graphql-eslint/no-anonymous-operations': string;
            '@graphql-eslint/no-deprecated': string;
            '@graphql-eslint/no-duplicate-fields': string;
            '@graphql-eslint/no-fragment-cycles': string;
            '@graphql-eslint/no-undefined-variables': string;
            '@graphql-eslint/no-unused-fragments': string;
            '@graphql-eslint/no-unused-variables': string;
            '@graphql-eslint/one-field-subscriptions': string;
            '@graphql-eslint/overlapping-fields-can-be-merged': string;
            '@graphql-eslint/possible-fragment-spread': string;
            '@graphql-eslint/provided-required-arguments': string;
            '@graphql-eslint/require-id-when-available': string;
            '@graphql-eslint/scalar-leafs': string;
            '@graphql-eslint/selection-set-depth': (string | {
                maxDepth: number;
            })[];
            '@graphql-eslint/unique-argument-names': string;
            '@graphql-eslint/unique-directive-names-per-location': string;
            '@graphql-eslint/unique-input-field-names': string;
            '@graphql-eslint/unique-variable-names': string;
            '@graphql-eslint/value-literals-of-correct-type': string;
            '@graphql-eslint/variables-are-input-types': string;
            '@graphql-eslint/variables-in-allowed-position': string;
        };
    };
    relay: {
        languageOptions: {
            parser: {
                parseForESLint: typeof parseForESLint;
            };
        };
        rules: {
            '@graphql-eslint/relay-arguments': string;
            '@graphql-eslint/relay-connection-types': string;
            '@graphql-eslint/relay-edge-types': string;
            '@graphql-eslint/relay-page-info': string;
        };
    };
    'schema-all': {
        languageOptions: {
            parser: {
                parseForESLint: typeof parseForESLint;
            };
        };
        rules: {
            '@graphql-eslint/alphabetize': (string | {
                fields: string[];
                values: string[];
                arguments: string[];
            })[];
            '@graphql-eslint/input-name': string;
            '@graphql-eslint/no-scalar-result-type-on-mutation': string;
            '@graphql-eslint/require-deprecation-date': string;
            '@graphql-eslint/require-field-of-type-query-in-mutation-result': string;
            '@graphql-eslint/require-nullable-fields-with-oneof': string;
            '@graphql-eslint/require-nullable-result-in-root': string;
            '@graphql-eslint/require-type-pattern-with-oneof': string;
            '@graphql-eslint/description-style': string;
            '@graphql-eslint/known-argument-names': string;
            '@graphql-eslint/known-directives': string;
            '@graphql-eslint/known-type-names': string;
            '@graphql-eslint/lone-schema-definition': string;
            '@graphql-eslint/naming-convention': (string | {
                types: string;
                FieldDefinition: string;
                InputValueDefinition: string;
                Argument: string;
                DirectiveDefinition: string;
                EnumValueDefinition: string;
                'FieldDefinition[parent.name.value=Query]': {
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
                'FieldDefinition[parent.name.value=Mutation]': {
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
                'FieldDefinition[parent.name.value=Subscription]': {
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
            })[];
            '@graphql-eslint/no-case-insensitive-enum-values-duplicates': string;
            '@graphql-eslint/no-hashtag-description': string;
            '@graphql-eslint/no-typename-prefix': string;
            '@graphql-eslint/no-unreachable-types': string;
            '@graphql-eslint/provided-required-arguments': string;
            '@graphql-eslint/require-deprecation-reason': string;
            '@graphql-eslint/require-description': (string | {
                types: boolean;
                DirectiveDefinition: boolean;
            })[];
            '@graphql-eslint/strict-id-in-types': string;
            '@graphql-eslint/unique-directive-names': string;
            '@graphql-eslint/unique-directive-names-per-location': string;
            '@graphql-eslint/unique-field-definition-names': string;
            '@graphql-eslint/unique-operation-types': string;
            '@graphql-eslint/unique-type-names': string;
        };
    };
    'schema-recommended': {
        languageOptions: {
            parser: {
                parseForESLint: typeof parseForESLint;
            };
        };
        rules: {
            '@graphql-eslint/description-style': string;
            '@graphql-eslint/known-argument-names': string;
            '@graphql-eslint/known-directives': string;
            '@graphql-eslint/known-type-names': string;
            '@graphql-eslint/lone-schema-definition': string;
            '@graphql-eslint/naming-convention': (string | {
                types: string;
                FieldDefinition: string;
                InputValueDefinition: string;
                Argument: string;
                DirectiveDefinition: string;
                EnumValueDefinition: string;
                'FieldDefinition[parent.name.value=Query]': {
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
                'FieldDefinition[parent.name.value=Mutation]': {
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
                'FieldDefinition[parent.name.value=Subscription]': {
                    forbiddenPrefixes: string[];
                    forbiddenSuffixes: string[];
                };
            })[];
            '@graphql-eslint/no-case-insensitive-enum-values-duplicates': string;
            '@graphql-eslint/no-hashtag-description': string;
            '@graphql-eslint/no-typename-prefix': string;
            '@graphql-eslint/no-unreachable-types': string;
            '@graphql-eslint/provided-required-arguments': string;
            '@graphql-eslint/require-deprecation-reason': string;
            '@graphql-eslint/require-description': (string | {
                types: boolean;
                DirectiveDefinition: boolean;
            })[];
            '@graphql-eslint/strict-id-in-types': string;
            '@graphql-eslint/unique-directive-names': string;
            '@graphql-eslint/unique-directive-names-per-location': string;
            '@graphql-eslint/unique-field-definition-names': string;
            '@graphql-eslint/unique-operation-types': string;
            '@graphql-eslint/unique-type-names': string;
        };
    };
};
