export declare const rules: {
    alphabetize: import("../types.js").GraphQLESLintRule<{
        definitions?: boolean | undefined;
        selections?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<"OperationDefinition" | "FragmentDefinition">[] | undefined;
        arguments?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<"Field" | "Directive" | "FieldDefinition" | "DirectiveDefinition">[] | undefined;
        values?: "EnumTypeDefinition"[] | undefined;
        fields?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<"ObjectTypeDefinition" | "InterfaceTypeDefinition" | "InputObjectTypeDefinition">[] | undefined;
        variables?: "OperationDefinition"[] | undefined;
        groups?: string[] | undefined;
    }[]>;
    'description-style': import("../types.js").GraphQLESLintRule<{
        style?: "block" | "inline" | undefined;
    }[]>;
    'input-name': import("../types.js").GraphQLESLintRule<{
        checkInputType?: boolean | undefined;
        caseSensitiveInputType?: boolean | undefined;
        checkQueries?: boolean | undefined;
        checkMutations?: boolean | undefined;
    }[]>;
    'lone-executable-definition': import("../types.js").GraphQLESLintRule<{
        ignore?: ("fragment" | "query" | "mutation" | "subscription")[] | undefined;
    }[]>;
    'match-document-filename': import("../types.js").GraphQLESLintRule<{
        fragment?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | {
            style?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | undefined;
            suffix?: string | undefined;
            prefix?: string | undefined;
        } | undefined;
        query?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | {
            style?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | undefined;
            suffix?: string | undefined;
            prefix?: string | undefined;
        } | undefined;
        mutation?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | {
            style?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | undefined;
            suffix?: string | undefined;
            prefix?: string | undefined;
        } | undefined;
        subscription?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | {
            style?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<import("../utils.js").CaseStyle | "matchDocumentStyle"> | undefined;
            suffix?: string | undefined;
            prefix?: string | undefined;
        } | undefined;
        fileExtension?: ".gql" | ".graphql" | undefined;
    }[]>;
    'naming-convention': import("../types.js").GraphQLESLintRule<{
        [x: string]: unknown;
        types?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<"camelCase" | "PascalCase" | "snake_case" | "UPPER_CASE"> | {
            style?: import("json-schema-to-ts/lib/types/type-utils/writable.js").DeepWritable<"camelCase" | "PascalCase" | "snake_case" | "UPPER_CASE"> | undefined;
            suffix?: string | undefined;
            prefix?: string | undefined;
            forbiddenPrefixes?: string[] | undefined;
            forbiddenSuffixes?: string[] | undefined;
            requiredPrefixes?: string[] | undefined;
            requiredSuffixes?: string[] | undefined;
            ignorePattern?: string | undefined;
        } | undefined;
        allowLeadingUnderscore?: boolean | undefined;
        allowTrailingUnderscore?: boolean | undefined;
    }[]>;
    'no-anonymous-operations': import("../types.js").GraphQLESLintRule;
    'no-case-insensitive-enum-values-duplicates': import("../types.js").GraphQLESLintRule;
    'no-deprecated': import("../types.js").GraphQLESLintRule<[], true>;
    'no-duplicate-fields': import("../types.js").GraphQLESLintRule;
    'no-hashtag-description': import("../types.js").GraphQLESLintRule;
    'no-one-place-fragments': import("../types.js").GraphQLESLintRule;
    'no-root-type': import("../types.js").GraphQLESLintRule<{
        disallow: ("mutation" | "subscription")[];
    }[]>;
    'no-scalar-result-type-on-mutation': import("../types.js").GraphQLESLintRule;
    'no-typename-prefix': import("../types.js").GraphQLESLintRule;
    'no-unreachable-types': import("../types.js").GraphQLESLintRule;
    'no-unused-fields': import("../types.js").GraphQLESLintRule;
    'relay-arguments': import("../types.js").GraphQLESLintRule<{
        includeBoth?: boolean | undefined;
    }[], true>;
    'relay-connection-types': import("../types.js").GraphQLESLintRule;
    'relay-edge-types': import("../types.js").GraphQLESLintRule<{
        withEdgeSuffix?: boolean | undefined;
        shouldImplementNode?: boolean | undefined;
        listTypeCanWrapOnlyEdgeType?: boolean | undefined;
    }[], true>;
    'relay-page-info': import("../types.js").GraphQLESLintRule;
    'require-deprecation-date': import("../types.js").GraphQLESLintRule<{
        argumentName?: string | undefined;
    }[]>;
    'require-deprecation-reason': import("../types.js").GraphQLESLintRule;
    'require-description': import("../types.js").GraphQLESLintRule<import("./require-description.js").RuleOptions>;
    'require-field-of-type-query-in-mutation-result': import("../types.js").GraphQLESLintRule;
    'require-id-when-available': import("../types.js").GraphQLESLintRule<{
        fieldName?: string | string[] | undefined;
    }[], true>;
    'require-import-fragment': import("../types.js").GraphQLESLintRule;
    'require-nullable-fields-with-oneof': import("../types.js").GraphQLESLintRule;
    'require-nullable-result-in-root': import("../types.js").GraphQLESLintRule;
    'require-type-pattern-with-oneof': import("../types.js").GraphQLESLintRule;
    'selection-set-depth': import("../types.js").GraphQLESLintRule<{
        ignore?: string[] | undefined;
        maxDepth: number;
    }[]>;
    'strict-id-in-types': import("../types.js").GraphQLESLintRule<{
        acceptedIdNames?: string[] | undefined;
        acceptedIdTypes?: string[] | undefined;
        exceptions?: {
            types?: string[] | undefined;
            suffixes?: string[] | undefined;
        } | undefined;
    }[]>;
    'unique-fragment-name': import("../types.js").GraphQLESLintRule;
    'unique-operation-name': import("../types.js").GraphQLESLintRule;
};
