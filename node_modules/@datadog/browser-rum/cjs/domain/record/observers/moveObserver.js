"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryToComputeCoordinates = exports.initMoveObserver = void 0;
var browser_core_1 = require("@datadog/browser-core");
var serializationUtils_1 = require("../serializationUtils");
var utils_1 = require("../utils");
var types_1 = require("../../../types");
var viewports_1 = require("../viewports");
var utils_2 = require("./utils");
var MOUSE_MOVE_OBSERVER_THRESHOLD = 50;
function initMoveObserver(cb) {
    var updatePosition = (0, browser_core_1.throttle)(function (event) {
        var target = (0, utils_2.getEventTarget)(event);
        if ((0, serializationUtils_1.hasSerializedNode)(target)) {
            var coordinates = tryToComputeCoordinates(event);
            if (!coordinates) {
                return;
            }
            var position = {
                id: (0, serializationUtils_1.getSerializedNodeId)(target),
                timeOffset: 0,
                x: coordinates.x,
                y: coordinates.y,
            };
            cb([position], (0, utils_1.isTouchEvent)(event) ? types_1.IncrementalSource.TouchMove : types_1.IncrementalSource.MouseMove);
        }
    }, MOUSE_MOVE_OBSERVER_THRESHOLD, {
        trailing: false,
    }).throttled;
    return (0, browser_core_1.addEventListeners)(document, ["mousemove" /* MOUSE_MOVE */, "touchmove" /* TOUCH_MOVE */], updatePosition, {
        capture: true,
        passive: true,
    }).stop;
}
exports.initMoveObserver = initMoveObserver;
function tryToComputeCoordinates(event) {
    var _a = (0, utils_1.isTouchEvent)(event) ? event.changedTouches[0] : event, x = _a.clientX, y = _a.clientY;
    if (window.visualViewport) {
        var _b = (0, viewports_1.convertMouseEventToLayoutCoordinates)(x, y), visualViewportX = _b.visualViewportX, visualViewportY = _b.visualViewportY;
        x = visualViewportX;
        y = visualViewportY;
    }
    if (!Number.isFinite(x) || !Number.isFinite(y)) {
        if (event.isTrusted) {
            (0, browser_core_1.addTelemetryDebug)('mouse/touch event without x/y');
        }
        return undefined;
    }
    return { x: x, y: y };
}
exports.tryToComputeCoordinates = tryToComputeCoordinates;
//# sourceMappingURL=moveObserver.js.map