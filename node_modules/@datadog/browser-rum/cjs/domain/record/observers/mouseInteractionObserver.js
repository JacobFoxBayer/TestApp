"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.initMouseInteractionObserver = void 0;
var browser_core_1 = require("@datadog/browser-core");
var constants_1 = require("../../../constants");
var types_1 = require("../../../types");
var privacy_1 = require("../privacy");
var serializationUtils_1 = require("../serializationUtils");
var utils_1 = require("../utils");
var moveObserver_1 = require("./moveObserver");
var utils_2 = require("./utils");
var eventTypeToMouseInteraction = (_a = {},
    // Listen for pointerup DOM events instead of mouseup for MouseInteraction/MouseUp records. This
    // allows to reference such records from Frustration records.
    //
    // In the context of supporting Mobile Session Replay, we introduced `PointerInteraction` records
    // used by the Mobile SDKs in place of `MouseInteraction`. In the future, we should replace
    // `MouseInteraction` by `PointerInteraction` in the Browser SDK so we have an uniform way to
    // convey such interaction. This would cleanly solve the issue since we would have
    // `PointerInteraction/Up` records that we could reference from `Frustration` records.
    _a["pointerup" /* POINTER_UP */] = types_1.MouseInteractionType.MouseUp,
    _a["mousedown" /* MOUSE_DOWN */] = types_1.MouseInteractionType.MouseDown,
    _a["click" /* CLICK */] = types_1.MouseInteractionType.Click,
    _a["contextmenu" /* CONTEXT_MENU */] = types_1.MouseInteractionType.ContextMenu,
    _a["dblclick" /* DBL_CLICK */] = types_1.MouseInteractionType.DblClick,
    _a["focus" /* FOCUS */] = types_1.MouseInteractionType.Focus,
    _a["blur" /* BLUR */] = types_1.MouseInteractionType.Blur,
    _a["touchstart" /* TOUCH_START */] = types_1.MouseInteractionType.TouchStart,
    _a["touchend" /* TOUCH_END */] = types_1.MouseInteractionType.TouchEnd,
    _a);
function initMouseInteractionObserver(cb, defaultPrivacyLevel) {
    var handler = function (event) {
        var target = (0, utils_2.getEventTarget)(event);
        if ((0, privacy_1.getNodePrivacyLevel)(target, defaultPrivacyLevel) === constants_1.NodePrivacyLevel.HIDDEN || !(0, serializationUtils_1.hasSerializedNode)(target)) {
            return;
        }
        var id = (0, serializationUtils_1.getSerializedNodeId)(target);
        var type = eventTypeToMouseInteraction[event.type];
        var interaction;
        if (type !== types_1.MouseInteractionType.Blur && type !== types_1.MouseInteractionType.Focus) {
            var coordinates = (0, moveObserver_1.tryToComputeCoordinates)(event);
            if (!coordinates) {
                return;
            }
            interaction = { id: id, type: type, x: coordinates.x, y: coordinates.y };
        }
        else {
            interaction = { id: id, type: type };
        }
        var record = (0, browser_core_1.assign)({ id: (0, utils_2.getRecordIdForEvent)(event) }, (0, utils_1.assembleIncrementalSnapshot)(types_1.IncrementalSource.MouseInteraction, interaction));
        cb(record);
    };
    return (0, browser_core_1.addEventListeners)(document, Object.keys(eventTypeToMouseInteraction), handler, {
        capture: true,
        passive: true,
    }).stop;
}
exports.initMouseInteractionObserver = initMouseInteractionObserver;
//# sourceMappingURL=mouseInteractionObserver.js.map