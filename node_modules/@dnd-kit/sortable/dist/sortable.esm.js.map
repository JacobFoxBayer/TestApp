{"version":3,"file":"sortable.esm.js","sources":["../src/utilities/arrayMove.ts","../src/utilities/getSortedRects.ts","../src/utilities/isValidIndex.ts","../src/strategies/horizontalListSorting.ts","../src/strategies/rectSorting.ts","../src/strategies/rectSwapping.ts","../src/strategies/verticalListSorting.ts","../src/components/SortableContext.tsx","../src/hooks/defaults.ts","../src/hooks/utilities/useDerivedTransform.ts","../src/hooks/useSortable.ts","../src/sensors/keyboard/sortableKeyboardCoordinates.ts"],"sourcesContent":["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n","import type {\n  LayoutRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  layoutRects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<LayoutRect[]>((accumulator, id, index) => {\n    const layoutRect = layoutRects.get(id);\n\n    if (layoutRect) {\n      accumulator[index] = layoutRect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n","export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = layoutRects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.offsetLeft +\n            newIndexRect.width -\n            (activeNodeRect.offsetLeft + activeNodeRect.width)\n          : newIndexRect.offsetLeft - activeNodeRect.offsetLeft,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!previousRect && !nextRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width)\n      : nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.offsetLeft - (currentRect.offsetLeft + currentRect.width)\n    : currentRect.offsetLeft - (previousRect.offsetLeft + previousRect.width);\n}\n","import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  layoutRects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(layoutRects, overIndex, activeIndex);\n\n  const oldRect = layoutRects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = layoutRects[index];\n    newRect = layoutRects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.offsetLeft - oldRect.offsetLeft,\n    y: newRect.offsetTop - oldRect.offsetTop,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n","import type {LayoutRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  layoutRects,\n  overIndex,\n}) => {\n  const activeNodeRect = layoutRects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = layoutRects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.offsetTop +\n            overIndexRect.height -\n            (activeNodeRect.offsetTop + activeNodeRect.height)\n          : overIndexRect.offsetTop - activeNodeRect.offsetTop,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(layoutRects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  layoutRects: LayoutRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect = layoutRects[index];\n  const previousRect = layoutRects[index - 1];\n  const nextRect = layoutRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n      : nextRect\n      ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.offsetTop - (currentRect.offsetTop + currentRect.height)\n    : previousRect\n    ? currentRect.offsetTop - (previousRect.offsetTop + previousRect.height)\n    : 0;\n}\n","import React, {MutableRefObject, useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, LayoutRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {SortingStrategy} from '../types';\nimport {getSortedRects} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: UniqueIdentifier[];\n  strategy?: SortingStrategy;\n  id?: string;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: LayoutRect[];\n  strategy: SortingStrategy;\n  wasSorting: MutableRefObject<boolean>;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n  wasSorting: {current: false},\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items,\n  strategy = rectSortingStrategy,\n}: Props) {\n  const {\n    active,\n    overlayNode,\n    droppableRects,\n    over,\n    recomputeLayouts,\n    willRecomputeLayouts,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(overlayNode.rect !== null);\n  const activeIndex = active ? items.indexOf(active) : -1;\n  const isSorting = activeIndex !== -1;\n  const wasSorting = useRef(isSorting);\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const sortedRects = getSortedRects(items, droppableRects);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isSorting && !willRecomputeLayouts) {\n      // To-do: Add partial recompution of only subset of rects\n      recomputeLayouts();\n    }\n  }, [itemsHaveChanged, isSorting, recomputeLayouts, willRecomputeLayouts]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  useEffect(() => {\n    requestAnimationFrame(() => {\n      wasSorting.current = isSorting;\n    });\n  }, [isSorting]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects,\n      strategy,\n      wasSorting,\n    }),\n    [\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      sortedRects,\n      useDragOverlay,\n      strategy,\n      wasSorting,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n\nfunction isEqual(arr1: string[], arr2: string[]) {\n  return arr1.join() === arr2.join();\n}\n","import {CSS} from '@dnd-kit/utilities';\n\nimport type {AnimateLayoutChanges, SortableTransition} from './types';\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  isSorting,\n  index,\n  newIndex,\n  transition,\n}) => {\n  if (!transition) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n","import {useEffect, useRef, useState} from 'react';\nimport {getBoundingClientRect, LayoutRect} from '@dnd-kit/core';\nimport type {Transform} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<LayoutRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({rect, disabled, index, node}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const prevIndex = useRef(index);\n\n  useEffect(() => {\n    if (!disabled && index !== prevIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getBoundingClientRect(node.current);\n        const delta = {\n          x: initial.offsetLeft - current.offsetLeft,\n          y: initial.offsetTop - current.offsetTop,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== prevIndex.current) {\n      prevIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n","import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {useDraggable, useDroppable, UseDraggableArguments} from '@dnd-kit/core';\nimport {CSS, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {SortingStrategy} from '../types';\nimport {arrayMove, isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {AnimateLayoutChanges, SortableTransition} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments extends UseDraggableArguments {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  id,\n  strategy: localStrategy,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n    wasSorting,\n  } = useContext(Context);\n  const {\n    active,\n    activeNodeRect,\n    activatorEvent,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform,\n  } = useDraggable({\n    id,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled,\n  });\n  const index = items.indexOf(id);\n  const data = useMemo(() => ({containerId, index, items}), [\n    containerId,\n    index,\n    items,\n  ]);\n  const {rect, node, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    wasSorting.current &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        layoutRects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? arrayMove(items, activeIndex, overIndex).indexOf(id)\n      : index;\n  const prevNewIndex = useRef(newIndex);\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: prevNewIndex.current,\n    transition,\n    wasSorting: wasSorting.current,\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting) {\n      prevNewIndex.current = newIndex;\n    }\n  }, [isSorting, newIndex]);\n\n  return {\n    active,\n    attributes,\n    activatorEvent,\n    rect,\n    index,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (derivedTransform) {\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      return disabledTransition;\n    }\n\n    if (shouldDisplaceDragSource || !transition) {\n      return null;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return null;\n  }\n}\n","import {\n  closestCorners,\n  getViewRect,\n  getScrollableAncestors,\n  KeyboardCode,\n  RectEntry,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {context: {droppableContainers, translatedRect, scrollableAncestors}}\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!translatedRect) {\n      return;\n    }\n\n    const layoutRects: RectEntry[] = [];\n\n    Object.entries(droppableContainers).forEach(([id, container]) => {\n      if (container?.disabled) {\n        return;\n      }\n\n      const node = container?.node.current;\n\n      if (!node) {\n        return;\n      }\n\n      const rect = getViewRect(node);\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (translatedRect.top + translatedRect.height <= rect.top) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (translatedRect.top >= rect.top + rect.height) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (translatedRect.left >= rect.left + rect.width) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (translatedRect.left + translatedRect.width <= rect.left) {\n            layoutRects.push([id, rect]);\n          }\n          break;\n      }\n    });\n\n    const closestId = closestCorners(layoutRects, translatedRect);\n\n    if (closestId) {\n      const newNode = droppableContainers[closestId]?.node.current;\n\n      if (newNode) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const newRect = getViewRect(newNode);\n        const offset = hasDifferentScrollAncestors\n          ? {\n              x: 0,\n              y: 0,\n            }\n          : {\n              x: translatedRect.width - newRect.width,\n              y: translatedRect.height - newRect.height,\n            };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y,\n        };\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n"],"names":["arrayMove","array","from","to","newArray","slice","splice","length","getSortedRects","items","layoutRects","reduce","accumulator","id","index","layoutRect","get","Array","isValidIndex","defaultScale","scaleX","scaleY","horizontalListSortingStrategy","fallbackActiveRect","activeNodeRect","activeIndex","overIndex","itemGap","getItemGap","newIndexRect","x","offsetLeft","width","y","currentRect","previousRect","nextRect","rectSortingStrategy","newRects","oldRect","newRect","offsetTop","height","rectSwappingStrategy","verticalListSortingStrategy","overIndexRect","ID_PREFIX","Context","React","createContext","containerId","disableTransforms","useDragOverlay","sortedRects","strategy","wasSorting","current","SortableContext","children","useDndContext","active","overlayNode","droppableRects","over","recomputeLayouts","willRecomputeLayouts","useUniqueId","Boolean","rect","indexOf","isSorting","useRef","previousItemsRef","itemsHaveChanged","isEqual","useIsomorphicLayoutEffect","useEffect","requestAnimationFrame","contextValue","useMemo","Provider","value","arr1","arr2","join","defaultAnimateLayoutChanges","newIndex","transition","defaultTransition","duration","easing","transitionProperty","disabledTransition","CSS","Transition","toString","property","defaultAttributes","roleDescription","useDerivedTransform","disabled","node","useState","derivedTransform","setDerivedtransform","prevIndex","initial","getBoundingClientRect","delta","useSortable","animateLayoutChanges","userDefinedAttributes","attributes","localStrategy","useContext","globalStrategy","useDraggable","activatorEvent","setDraggableNodeRef","setNodeRef","listeners","isDragging","transform","data","useDroppable","setDroppableNodeRef","useCombinedRefs","displaceItem","shouldDisplaceDragSource","dragSourceDisplacement","finalTransform","prevNewIndex","shouldAnimateLayoutChanges","getTransition","directions","KeyboardCode","Down","Right","Up","Left","sortableKeyboardCoordinates","event","context","droppableContainers","translatedRect","scrollableAncestors","includes","code","preventDefault","Object","entries","forEach","container","getViewRect","top","push","left","closestId","closestCorners","newNode","newScrollAncestors","getScrollableAncestors","hasDifferentScrollAncestors","some","element","offset","newCoordinates","undefined"],"mappings":"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"}