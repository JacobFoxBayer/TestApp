const isString = require('lodash.isstring')
const extend = require('lodash.assignin')
const respondHtml = require('./respondHtml')
const respondJson = require('./respondJson')

const dependencies = {
    agent: require('superagent'),
    startTime: Date.now()
}

const errorHtml = `\
<!DOCTYPE html>
<html>
    <head>
        <title>Error getting ping page</title>
        <meta charset='UTF-8'>
        <meta http-equiv='X-UA-Compatible' content='IE=edge'>
        <meta name='viewport' content='width=device-width, initial-scale=1'>
        <link rel='stylesheet'
              href='https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.2/css/bootstrap.min.css'
              type='text/css'>
    </head>
    <body>
        <div class="container">
            <div class="page-header">
                <h3>Error Loading</h3>
            </div>
            <p>
                Something went horribly wrong while running your smoke tests.
            </p>
        </div>
    </body>
</html>\
`

const processUrls = (urls) => {
    if (isString(urls)) {
        return [urls]
    }
    return urls
}
const createPingMiddleware = (packageJson, urls = []) => {
    const {agent, startTime} = dependencies

    const urlPromise = (url) =>
        new Promise((resolve) =>
            agent.get(url).end((error, response) => resolve({url, error, response}))
        )

    return (req, res) =>
        Promise.all(processUrls(urls).map(urlPromise))
            .then((results) => {
                if (req.accepts('html')) {
                    return respondHtml(res, packageJson, results, startTime)
                }
                if (req.accepts('json')) {
                    return respondJson(res, packageJson, results, startTime)
                }
                return respondHtml(res, packageJson, results, startTime)
            })
            .catch((err) => {
                console.log('err: ', err)
                return res.status(500).send(errorHtml)
            })
}

module.exports = extend(createPingMiddleware, {dependencies})
