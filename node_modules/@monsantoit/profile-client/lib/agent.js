"use strict";

// eslint-disable-next-line global-require
var promise = require('es6-promise');
if (!window.Promise) {
  window.Promise = promise.Promise;
}
var agent = require('superagent');
var dependencies = {
  agent: agent
};
var namespace = require('./safe/namespace');
var methods = {
  get: 'GET',
  post: 'POST',
  put: 'PUT',
  del: 'DELETE',
  delete: 'DELETE',
  head: 'HEAD',
  options: 'OPTIONS',
  patch: 'PATCH'
};
var withCredentials = function withCredentials(req) {
  if (req.withCredentials) {
    return req.withCredentials();
  }
  return req;
};
var withAuthHeader = function withAuthHeader(req) {
  var header = namespace.get('authHeader', function () {
    return {};
  });
  return req.set(header() || {});
};
var withTokenCheck = function withTokenCheck(url) {
  return function (req) {
    req.on('response', function (res) {
      var localDevelopment = namespace.get('localDevelopment', false);
      var pingRedirect = res.text && res.text.indexOf('<base href="https://test.amp.monsanto.com/"/>') > -1;
      if (localDevelopment && pingRedirect) {
        console.warn("Profile Client: No token was found for the url ".concat(url, " see https://github.platforms.engineering/Velocity/profile-client/blob/master/NO-AUTH-TOKEN.md for details"));
      }
    });
    return req;
  };
};
var withBody = function withBody(body) {
  return function (req) {
    if (body) {
      return req.send(body);
    }
    return req;
  };
};
var buildRequest = function buildRequest(method, url, body) {
  var agentInstance = module.exports.dependencies.agent(method, url);
  var operations = [withTokenCheck(url), withAuthHeader, withCredentials, withBody(body)];
  return operations.reduce(function (req, operation) {
    return operation(req);
  }, agentInstance);
};
// support old agent syntax
function request(methodName, url, body) {
  return buildRequest(methodName, url, body);
}
// eslint-disable-next-line guard-for-in,no-restricted-syntax
var _loop = function _loop(methodName) {
  request[methodName] = function (url, body) {
    return buildRequest(methods[methodName], url, body);
  };
};
for (var methodName in methods) {
  _loop(methodName);
}
module.exports = request;
module.exports.dependencies = dependencies;