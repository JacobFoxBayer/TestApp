// eslint-disable-next-line global-require
const promise = require('es6-promise')

if (!window.Promise) {
    window.Promise = promise.Promise
}
const agent = require('superagent')

const dependencies = {agent}

const namespace = require('./safe/namespace')

const methods = {
    get: 'GET',
    post: 'POST',
    put: 'PUT',
    del: 'DELETE',
    delete: 'DELETE',
    head: 'HEAD',
    options: 'OPTIONS',
    patch: 'PATCH'
}

const withCredentials = (req) => {
    if (req.withCredentials) {
        return req.withCredentials()
    }
    return req
}

const withAuthHeader = (req) => {
    const header = namespace.get('authHeader', () => ({}))
    return req.set(header() || {})
}

const withTokenCheck = (url) => (req) => {
    req.on('response', (res) => {
        const localDevelopment = namespace.get('localDevelopment', false)
        const pingRedirect =
            res.text && res.text.indexOf('<base href="https://test.amp.monsanto.com/"/>') > -1

        if (localDevelopment && pingRedirect) {
            console.warn(
                `Profile Client: No token was found for the url ${url} see https://github.platforms.engineering/Velocity/profile-client/blob/master/NO-AUTH-TOKEN.md for details`
            )
        }
    })

    return req
}

const withBody = (body) => (req) => {
    if (body) {
        return req.send(body)
    }
    return req
}

const buildRequest = (method, url, body) => {
    const agentInstance = module.exports.dependencies.agent(method, url)
    const operations = [withTokenCheck(url), withAuthHeader, withCredentials, withBody(body)]
    return operations.reduce((req, operation) => operation(req), agentInstance)
}
// support old agent syntax
function request(methodName, url, body) {
    return buildRequest(methodName, url, body)
}
// eslint-disable-next-line guard-for-in,no-restricted-syntax
for (const methodName in methods) {
    request[methodName] = (url, body) => buildRequest(methods[methodName], url, body)
}

module.exports = request
module.exports.dependencies = dependencies
