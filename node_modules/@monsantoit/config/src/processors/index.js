const fs = require('fs')
const get = require('lodash/get')
const omit = require('lodash/omit')
const pick = require('lodash/pick')
const clone = require('lodash/clone')
const isObject = require('lodash/isObject')
const vault = require('./vault')
const params = require('./params')
const customURI = require('./customURI')
const parameterStore = require('./aws/paramStore')
const secretsManager = require('./aws/secretsManager')
const environment = require('./environment/index')

const deepSetParams = (config, obj) =>
    Object.keys(obj).reduce((acc, key) => {
        if (isObject(acc[key])) {
            acc[key] = params.getOption(config, acc[key])
            if (isObject(acc[key])) {
                acc[key] = deepSetParams(config, acc[key])
            }
        }
        return acc
    }, obj)

module.exports = {
    readVaultFromConfig(options) {
        const {enabled = false} = options
        return async (config) => {
            if (!enabled) return config

            const mappedOptions = deepSetParams(config, options)
            const client = await vault.vaultClient(mappedOptions)

            const prefix = 'vault://'
            const keys = customURI.findValuesWithPrefix(config, prefix)
            const values = await vault.readValues(client, keys)
            return customURI.replaceValuesWithPrefix(config, values, prefix)
        }
    },

    readVaultFromPaths(options) {
        const {enabled = false} = options
        return async (config) => {
            if (!enabled) return config

            const mappedOptions = deepSetParams(config, options)

            const client = await vault.vaultClient(mappedOptions)
            const data = await vault.readVaultPaths(client, mappedOptions.paths)
            return Object.assign(config, data)
        }
    },

    readParamStoreFromConfig(options) {
        const {enabled = false, region} = options
        return async (config) => {
            if (enabled) {
                const prefix = 'awsparam://'
                const allKeys = customURI.findValuesWithPrefix(config, prefix)
                const values = await parameterStore.getSSMParameters(allKeys, region)
                return customURI.replaceValuesWithPrefix(config, values, prefix)
            }
            return config
        }
    },

    readSecretsManagerFromConfig(options) {
        const {enabled = false, region} = options
        return async (config) => {
            if (enabled) {
                const prefix = 'awssecret://'
                const allKeys = customURI.findValuesWithPrefix(config, prefix)
                const values = await secretsManager.getSecretValues(allKeys, region)
                return customURI.replaceValuesWithPrefix(config, values, prefix)
            }
            return config
        }
    },

    readEnvironmentVariablesFromConfig(options) {
        const {enabled = false} = options
        return async (config) => {
            if (enabled) {
                const prefix = 'env://'
                const allKeys = customURI.findValuesWithPrefix(config, prefix)
                const values = await environment.getEnvironmentVariables(allKeys)
                return customURI.replaceValuesWithPrefix(config, values, prefix)
            }
            return config
        }
    },

    writeToFile(options) {
        const {enabled = false} = options
        return (config) => {
            if (!enabled) return config
            return new Promise((resolve, reject) => {
                let data = clone(config)

                if (options.only) {
                    data = pick(data, options.only)
                }

                if (options.omit) {
                    data = omit(data, options.omit)
                }

                fs.writeFile(options.output, JSON.stringify(data, null, 4), 'utf8', (err) => {
                    if (err) {
                        return reject(err)
                    }
                    return resolve(config)
                })
            })
        }
    },

    inspect(key) {
        return (config) => {
            const value = get(config, key)
            if (value) {
                console.info(`Value for '${key}'`)
            } else {
                console.warn(`No value found at ${key}`)
            }
            return config
        }
    }
}
