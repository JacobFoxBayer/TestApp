const {SecretsManagerClient} = require('@aws-sdk/client-secrets-manager')
const secretsManager = require('../../../../src/processors/aws/secretsManager')

describe('secretsManager', () => {
    const mockData = {
        'secret-a': 'resolved secret-a',
        'secret-b': '{"b": "resolved secret-b"}',
        'secret-c': '{"c1": "resolved secret-c-1", "c2": "resolved secret-c-2"}'
    }
    const sandbox = sinon.createSandbox()
    let secretsManagerSendPromiseStub

    beforeEach(() => {
        secretsManagerSendPromiseStub = sandbox.stub()
        secretsManagerSendPromiseStub.callsFake((secretValueCommand) => ({
            SecretString: mockData[secretValueCommand.input.SecretId]
        }))
        sandbox.stub(SecretsManagerClient.prototype, 'send').value(secretsManagerSendPromiseStub)
    })
    afterEach(() => {
        sandbox.restore()
    })

    it('returns an object containing the original uri and resolved value', async () => {
        const resolve = await secretsManager.getSecretValues([
            'secret-a',
            'secret-b:SecretString:b',
            'secret-c:SecretString:c1:AWSCURRENT',
            'secret-c:SecretString:c2::fc9fb051-e6ff-43b0-8089-3ddc25a72b95'
        ])
        resolve.should.eql({
            'secret-a': 'resolved secret-a',
            'secret-b:SecretString:b': 'resolved secret-b',
            'secret-c:SecretString:c1:AWSCURRENT': 'resolved secret-c-1',
            'secret-c:SecretString:c2::fc9fb051-e6ff-43b0-8089-3ddc25a72b95': 'resolved secret-c-2'
        })
    })
    it('throws an error if secrets manager throws an error', async () => {
        secretsManagerSendPromiseStub.throws(new Error('Fail!'))

        try {
            await secretsManager.getSecretValues([
                'secret-a',
                'secret-b:SecretString:b',
                'secret-c:SecretString:c1:AWSCURRENT',
                'secret-c:SecretString:c2::xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'
            ])
        } catch (err) {
            err.message.should.eql('Fail!')
        }
    })
})
