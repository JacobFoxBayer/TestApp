import React from 'react'
import {render, screen} from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import {SearchBar} from '../../../menu-ui/scripts/search-bar/SearchBar'
import * as Search from '../../../src/search/actions'
import * as Menu from '../../../src/menu/actions'

describe('search bar', () => {
    const fauxWindow = {}

    const searchConfig = {}

    const props = {
        value: '',
        dispatch: sinon.stub()
    }

    beforeEach(() => {
        render(<SearchBar animationSpeed={0} searchConfig={searchConfig} {...props} />)
    })

    const restoreAll = (obj) => {
        Object.keys(obj).forEach((key) => {
            obj[key].reset ? obj[key].reset() : null
        })
    }

    afterEach(() => {
        ;[fauxWindow].forEach(restoreAll)
    })

    it('dispatches a search focus event on when focus is gained', () => {
        const input = screen.getByRole('textbox')
        input.focus()
        props.dispatch.calledWith(Search.gainFocus()).should.be.true
    })

    it('dispatches a search change event on input', async () => {
        const input = screen.getByRole('textbox')
        await userEvent.type(input, 'test')
        input.value.should.equal('test')
        props.dispatch.calledWith(Search.updateQuery('test'))
    })

    it('dispatches a search blur event on when focus is lost', () => {
        const input = screen.getByRole('textbox')
        const button = screen.getByRole('button')
        input.focus()
        button.focus()
        props.dispatch.calledWith(Search.loseFocus()).should.be.true
    })

    it('dispatches a menu toggle for the dropdown, when the input has focus, and a value', async () => {
        const input = screen.getByRole('textbox')
        await userEvent.type(input, 'test')
        const action = Menu.toggleMenu('searchMenu', true)
        props.dispatch.calledWith(action).should.be.true
    })
})
