import React from 'react'
import {render, screen} from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import AnalyticsLink from '../../menu-ui/scripts/AnalyticsLink'
import * as analytics from '../../src/analytics'

describe('analytics link', () => {
    let {sandbox, dropdownNavigation, menuNavigation, releaseNotification} = {}
    beforeEach(() => {
        sandbox = sinon.createSandbox()
        dropdownNavigation = sandbox.stub(analytics, 'dropdownNavigation')
        menuNavigation = sandbox.stub(analytics, 'menuNavigation')
        releaseNotification = sandbox.stub(analytics, 'releaseNotification')
    })

    afterEach(() => {
        sandbox.restore()
    })

    it('not in menu using link text (default)', async () => {
        render(<AnalyticsLink>Test Me</AnalyticsLink>)
        await userEvent.click(screen.getByText(/test me/i))

        dropdownNavigation.calledWith('Test Me').should.equal(true)
        menuNavigation.calledWith('Test Me').should.equal(false)
    })

    it('in menu using link text', async () => {
        render(<AnalyticsLink inMenu>Test Me</AnalyticsLink>)
        await userEvent.click(screen.getByText(/test me/i))

        menuNavigation.calledWith('Test Me').should.equal(true)
        dropdownNavigation.calledWith('Test Me').should.equal(false)
    })

    it('dig down into children to find text', async () => {
        render(
            <AnalyticsLink inMenu>
                <div>
                    <button>Test Me</button>
                </div>
            </AnalyticsLink>
        )
        await userEvent.click(screen.getByText(/test me/i))
        menuNavigation.calledWith('stuff').should.equal(false)
        menuNavigation.calledWith('Test Me').should.equal(true)
        dropdownNavigation.calledWith('stuff').should.equal(false)
    })

    it('if multiple children, then fallback to text property', async () => {
        render(
            <AnalyticsLink inMenu text="stuff">
                <div>Test</div>
                <div>Me</div>
            </AnalyticsLink>
        )
        await userEvent.click(document.querySelector('a'))
        menuNavigation.calledWith('stuff').should.equal(true)
        menuNavigation.calledWith('Test Me').should.equal(false)
        dropdownNavigation.calledWith('stuff').should.equal(false)
    })

    it('in menu utilizing provided text even if child is text', async () => {
        render(
            <AnalyticsLink inMenu text="stuff">
                Test Me
            </AnalyticsLink>
        )
        await userEvent.click(screen.getByText(/test me/i))
        menuNavigation.calledWith('stuff').should.equal(true)
        menuNavigation.calledWith('Test Me').should.equal(false)
        dropdownNavigation.calledWith('stuff').should.equal(false)
    })

    it('use provided event method', async () => {
        render(<AnalyticsLink analyticsFunction={releaseNotification}>Test Me</AnalyticsLink>)
        await userEvent.click(screen.getByText(/test me/i))
        releaseNotification.calledWith('Test Me').should.equal(true)
        menuNavigation.calledWith('Test Me').should.equal(false)
        dropdownNavigation.calledWith('Test Me').should.equal(false)
    })

    it('use provided event method even if inMenu provided', async () => {
        render(
            <AnalyticsLink inMenu analyticsFunction={releaseNotification}>
                Test Me
            </AnalyticsLink>
        )
        await userEvent.click(screen.getByText(/test me/i))
        releaseNotification.calledWith('Test Me').should.equal(true)
        menuNavigation.calledWith('Test Me').should.equal(false)
        dropdownNavigation.calledWith('Test Me').should.equal(false)
    })

    it('analytics object returned back to calling function for more complex logic', async () => {
        const myFunction = (text, analyticsObj) => {
            analyticsObj.releaseNotification(text)
        }
        render(
            <AnalyticsLink inMenu analyticsFunction={myFunction}>
                Test Me
            </AnalyticsLink>
        )
        await userEvent.click(screen.getByText(/test me/i))
        releaseNotification.calledWith('Test Me').should.equal(true)
    })
})
