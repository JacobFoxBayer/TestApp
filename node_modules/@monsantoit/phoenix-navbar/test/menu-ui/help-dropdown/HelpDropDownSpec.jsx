import React from 'react'
import {render, screen, fireEvent} from '@testing-library/react'
import userEvent from '@testing-library/user-event'
import moment from 'moment'
import HelpDropDown from '../../../menu-ui/scripts/help-dropdown/HelpDropDownContents'

describe('HelpDropDown', () => {
    let props = {}

    beforeEach(() => {
        props = {
            productName: 'Product Name',
            productDescription: 'This is a brief description of the product',
            productPageUrl: 'http://somesite.com',
            releaseNotification: {
                headline: 'Something Changed',
                summary: 'Verbose description of the change',
                publishDate: moment('2019-07-04').toDate().toISOString(),
                url: 'http://changes.somesite.com'
            },
            supportLinks: [
                {
                    name: 'Support Doc',
                    url: 'http://somesite.com/docs'
                }
            ],
            onContactSupport: sinon.stub(),
            onShowFeedbackDialog: sinon.stub()
        }
    })

    it('shows description and product page link if available', () => {
        render(<HelpDropDown {...props} />)
        screen.getByText('Overview').should.exist
        screen.getByText('This is a brief description of the product').should.exist
        screen.getByText('View Details').should.exist
    })

    it('hides product page link if not available', () => {
        props.productPageUrl = undefined
        render(<HelpDropDown {...props} />)
        screen.getByText('Overview').should.exist
        screen.getByText('This is a brief description of the product').should.exist
        screen.queryAllByText('View Details').length.should.eql(0)
    })

    it('hides overview section if description and link not available', () => {
        props.productDescription = undefined
        props.productPageUrl = undefined
        render(<HelpDropDown {...props} />)
        screen.queryAllByText('Overview').length.should.eql(0)
    })

    it('displays updates if available', async () => {
        render(<HelpDropDown {...props} />)
        const element = screen.getByText("What's New")
        element.should.exist
        await userEvent.click(element)
        screen.getByText('Something Changed').should.exist
        screen.getByText('Jul 4, 2019').should.exist
        screen.getByText('Verbose description of the change').should.exist
        screen.getByText('More').should.exist
    })

    it('hides Whats New section if no updates are available', () => {
        props.releaseNotification = undefined
        render(<HelpDropDown {...props} />)
        screen.queryAllByText("What's New").length.should.eql(0)
    })

    it('shows support section as collapsible if either of the other sections are visible', () => {
        render(<HelpDropDown {...props} />)
        screen.getByText('Support').should.exist
    })

    it('hides collapsible component for support section if support is the only section', () => {
        props.productDescription = undefined
        props.productPageUrl = undefined
        props.releaseNotification = undefined
        render(<HelpDropDown {...props} />)
        screen.queryAllByText('Support').length.should.eql(0)
        screen.queryAllByText('Contact Support').length.should.eql(1)
    })

    it('launches support dialog', async () => {
        const sandbox = sinon.createSandbox()
        const onClickCallback = sandbox.stub()
        render(<HelpDropDown onClick={onClickCallback()} />)
        const supportContainer = screen.getByText('help_outline')

        await fireEvent.click(supportContainer)
        await fireEvent.click(supportContainer)
        onClickCallback.calledOnce.should.be.true
    })

    describe('support section', () => {
        it('uses support link if it exists', () => {
            render(<HelpDropDown {...props} />)
            screen.queryAllByText('open_in_new').length.should.eql(1)
        })

        it('if support link does not exist, fall back to product info page', () => {
            delete props.supportLinks
            render(<HelpDropDown {...props} />)
            screen.getByText('Contact Support').should.exist
            screen.getByText('open_in_new').should.exist
        })

        it('if no support link or product info page', () => {
            delete props.supportLinks
            delete props.productPageUrl
            render(<HelpDropDown {...props} />)
            screen.getByText('Contact Support').should.exist
            screen.queryAllByText('open_in_new').length.should.eql(0)
        })
    })
})
