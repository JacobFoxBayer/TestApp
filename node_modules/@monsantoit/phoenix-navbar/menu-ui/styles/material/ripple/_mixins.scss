//
// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import '../animation/variables';
@import '../theme/mixins';
@import './functions';
@import './variables';

@mixin phoenix-mdc-ripple-surface() {
    --phoenix-mdc-ripple-fg-size: 0;
    --phoenix-mdc-ripple-left: 0;
    --phoenix-mdc-ripple-top: 0;
    --phoenix-mdc-ripple-fg-scale: 1;
    --phoenix-mdc-ripple-fg-translate-end: 0;
    --phoenix-mdc-ripple-fg-translate-start: 0;

    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    will-change: transform, opacity;

    &::before,
    &::after {
        position: absolute;
        border-radius: 50%;
        opacity: 0;
        pointer-events: none;
        content: '';
    }

    &::before {
        transition: opacity $phoenix-navbar-states-wash-duration linear;
        z-index: 1; // Ensure that the ripple wash for hover/focus states is displayed on top of positioned child elements
    }

    // Common styles for upgraded surfaces (some of these depend on custom properties set via JS or other mixins)

    &.phoenix-mdc-ripple-upgraded::before {
        transform: scale(var(--phoenix-mdc-ripple-fg-scale, 1));
    }

    &.phoenix-mdc-ripple-upgraded::after {
        top: 0;

        /* @noflip */
        left: 0;
        transform: scale(0);
        transform-origin: center center;
    }

    &.phoenix-mdc-ripple-upgraded--unbounded::after {
        top: var(--phoenix-mdc-ripple-top, 0);

        /* @noflip */
        left: var(--phoenix-mdc-ripple-left, 0);
    }

    &.phoenix-mdc-ripple-upgraded--foreground-activation::after {
        animation: $phoenix-navbar-ripple-translate-duration phoenix-mdc-ripple-fg-radius-in
                forwards,
            $phoenix-navbar-ripple-fade-in-duration phoenix-mdc-ripple-fg-opacity-in forwards;
    }

    &.phoenix-mdc-ripple-upgraded--foreground-deactivation::after {
        animation: $phoenix-navbar-ripple-fade-out-duration phoenix-mdc-ripple-fg-opacity-out;
        // Retain transform from phoenix-mdc-ripple-fg-radius-in activation
        transform: translate(var(--phoenix-mdc-ripple-fg-translate-end, 0))
            scale(var(--phoenix-mdc-ripple-fg-scale, 1));
    }
}

@mixin phoenix-mdc-states-base-color($color) {
    // Opacity styles are here (rather than in phoenix-mdc-ripple-surface) to ensure that opacity is re-initialized for
    // cases where this mixin is used to override another inherited use of itself,
    // without needing to re-include phoenix-mdc-ripple-surface.
    &::before,
    &::after {
        @include phoenix-mdc-theme-prop(background-color, $color, $edgeOptOut: true);
    }
}

@mixin phoenix-mdc-states-hover-opacity($opacity) {
    // Background wash styles, for both CSS-only and upgraded stateful surfaces
    &:hover::before {
        opacity: $opacity;
    }
}

@mixin phoenix-mdc-states-focus-opacity($opacity, $has-nested-focusable-element: false) {
    // Focus overrides hover by reusing the ::before pseudo-element.
    // :focus-within generally works on non-MS browsers and matches when a *child* of the element has focus.
    // It is useful for cases where a component has a focusable element within the root node, e.g. text field,
    // but undesirable in general in case of nested stateful components.
    // We use a modifier class for JS-enabled surfaces to support all use cases in all browsers.
    $cssOnlyFocusSelector: if(
        $has-nested-focusable-element,
        '&:not(.phoenix-mdc-ripple-upgraded):focus::before, &:not(.phoenix-mdc-ripple-upgraded):focus-within::before',
        '&:not(.phoenix-mdc-ripple-upgraded):focus::before'
    );

    #{$cssOnlyFocusSelector},
    &.phoenix-mdc-ripple-upgraded--background-focused::before {
        // Note that this duration is only effective on focus, not blur
        transition-duration: 75ms;
        opacity: $opacity;
    }
}

@mixin phoenix-mdc-states-press-opacity($opacity) {
    // Styles for non-upgraded (CSS-only) stateful surfaces

    &:not(.phoenix-mdc-ripple-upgraded) {
        // Apply press additively by using the ::after pseudo-element
        &::after {
            transition: opacity $phoenix-navbar-ripple-fade-out-duration linear;
        }

        &:active::after {
            transition-duration: $phoenix-navbar-ripple-fade-in-duration;
            opacity: $opacity;
        }
    }

    &.phoenix-mdc-ripple-upgraded {
        --phoenix-mdc-ripple-fg-opacity: #{$opacity};
    }
}

// Simple mixin for base states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin phoenix-mdc-states($color: black, $has-nested-focusable-element: false) {
    @include phoenix-mdc-states-interactions_($color, $has-nested-focusable-element);
}

// Simple mixin for activated states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin phoenix-mdc-states-activated($color, $has-nested-focusable-element: false) {
    $activated-opacity: phoenix-mdc-states-opacity($color, activated);

    &--activated {
        // Stylelint seems to think that '&' qualifies as a type selector here?
        // stylelint-disable-next-line selector-max-type
        &::before {
            opacity: $activated-opacity;
        }

        @include phoenix-mdc-states-interactions_(
            $color,
            $has-nested-focusable-element,
            $activated-opacity
        );
    }
}

// Simple mixin for selected states which automatically selects opacity values based on whether the ink color is
// light or dark.
@mixin phoenix-mdc-states-selected($color, $has-nested-focusable-element: false) {
    $selected-opacity: phoenix-mdc-states-opacity($color, selected);

    &--selected {
        // stylelint-disable-next-line selector-max-type
        &::before {
            opacity: $selected-opacity;
        }

        @include phoenix-mdc-states-interactions_(
            $color,
            $has-nested-focusable-element,
            $selected-opacity
        );
    }
}

@mixin phoenix-mdc-ripple-radius-bounded($radius: 100%) {
    &::before,
    &::after {
        top: calc(50% - #{$radius});

        /* @noflip */
        left: calc(50% - #{$radius});
        width: $radius * 2;
        height: $radius * 2;
    }

    &.phoenix-mdc-ripple-upgraded::after {
        width: var(--phoenix-mdc-ripple-fg-size, $radius);
        height: var(--phoenix-mdc-ripple-fg-size, $radius);
    }
}

@mixin phoenix-mdc-ripple-radius-unbounded($radius: 100%) {
    &::before,
    &::after {
        top: calc(50% - #{$radius * 0.5});

        /* @noflip */
        left: calc(50% - #{$radius * 0.5});
        width: $radius;
        height: $radius;
    }

    &.phoenix-mdc-ripple-upgraded::before,
    &.phoenix-mdc-ripple-upgraded::after {
        top: var(--phoenix-mdc-ripple-top, calc(50% - #{$radius * 0.5}));

        /* @noflip */
        left: var(--phoenix-mdc-ripple-left, calc(50% - #{$radius * 0.5}));
        width: var(--phoenix-mdc-ripple-fg-size, $radius);
        height: var(--phoenix-mdc-ripple-fg-size, $radius);
    }

    &.phoenix-mdc-ripple-upgraded::after {
        width: var(--phoenix-mdc-ripple-fg-size, $radius);
        height: var(--phoenix-mdc-ripple-fg-size, $radius);
    }
}

@mixin phoenix-mdc-states-interactions_(
    $color,
    $has-nested-focusable-element,
    $opacity-modifier: 0
) {
    @include phoenix-mdc-states-base-color($color);
    @include phoenix-mdc-states-hover-opacity(
        phoenix-mdc-states-opacity($color, hover) + $opacity-modifier
    );
    @include phoenix-mdc-states-focus-opacity(
        phoenix-mdc-states-opacity($color, focus) + $opacity-modifier,
        $has-nested-focusable-element
    );
    @include phoenix-mdc-states-press-opacity(
        phoenix-mdc-states-opacity($color, press) + $opacity-modifier
    );
}
