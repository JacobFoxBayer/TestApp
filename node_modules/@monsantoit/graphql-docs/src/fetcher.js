import { parse } from 'graphql';
import { execute } from '@apollo/client';
import { SubscriptionClient } from "subscriptions-transport-ws";
import { WebSocketLink } from "@apollo/client/link/ws";
import http from './http';


const hasSubscriptionOperation = (graphQlParams) => {
    const queryDoc = parse(graphQlParams.query);

    for (let definition of queryDoc.definitions) {
        if (definition.kind === 'OperationDefinition') {
            const operation = definition.operation;
            if (operation === 'subscription') {
                return true;
            }
        }
    }

    return false;
};

const getWebSocketLink = (wsUrl) => {
    if (wsUrl) {
        if (wsUrl[0] === '/') {
            const protocol = window.location.protocol === 'http:' ? 'ws:' : 'wss:'
            wsUrl = `${protocol}//${window.location.hostname}:${window.location.port}${wsUrl}`
        }
        return new WebSocketLink(new SubscriptionClient(wsUrl, {reconnect: true}));
    } else {
        return undefined;
    }
}

const create = (url, wsUrl, headers) => {
    const wsLink = getWebSocketLink(wsUrl)
    return (operation) => {
        if (wsLink && hasSubscriptionOperation(operation)) {
            operation.query = parse(operation.query);
            return execute(wsLink, operation);
        } else {
            return http(url, headers)(operation)
        }
    };
}

export default {create}
