const _ = require('../lodash')

const browser = {
    window() {
        if (typeof window === 'undefined') {
            return {}
        }
        return window
    },

    document() {
        if (typeof document === 'undefined') {
            return {}
        }
        return document
    },

    namespace() {
        const namespace = browser.window().velocity || browser.window().phoenix
        if (namespace != null) {
            return namespace
        }
        console.warn(
            'Could not find the namespace for profile client. Are you using @monsantoit/service-bindings middleware?'
        )
        return {}
    },

    serviceBindings() {
        return browser.namespace().serviceBindings || {}
    },

    localDevelopment() {
        return !!browser.namespace().localDevelopment
    },

    localOcelot() {
        return !!browser.namespace().localOcelot
    }
}

// profile-client settings, derived from browser globals
const settings = {
    debuggerEnabled() {
        return !!browser.namespace().debugProfileClient
    },

    refreshEnabled() {
        if (_.has(browser.namespace(), 'refreshEnabled')) {
            return browser.namespace().refreshEnabled
        }
        return true
    },

    authEnabled() {
        const notLocalDevelopment = browser.localDevelopment() === false
        const localOcelot = browser.localOcelot() === true

        return notLocalDevelopment || localOcelot
    },

    retryInterval() {
        return 1000 * 5
    },

    tokenFromCookie(name) {
        const cookiePairs = (browser.document().cookie || '')
            .split(';')
            .map((cookie) => cookie.trim().split('='))

        const cookieMap = _.fromPairs(cookiePairs) || {}

        if (name != null && cookieMap[name]) {
            return cookieMap[name]
        }
        return null
    }
}

module.exports = {browser, settings}
