"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var settings = require('./safe/settings');

var maybeLog = function maybeLog(type, args) {
  var _console;

  if (settings.debuggerEnabled() && typeof console[type] === 'function') return (_console = console)[type].apply(_console, ['ProfileClient', new Date().toISOString()].concat(_toConsumableArray(Array.from(args))));
  return undefined;
};

var methods = ['log', 'warn', 'info', 'error'];
var debug = {};
methods.forEach(function (method) {
  debug[method] = function () {
    for (var _len = arguments.length, r = new Array(_len), _key = 0; _key < _len; _key++) {
      r[_key] = arguments[_key];
    }

    return maybeLog('log', r);
  };
});
module.exports = debug;