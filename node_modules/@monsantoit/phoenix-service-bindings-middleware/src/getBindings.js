const parseCloudFoundryBindings = require('./parseCloudFoundryBindings')
const defaultBindings = require('./defaultBindings')

// defaults are passed in as {'messaging-url': {url: 'http://...', user: 'foo', password: 'bar'}}
// we need them in this format: {'messaging-url': 'http://...'}
const reformatUserDefaults = (defaults) => {
    const result = {}
    for (let binding in defaults) {
        result[binding] = defaults[binding].url || defaults[binding].value
    }
    return result
}

module.exports = function(userDefaults = {}) {
    const result = {}

    const add = (bindings) => {
        for (let binding in bindings) {
            result[binding] = bindings[binding]
        }
    }

    const cloudFoundryBindings = parseCloudFoundryBindings()

    const nonLocal = process.env.NODE_ENV === 'production'
    const cfEnvironment = process.env.VCAP_SERVICES

    if (nonLocal && cfEnvironment && !cloudFoundryBindings['phoenix-home']) {
        throw new Error("No service binding found for phoenix-home. Should be 'phoenix-tools-np.io' in non-prod and 'phoenix-tools.io' in production");
    } else if (nonLocal && !cfEnvironment && !userDefaults['phoenix-home']) {
        throw new Error("No user-provided value found for key 'phoenix-home'. Should be 'phoenix-tools-np.io' in non-prod and 'phoenix-tools.io' in production")
    }

    const formattedUserDefaults = reformatUserDefaults(userDefaults)
    const homeBinding = {
        'phoenix-home': cloudFoundryBindings['phoenix-home'] || formattedUserDefaults['phoenix-home']
    }
    add(defaultBindings(homeBinding))
    add(formattedUserDefaults)
    add(cloudFoundryBindings)

    return result
}
