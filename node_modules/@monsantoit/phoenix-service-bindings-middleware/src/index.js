const getDefaults = require('lodash.defaults')
const getBindings = require('./getBindings')

const getEnvironment = (defaults = {}) => {
    const services = process.env.VCAP_SERVICES ? JSON.parse(typeof process.env.VCAP_SERVICES === 'string' ? process.env.VCAP_SERVICES : '{}') : {}
    const ups = services['user-provided']
    const home = ups ? ups.find((s) => s.credentials.alias === 'phoenix-home' || s.name === 'phoenix-home') : undefined
    const cfEnv =  home ? home.credentials.env : undefined
    const defaultEnv = defaults['phoenix-home'] ? defaults['phoenix-home'].env : undefined
    return cfEnv || defaultEnv
}

const resolveBindings = (defaults = {}, flags = {}) => {
    const localDevelopment = process.env.NODE_ENV !== 'production'
    const localOcelot = localDevelopment
    const serviceBindings = getBindings(defaults)
    const environment = getEnvironment(defaults) || 'NonProd'
    return getDefaults(flags, {
        localDevelopment,
        serviceBindings,
        environment,
        localOcelot
    })
}

const aggregateBindings = (defaults = {}, flags = {}) => {
    const bindings = resolveBindings(defaults, flags)
    const defaultPhoenix = 'window.phoenix = window.phoenix || {};'
    // explicitly state individual keys, so we don't override bindings set elsewhere.
    return Object.keys(bindings).reduce((acc, key) =>
        `${acc} window.phoenix["${key}"] = ${JSON.stringify(bindings[key])};`
    , defaultPhoenix)
}

module.exports = (defaults, flags) => {
    return (req, res, next) => {
        if (req.method === 'GET') {
            return res
                .type('application/javascript')
                .send(aggregateBindings(defaults || {}, flags))
        }
        return next()
    }
}

module.exports.getBindings = resolveBindings
module.exports.getJson = aggregateBindings