const _ = require('lodash')
const generateHtml = require('./generateHtml')
const getSuiteByHost = require('./getSuiteByHost')
const getBearerToken = require('./getBearerToken')
const getSuiteForHost = require('./getSuiteForHost')

const getHost = (host, referrer, forwardedHost) => {
    if (getSuiteForHost(referrer, {}, null)) {
        return referrer
    }

    if (forwardedHost) {
        return forwardedHost
    }

    return host
}

module.exports = (appBaseUrl, title, cookies = [], options = {}) => {
    if (_.isEmpty(appBaseUrl)) {
        throw new Error('generateHtmlMiddleware: Did not provide an appBaseUrl!')
    }
    if (_.isEmpty(title)) {
        throw new Error('generateHtmlMiddleware: Did not provide a title!')
    }
    return async (req, res) => {
        let htmlOptions = options
        if (options.i18n) {
            const i18n = {locale: req.locale, messages: req.messages}
            htmlOptions = _.extend({}, options, {i18n})
        }

        const bearerToken = getBearerToken(_.get(req.headers, 'cookie'), cookies)
        const reqReferer = req.headers.referer
            ? req.headers.referer
                  .replace('https://', '')
                  .replace('http://', '')
                  .slice(0, req.headers.referer.replace('https://', '').indexOf('/'))
            : undefined
        const host = getHost(req.headers.host, reqReferer, req.headers['x-forwarded-host'])
        console.log(
            'host/reqReferer/x-forwarded-host',
            host,
            reqReferer,
            req.headers['x-forwarded-host']
        )
        try {
            const suite = await getSuiteByHost(
                bearerToken,
                host,
                options.additionalHostMap,
                options.defaultSuite,
                options.verbose
            )
            res.send(generateHtml(appBaseUrl, title, suite, htmlOptions))
        } catch (error) {
            const suite = getSuiteForHost(host, options.additionalHostMap, options.defaultSuite)
            res.send(generateHtml(appBaseUrl, title, suite, htmlOptions))
            console.error(
                'generateHtmlMiddleware: Unable to fetch suite styles, falling back to default - ',
                error
            )
        }
    }
}
