const oauth = require('@monsantoit/oauth-azure')
const getClient = require('./createNavigationClient')
const config = require('../config/store')
const {suiteMapJsonFile, writeSuitesToFile} = require('./suitesMapFile/readAndWriteSuitesMapFile')

const getSuitesAndMap = async (bearerToken) => {
    function getSuiteHosts(hostUrl) {
        const cleanHostName = hostUrl.replace('http://', '').replace('https://', '')
        const env = '$ENV'
        const envNp = '-np'
        if (cleanHostName.includes(env)) {
            return [cleanHostName.replace(env, ''), cleanHostName.replace(env, envNp)]
        }
        return [cleanHostName]
    }
    const client = getClient('velocity', bearerToken)
    const getSuiteQuery = `{suites: getSuites {\n    id\n    baseUrl\n }}`
    const results = await client.send({
        query: getSuiteQuery,
    })
    const resultsParse = JSON.parse(results.text)
    const devtoolStaticSuite = {
        id: 'devtools',
        baseUrl: 'https://devtools$ENV.bayer.com',
    }
    const peadminStaticSuite = {
        id: 'peadmin',
        baseUrl: 'https://peadmin$ENV.monsanto.net',
    }
    const {suites} = resultsParse.data
    suites.push(devtoolStaticSuite)
    suites.push(peadminStaticSuite)
    const mapedSuites = suites.reduce(
        (aggrSuites, suite) => ({...aggrSuites, [suite.id]: getSuiteHosts(suite.baseUrl)}),
        {}
    )

    return mapedSuites
}

const generateSuitesMapToFile = async () => {
    await config.init()
    oauth
        .httpGetToken(config.get('oauth-client'))()
        .then(async (token) => {
            if (!token) {
                throw Error('No available token')
            }
            const suites = await getSuitesAndMap(token)
            writeSuitesToFile(suites)
            console.log(`SUITES saved to ${suiteMapJsonFile} `, suites)
            process.exit()
        })
}

generateSuitesMapToFile()

module.exports = {
    suiteMapJsonFile,
}
