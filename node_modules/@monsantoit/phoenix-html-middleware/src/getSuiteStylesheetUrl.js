const _ = require('lodash')
const semver = require('semver')

const defaultOptions = {
    phoenixHome: 'phoenix-tools.io',
    libType: 'material',
}

const libTypeExtension = {
    material: 'mat',
    bootstrap: 'bs3',
    bootstrap3: 'bs3',
    bootstrap4: 'bs4',
    element: 'element',
}

module.exports = (suite, options) => {
    if (!suite) {
        throw new Error('Must provide a suite name.')
    }
    const {
        suiteDir,
        phoenixHome,
        libType,
        materialVersion,
        allFonts = false,
    } = _.extend({suiteDir: suite}, defaultOptions, options)
    const libExt = libTypeExtension[libType]
    if (!libExt) {
        throw new Error(
            'Invalid libType option.  Needs to be material (default) or bootstrap3, bootstrap4.'
        )
    }
    if (libType === 'bootstrap' || libType === 'bootstrap3' || libType === 'bootstrap4') {
        return `https://${phoenixHome}/assets/cached/${suiteDir}/styles/${libExt}.css`
    }
    if (libType === 'element') {
        if (allFonts) {
            return 'https://fonts.googleapis.com/css?family=Roboto:300,400,400i,500,700|Roboto+Mono:400,500|Material+Icons|Material+Icons+Outlined|Material+Icons+Round|Material+Icons+Sharp|Material+Icons+Two+Tone'
        } else {
            return 'https://fonts.googleapis.com/css?family=Roboto:300,400,400i,500,700|Roboto+Mono:400,500|Material+Icons'
        }
    }
    if (!materialVersion) {
        throw new Error(
            'When using material styles, need to provide a version number (ex. 0.40.1) in the materialVersion option.'
        )
    }
    if (!semver.valid(materialVersion)) {
        throw new Error(`Invalid materialVersion option given: ${materialVersion}`)
    }
    return `https://${phoenixHome}/assets/cached/${suiteDir}/styles/${libExt}${materialVersion}.css`
}
