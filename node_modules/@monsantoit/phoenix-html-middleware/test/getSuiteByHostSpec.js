const {expect} = require('chai')

const proxyquire = require('proxyquire').noCallThru()

describe('getSuiteByHost', () => {
    let queryProps
    let getSuiteByHost
    const getSuiteForHost = () => 'devtools'
    const getClient = () => ({
        send: (send) => {
            queryProps = send
            return {text: '{"data": {"suite": "foo"}}'}
        },
    })
    beforeEach(() => {
        getSuiteByHost = proxyquire('../src/getSuiteByHost', {
            './createNavigationClient': getClient,
            './getSuiteForHost': getSuiteForHost,
        })
    })
    it('returns the defaultSuite when the host is localhost', async () => {
        const defaultSuite = 'testSuite'
        const returnedSuite = await getSuiteByHost('', 'localhost', '', defaultSuite)
        returnedSuite.should.eql('testSuite')
    })
    it('Warns the user when no bearer token is passed', () => {
        sinon.stub(console, 'warn')
        getSuiteByHost(null, 'testHost', '', '')
        expect(console.warn.calledWith('You need to use local ocelot'))
    })
    it('getSuiteById is called with the correct parameters', async () => {
        await getSuiteByHost('testBearerToken', 'test', {}, 'devtools')
        const result = queryProps.query
        result.should.eql(
            `{suite: getSuite(suiteId: "devtools") {\n    id\n    title\n    faviconUrl\n    navbarStylesUrl\n}}`
        )
    })
})
