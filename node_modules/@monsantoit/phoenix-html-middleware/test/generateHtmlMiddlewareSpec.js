const proxyquire = require('proxyquire').noCallThru()
const getSuiteForHost = require('../src/getSuiteForHost')

describe('generateHtmlMiddleware', () => {
    let {req, res, generateHtmlMiddleware, generateHtml} = {}
    const appBaseUrl = '/myapp'
    const title = 'mytitle'
    const getSuiteByHost = (bearerToken, host, additionalHostMap, defaultSuite) => {
        const suiteId = getSuiteForHost(host, additionalHostMap, defaultSuite)
        const suite = {
            id: suiteId,
            title: suiteId,
            navbarStylesUrl: 'navbarStyles',
            faviconUrl: 'favicon',
        }
        return suite
    }
    const getBearerToken = () => 'foo'

    const setHost = (host) => {
        req.headers['x-forwarded-host'] = host
    }

    beforeEach(() => {
        req = {
            headers: {
                'x-forwarded-host': 'devtools.monsanto.net',
            },
        }
        res = {
            send: sinon.stub(),
        }
        generateHtml = sinon.stub().returns('html')
        generateHtmlMiddleware = proxyquire('../src/generateHtmlMiddleware', {
            './generateHtml': generateHtml,
            './getSuiteByHost': getSuiteByHost,
            './getBearerToken': getBearerToken,
        })
    })

    it('using defaults', async () => {
        setHost('devtools.monsanto.net')
        const middleware = generateHtmlMiddleware(appBaseUrl, title)
        await middleware(req, res)
        generateHtml.firstCall.args.should.eql([
            appBaseUrl,
            title,
            {
                id: 'devtools',
                title: 'devtools',
                faviconUrl: 'favicon',
                navbarStylesUrl: 'navbarStyles',
            },
            {},
        ])
        res.send.firstCall.args[0].should.equal('html')
    })

    it('using i18n and headscript', async () => {
        setHost('velocity-np.ag')
        const i18n = {locale: 'en', messages: {m: 'hi'}}
        req.locale = i18n.locale
        req.messages = i18n.messages
        const headScript = 'window.stuff = stuff'
        const middleware = generateHtmlMiddleware(appBaseUrl, title, [], {
            i18n: true,
            headScript,
        })
        await middleware(req, res)
        generateHtml.firstCall.args.should.eql([
            appBaseUrl,
            title,
            {
                id: 'velocity',
                title: 'velocity',
                faviconUrl: 'favicon',
                navbarStylesUrl: 'navbarStyles',
            },
            {i18n, headScript},
        ])
        res.send.firstCall.args[0].should.equal('html')
    })

    it('using additional host map', async () => {
        setHost('stuff.monsanto.net')
        const additionalHostMap = {bob: ['stuff.monsanto.net']}
        const middleware = generateHtmlMiddleware(appBaseUrl, title, [], {additionalHostMap})
        await middleware(req, res)
        generateHtml.firstCall.args.should.eql([
            appBaseUrl,
            title,
            {id: 'bob', title: 'bob', faviconUrl: 'favicon', navbarStylesUrl: 'navbarStyles'},
            {additionalHostMap},
        ])
        res.send.firstCall.args[0].should.equal('html')
    })

    it('using default suite', async () => {
        setHost('stuff.monsanto.net')
        const middleware = generateHtmlMiddleware(appBaseUrl, title, [], {defaultSuite: 'peadmin'})
        await middleware(req, res)
        generateHtml.firstCall.args.should.eql([
            appBaseUrl,
            title,
            {
                id: 'peadmin',
                title: 'peadmin',
                faviconUrl: 'favicon',
                navbarStylesUrl: 'navbarStyles',
            },
            {defaultSuite: 'peadmin'},
        ])
        res.send.firstCall.args[0].should.equal('html')
    })

    describe('fails', () => {
        it('missing app base url', () => {
            try {
                generateHtmlMiddleware(null, title)
                should.fail()
            } catch (err) {
                err.message.should.include('generateHtmlMiddleware: Did not provide an appBaseUrl!')
            }
        })

        it('missing title', () => {
            try {
                generateHtmlMiddleware(appBaseUrl, null)
                should.fail()
            } catch (err) {
                err.message.should.include('generateHtmlMiddleware: Did not provide a title!')
            }
        })
    })
})
