const getSuiteStylesheetUrl = require('../src/getSuiteStylesheetUrl')

describe('getSuiteStylesheetUrl', () => {
    it('using default options, but no material version given', () => {
        getSuiteStylesheetUrl('velocity', {materialVersion: '0.40.1'}).should.equal(
            'https://phoenix-tools.io/assets/cached/velocity/styles/mat0.40.1.css'
        )
        getSuiteStylesheetUrl('devtools', {materialVersion: '0.40.1'}).should.equal(
            'https://phoenix-tools.io/assets/cached/devtools/styles/mat0.40.1.css'
        )
    })

    it('using libType option', () => {
        getSuiteStylesheetUrl('velocity', {
            libType: 'bootstrap',
            materialVersion: '0.40.1',
        }).should.equal('https://phoenix-tools.io/assets/cached/velocity/styles/bs3.css')
        getSuiteStylesheetUrl('velocity', {
            libType: 'material',
            materialVersion: '0.40.1',
        }).should.equal('https://phoenix-tools.io/assets/cached/velocity/styles/mat0.40.1.css')
    })

    it('using phoenix home option', () => {
        getSuiteStylesheetUrl('velocity', {
            phoenixHome: 'devtools.monsanto.net',
            materialVersion: '0.40.1',
        }).should.equal('https://devtools.monsanto.net/assets/cached/velocity/styles/mat0.40.1.css')
    })

    it('using alternative suite dir', () => {
        getSuiteStylesheetUrl('devtools', {
            suiteDir: 'dev-tools',
            materialVersion: '0.40.1',
        }).should.equal('https://phoenix-tools.io/assets/cached/dev-tools/styles/mat0.40.1.css')
    })

    describe('fails', () => {
        it('when missing suite parameter', () => {
            try {
                getSuiteStylesheetUrl()
                should.fail()
            } catch (err) {
                err.message.should.include('Must provide a suite name')
            }
        })

        it('when using invalid libType option', () => {
            try {
                getSuiteStylesheetUrl('velocity', {libType: 'bob'})
                should.fail()
            } catch (err) {
                err.message.should.include(
                    'Invalid libType option.  Needs to be material (default) or bootstrap3, bootstrap4.'
                )
            }
        })

        it('using material but no material version given', () => {
            try {
                getSuiteStylesheetUrl('velocity')
                should.fail()
            } catch (err) {
                err.message.should.include(
                    'When using material styles, need to provide a version number (ex. 0.40.1) in the materialVersion option.'
                )
            }
        })

        it('using material but invalid material version given', () => {
            try {
                getSuiteStylesheetUrl('velocity', {materialVersion: 'bob'})
                should.fail()
            } catch (err) {
                err.message.should.include('Invalid materialVersion option given: bob')
            }
        })
    })
})
