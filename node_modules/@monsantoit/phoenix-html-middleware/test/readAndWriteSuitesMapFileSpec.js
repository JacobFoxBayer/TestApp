const {readSuitesMapFile} = require('../src/suitesMapFile/readAndWriteSuitesMapFile')

/**
 * TEST has to be updated every single time SUITE data from DB will be changed (alongside with suiteMpa.json file)
 * This will help maintain the proper suite mapping to obtain styles for each domain
 */

describe('readSuitesMapFile', () => {
    it('reads suitesMap json file', async () => {
        const suiteMapFile = JSON.stringify(await readSuitesMapFile())
        suiteMapFile.should.equal(
            JSON.stringify({
                'velocity-external': ['external.velocity.ag', 'external.velocity-np.ag'],
                'pe-admin': ['peadmin.monsanto.net', 'peadmin-np.monsanto.net'],
                'science-at-scale': ['home.science-at-scale.io'],
                'brand-portal-support': ['bps.monsanto.net', 'bps-np.monsanto.net'],
                velocity: ['velocity.ag', 'velocity-np.ag'],
                'velocity-beta': ['beta.velocity.ag', 'beta.velocity-np.ag'],
                aurora: ['aurora.monsanto.net', 'aurora-np.monsanto.net'],
                cloverfield: ['cloverfield.bayer.com', 'cloverfield-np.bayer.com'],
                'digital-field-systems': ['breeding.ag', 'breeding-np.ag'],
                olive: ['olive.bayer.com', 'olive-np.bayer.com'],
                'aurora-tools': ['aurora.bayer.com', 'aurora-np.bayer.com'],
                mybayerplus: ['internal.mybayerplus.com', 'internal-np.mybayerplus.com'],
                'crop-science-data-crossing': [
                    'csdatacrossing.bayer.com',
                    'csdatacrossing-np.bayer.com',
                ],
                'testing-suite-jb': [
                    'devtools.bayer.com/test-suite',
                    'devtools-np.bayer.com/test-suite',
                ],
                'dev-tools': ['devtools.bayer.com', 'devtools-np.bayer.com'],
                devtools: ['devtools.bayer.com', 'devtools-np.bayer.com'],
                peadmin: ['peadmin.monsanto.net', 'peadmin-np.monsanto.net'],
            })
        )
    })
})
