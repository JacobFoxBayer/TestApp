import React from 'react';


export interface IconButtonProps {
    /**
    * Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally.
    *
    * Defaults to **false**.
    */
    active?: boolean;
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of an element serving as a label for this IconButton instance. Used by assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * The custom icon button notification badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: React.ReactNode;
    /**
    * The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room.
    *
    * Defaults to **'right-start'**.
    */
    badgePlacement?: string;
    /**
    * The content when when using the IconButton normally. Expects an `Icon` component. For toggle button functionality, use `toggleOn` and `toggleOff` instead.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Enables a smaller IconButton.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Disables the icon button.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * For simple use-cases, this will automatically create the icon object. Does not work with `toggle='true'`
    *
    * Defaults to **null**.
    */
    icon?: string | React.ReactNode;
    /**
    * One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium.
    *
    * Defaults to **'medium'**.
    */
    iconSize?: string;
    /**
    * The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons)
    *
    * Defaults to **'filled'**.
    */
    iconType?: string;
    /**
    * TabIndex of the button.
    *
    * Defaults to **0**.
    */
    tabIndex?: number;
    /**
    * The content to be rendered when the `IconButton` is toggled off. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOff?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabelledBy?: string;
    /**
    * The content to be rendered when the `IconButton` is toggled on. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOn?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabelledBy?: string;
    /**
    * Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
    *
    * Defaults to **empty string**.
    */
    variant?: string;
    /**
    * Fired when the user clicks the IconButton, will return toggle state, if applicable.
    */
    onClick?: Function;
}

/**
* The icon button wraps the icon and provides button style interactions. Used when a user needs to interact with an icon.
 * @prop {boolean} active - Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally. Defaults to _false_.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of an element serving as a label for this IconButton instance. Used by assistive technologies. Defaults to _null_.
 * @prop {React.ReactNode} badge - The custom icon button notification badge to be rendered. Defaults to _undefined_.
 * @prop {string} badgePlacement - The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room. Defaults to _'right-start'_.
 * @prop {React.ReactNode} children - The content when when using the IconButton normally. Expects an `Icon` component. For toggle button functionality, use `toggleOn` and `toggleOff` instead. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - Enables a smaller IconButton. Defaults to _false_.
 * @prop {boolean} disabled - Disables the icon button. Defaults to _false_.
 * @prop {string|React.ReactNode} icon - For simple use-cases, this will automatically create the icon object. Does not work with `toggle='true'` Defaults to _null_.
 * @prop {string} iconSize - One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium. Defaults to _'medium'_.
 * @prop {string} iconType - The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons) Defaults to _'filled'_.
 * @prop {number} tabIndex - TabIndex of the button. Defaults to _0_.
 * @prop {React.ReactNode} toggleOff - The content to be rendered when the `IconButton` is toggled off. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOffAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOffAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {React.ReactNode} toggleOn - The content to be rendered when the `IconButton` is toggled on. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOnAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOnAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {string} variant - Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme. Defaults to _empty string_.
 *  @event onClick - Fired when the user clicks the IconButton, will return toggle state, if applicable.
*/
export const IconButton: React.FunctionComponent<IconButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
