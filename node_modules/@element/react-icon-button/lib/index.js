'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var iconButton = require('@material/icon-button');
var reactIcon = require('@element/react-icon');
var clsx = require('clsx');
var React = require('react');
var ripple = require('@material/ripple');
var reactCommon = require('@element/react-common');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var React__default = /*#__PURE__*/_interopDefault(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const IconButtonPropTypes = {
  /**
   * Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally.
   *
   * Defaults to **false**.
   */
  active: PropTypes__default["default"].bool,
  /**
   * Accessibility label for assistive technologies.
   *
   * Defaults to **null**.
   */
  ariaLabel: PropTypes__default["default"].string,
  /**
   * Id of an element serving as a label for this IconButton instance. Used by assistive technologies.
   *
   * Defaults to **null**.
   */
  ariaLabelledBy: PropTypes__default["default"].string,
  /**
   * The custom icon button notification badge to be rendered.
   *
   * Defaults to **undefined**.
   */
  badge: PropTypes__default["default"].node,
  /**
   * The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room.
   *
   * Defaults to **'right-start'**.
   */
  badgePlacement: PropTypes__default["default"].oneOf(["right-start", "left-start"]),
  /**
   * The content when when using the IconButton normally. Expects an `Icon` component. For toggle button functionality, use `toggleOn` and `toggleOff` instead.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Enables a smaller IconButton.
   *
   * Defaults to **false**.
   */
  dense: PropTypes__default["default"].bool,
  /**
   * Disables the icon button.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * For simple use-cases, this will automatically create the icon object. Does not work with `toggle='true'`
   *
   * Defaults to **null**.
   */
  icon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].node]),
  /**
   * One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium.
   *
   * Defaults to **'medium'**.
   */
  iconSize: PropTypes__default["default"].oneOf(["xsmall", "small", "medium", "large", "xlarge"]),
  /**
   * The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons)
   *
   * Defaults to **'filled'**.
   */
  iconType: PropTypes__default["default"].oneOf(["filled", "outlined", "rounded", "two-tone", "sharp"]),
  /**
   * Fired when the user clicks the IconButton, will return toggle state, if applicable.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes__default["default"].func,
  /**
   * TabIndex of the button.
   *
   * Defaults to **0**.
   */
  tabIndex: PropTypes__default["default"].number,
  /**
   * The content to be rendered when the `IconButton` is toggled off. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
   *
   * Defaults to **null**.
   */
  toggleOff: PropTypes__default["default"].node,
  /**
   * The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead.
   *
   * Defaults to **null**.
   */
  toggleOffAriaLabel: PropTypes__default["default"].string,
  /**
   * The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`.
   *
   * Defaults to **null**.
   */
  toggleOffAriaLabelledBy: PropTypes__default["default"].string,
  /**
   * The content to be rendered when the `IconButton` is toggled on. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
   *
   * Defaults to **null**.
   */
  toggleOn: PropTypes__default["default"].node,
  /**
   * The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead.
   *
   * Defaults to **null**.
   */
  toggleOnAriaLabel: PropTypes__default["default"].string,
  /**
   * The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`.
   *
   * Defaults to **null**.
   */
  toggleOnAriaLabelledBy: PropTypes__default["default"].string,
  /**
   * Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
   *
   * Defaults to **empty string**.
   */
  variant: reactCommon.deprecatedOneOf(PropTypes__default["default"].oneOf(["", "filled-danger-alt", "filled-danger", "filled-primary", "filled-secondary", "color-primary", "color-secondary", "color-on-dark"]), ["primary-alt", "secondary-alt", "primary", "danger-alt", "danger"], "IconButton", "Please use one of '','filled-danger-alt','filled-danger','filled-primary','filled-secondary','color-primary','color-secondary','color-on-dark'.")
};
const IconButtonDefaultProps = {
  active: false,
  ariaLabel: null,
  ariaLabelledBy: null,
  badge: undefined,
  badgePlacement: "right-start",
  children: null,
  className: undefined,
  dense: false,
  disabled: false,
  icon: null,
  iconSize: "medium",
  iconType: "filled",
  tabIndex: 0,
  toggleOff: null,
  toggleOffAriaLabel: null,
  toggleOffAriaLabelledBy: null,
  toggleOn: null,
  toggleOnAriaLabel: null,
  toggleOnAriaLabelledBy: null,
  variant: ""
};

const IconButton = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    active,
    ariaLabel,
    ariaLabelledBy,
    badge,
    badgePlacement,
    children,
    className,
    dense,
    disabled,
    icon,
    iconSize,
    iconType,
    onClick,
    tabIndex,
    toggleOff,
    toggleOffAriaLabel,
    toggleOffAriaLabelledBy,
    toggleOn,
    toggleOnAriaLabel,
    toggleOnAriaLabelledBy,
    variant,
    ...customProps
  } = props;
  const ref = React.useRef();
  const mdcIconButtonRipple = React.useRef();
  const mdcIconButtonToggle = React.useRef();
  const isToggleButton = toggleOn && toggleOff;
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const classes = clsx__default["default"]('lmnt', 'lmnt-icon-button', 'mdc-icon-button', dense && 'lmnt-icon-button--dense', (variant === 'primary' || variant === 'primary-alt' || variant === 'secondary' || variant === 'danger' || variant === 'danger-alt' || variant === 'filled-primary' || variant === 'filled-primary-alt' || variant === 'filled-secondary' || variant === 'filled-danger' || variant === 'filled-danger-alt') && 'lmnt-icon-button--fill', (variant === 'danger-alt' || variant === 'filled-danger-alt') && 'lmnt-icon-button--fill-danger-alt', (variant === 'danger' || variant === 'filled-danger') && 'lmnt-icon-button--fill-danger', (variant === 'primary' || variant === 'filled-primary') && 'lmnt-icon-button--fill-primary', (variant === 'primary-alt' || variant === 'filled-secondary') && 'lmnt-icon-button--fill-secondary', (variant === 'secondary-alt' || variant === 'color-on-dark') && 'lmnt-icon-button--color-on-dark', variant === 'color-primary' && 'lmnt-icon-button--color-primary', variant === 'color-secondary' && 'lmnt-icon-button--color-secondary', className);
  React.useEffect(() => {
    if (isToggleButton) {
      mdcIconButtonToggle.current = iconButton.MDCIconButtonToggle.attachTo(ref.current);
    } else {
      mdcIconButtonRipple.current = ripple.MDCRipple.attachTo(ref.current);
      mdcIconButtonRipple.current.unbounded = true;
    }
    return () => {
      if (isToggleButton) {
        mdcIconButtonToggle.current.destroy();
      } else {
        mdcIconButtonRipple.current.destroy();
      }
    };
  }, [mdcIconButtonToggle, isToggleButton, mdcIconButtonRipple]);
  React.useEffect(() => {
    if (isToggleButton) {
      mdcIconButtonToggle.current.on = active;
    }
  }, [active, isToggleButton, mdcIconButtonToggle]);
  const handleClick = event => {
    onClick && onClick(isToggleButton ? mdcIconButtonToggle.current.on : event);
  };
  return /*#__PURE__*/React__default["default"].createElement("button", _extends__default["default"]({
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "data-aria-label-on": toggleOnAriaLabel || toggleOnAriaLabelledBy || ariaLabel,
    "data-aria-label-off": toggleOffAriaLabel || toggleOffAriaLabelledBy || ariaLabel,
    onClick: handleClick,
    ref: ref,
    className: classes,
    disabled: disabled,
    tabIndex: tabIndex
  }, customProps), icon && /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
    badge: badge,
    badgePlacement: badgePlacement,
    icon: icon,
    iconSize: iconSize,
    iconType: iconType
  }), children && reactCommon.addProps(children, child => {
    var _child$props, _child$props2;
    return {
      className: clsx__default["default"]('mdc-icon-button__icon', child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.className),
      'aria-hidden': (child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2['aria-hidden']) || ariaLabel || ariaLabelledBy
    };
  }), isToggleButton && reactCommon.addProps(toggleOn, child => {
    var _child$props3, _child$props4, _child$props5;
    return {
      className: clsx__default["default"]('mdc-icon-button__icon mdc-icon-button__icon--on', child === null || child === void 0 ? void 0 : (_child$props3 = child.props) === null || _child$props3 === void 0 ? void 0 : _child$props3.className),
      'aria-label': (child === null || child === void 0 ? void 0 : (_child$props4 = child.props) === null || _child$props4 === void 0 ? void 0 : _child$props4['aria-label']) || toggleOnAriaLabel || toggleOnAriaLabelledBy || ariaLabel,
      'aria-hidden': (child === null || child === void 0 ? void 0 : (_child$props5 = child.props) === null || _child$props5 === void 0 ? void 0 : _child$props5['aria-hidden']) || toggleOnAriaLabel || toggleOnAriaLabelledBy || ariaLabel
    };
  }), isToggleButton && reactCommon.addProps(toggleOff, child => {
    var _child$props6, _child$props7, _child$props8;
    return {
      className: clsx__default["default"]('mdc-icon-button__icon', child === null || child === void 0 ? void 0 : (_child$props6 = child.props) === null || _child$props6 === void 0 ? void 0 : _child$props6.className),
      'aria-label': (child === null || child === void 0 ? void 0 : (_child$props7 = child.props) === null || _child$props7 === void 0 ? void 0 : _child$props7['aria-label']) || toggleOffAriaLabel || toggleOffAriaLabelledBy || ariaLabel,
      'aria-hidden': (child === null || child === void 0 ? void 0 : (_child$props8 = child.props) === null || _child$props8 === void 0 ? void 0 : _child$props8['aria-hidden']) || toggleOffAriaLabel || toggleOffAriaLabelledBy || ariaLabel
    };
  }));
});
IconButton.displayName = 'IconButton';
IconButton.propTypes = IconButtonPropTypes;
IconButton.defaultProps = IconButtonDefaultProps;

exports.IconButton = IconButton;
//# sourceMappingURL=index.js.map
