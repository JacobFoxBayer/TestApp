'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var FocusTrap = require('focus-trap-react');
var clsx = require('clsx');
var React = require('react');
var reactCommon = require('@element/react-common');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var FocusTrap__default = /*#__PURE__*/_interopDefault(FocusTrap);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var React__default = /*#__PURE__*/_interopDefault(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const SideSheetPropTypes = {
  /**
   * Set to false to stop Side Sheet from closing when scrim is clicked when the variant is modal.
   *
   * Defaults to **true**.
   */
  allowOutsideClick: PropTypes__default["default"].bool,
  /**
   * Add classes to body for when side-sheet-container is not present in DOM.
   *
   * Defaults to **true**.
   */
  attachContainerClassesToBody: PropTypes__default["default"].bool,
  /**
   * Primary content. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The text to be displayed along side the dismiss button in SideSheet.
   *
   * Defaults to **null**.
   */
  headlineText: PropTypes__default["default"].string,
  /**
   * A provided function to fire when Side Sheet becomes hidden.
   *
   * Defaults to **null**.
   */
  onClose: PropTypes__default["default"].func,
  /**
   * A provided function to fire when Side Sheet becomes visible.
   *
   * Defaults to **null**.
   */
  onOpen: PropTypes__default["default"].func,
  /**
   * Make the SideSheet visible using the experience set in variant prop.
   *
   * Defaults to **false**.
   */
  open: PropTypes__default["default"].bool,
  /**
   * Location of the side-sheet anchor point.
   *
   * Defaults to **'right'**.
   */
  position: PropTypes__default["default"].oneOf(["left", "right"]),
  /**
   * DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing.
   *
   * Defaults to **'.lmnt-side-sheet-trigger'**.
   */
  returnFocusSelector: PropTypes__default["default"].string,
  /**
   * The behavior styles available to side sheet: one of modal, floating, elevated, or coplanar.
   *
   * Defaults to **'modal'**.
   */
  variant: PropTypes__default["default"].oneOf(["modal", "elevated", "floating", "coplanar"])
};
const SideSheetDefaultProps = {
  allowOutsideClick: true,
  attachContainerClassesToBody: true,
  children: null,
  className: undefined,
  headlineText: null,
  open: false,
  position: "right",
  returnFocusSelector: ".lmnt-side-sheet-trigger",
  variant: "modal"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

({
  /**
   * Primary content. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * This prop is tied to the state of `SideSheet` and should be managed accordingly.
   *
   * Defaults to **false**.
   */
  isSideSheetVisible: PropTypes__default["default"].bool,
  /**
   * The behavior styles available to side sheet: one of `modal` (with room to grow in the future).
   *
   * Defaults to **null**.
   */
  variant: PropTypes__default["default"].string
});

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

({
  /**
   * Primary content. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The behavior styles available to side sheet: one of `elevated`, or `coplanar`.
   *
   * Defaults to **null**.
   */
  variant: PropTypes__default["default"].string
});

const SideSheet = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    attachContainerClassesToBody,
    children,
    className,
    headlineText,
    onClose,
    onOpen,
    open,
    returnFocusSelector,
    variant,
    allowOutsideClick,
    ...customProps
  } = props;
  const sideSheetRef = React.useRef();
  React.useImperativeHandle(externalRef, () => sideSheetRef.current, []);

  // CSS `min-width` media-query breakpoint for small screens
  const cssMediaQuerySmallScreenSize = 960;

  // CSS transition-duration in ms
  const cssTransitionTimeToClose = 75;

  // used to control style during hiding transition
  const [isHiding, setIsHiding] = React.useState(false);

  // used to check if focus trap should be enabled
  const [shouldFocusTrap, setShouldFocusTrap] = React.useState(false);
  const [isOpen, setIsOpen] = React.useState(() => open);
  const classNames = clsx__default["default"]('lmnt', className, 'lmnt-side-sheet',
  // don't even use this for CSS hooks
  variant === 'modal' && 'lmnt-side-sheet--modal', variant === 'floating' && 'lmnt-side-sheet--floating', variant === 'elevated' && 'lmnt-side-sheet--elevated', variant === 'coplanar' && 'lmnt-side-sheet--coplanar', isHiding ? 'lmnt-side-sheet--is-hiding' : '', open ? 'lmnt-side-sheet--is-visible' : '');
  const scrimClassNames = clsx__default["default"]('lmnt-side-sheet-scrim', variant === 'modal' && 'lmnt-side-sheet-scrim--modal', open ? 'lmnt-side-sheet-scrim--is-visible' : '');
  const addBodyClass = React.useCallback(() => {
    variant === 'modal' && document.body.classList.add('lmnt-side-sheet-container--modal');
    open && document.body.classList.add('lmnt-side-sheet-container--sheet-is-visible');
  }, [open, variant]);
  const removeBodyClass = React.useCallback(() => {
    document.body.classList.remove('lmnt-side-sheet-container--modal');
    document.body.classList.remove('lmnt-side-sheet-container--sheet-is-visible');
  }, []);
  const isScreenSmall = React.useCallback(() => document.body.offsetWidth < cssMediaQuerySmallScreenSize, []);
  const lmntSideSheetDismiss = React.useRef(null);
  const focusSideSheetDismiss = () => {
    lmntSideSheetDismiss.current && lmntSideSheetDismiss.current.focus();
  };
  const isSideSheetModalVariant = React.useCallback(() => variant === 'modal', [variant]);
  const isSmallOrModal = React.useCallback(() => isSideSheetModalVariant() || isScreenSmall(), [isSideSheetModalVariant, isScreenSmall]);

  // only enable focus trap if conditions are met
  const checkFocusTrapConditions = React.useCallback(() => {
    const conditions = open && isSmallOrModal();
    conditions && setShouldFocusTrap(true);
  }, [open, isSmallOrModal, setShouldFocusTrap]);
  const closeSideSheet = React.useCallback(() => {
    setIsOpen(false);
    setShouldFocusTrap(false);
    setIsHiding(true);
    attachContainerClassesToBody && removeBodyClass();
    reactCommon.returnFocusAfterClosing(returnFocusSelector);
    onClose === null || onClose === void 0 ? void 0 : onClose();

    // do not put onClose in the dependency array, it will cause this callback to be recreated every render
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [attachContainerClassesToBody, setShouldFocusTrap, setIsHiding, removeBodyClass, returnFocusSelector]);
  const openSideSheet = () => {
    setIsOpen(true);
    checkFocusTrapConditions();
    attachContainerClassesToBody && addBodyClass();
    focusSideSheetDismiss();
    onOpen === null || onOpen === void 0 ? void 0 : onOpen();
  };
  React.useEffect(() => {
    if (open) openSideSheet();else if (isOpen) closeSideSheet();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [open]);
  React.useEffect(() => {
    isHiding && setTimeout(() => {
      setIsHiding(false);
    }, cssTransitionTimeToClose);
  }, [isHiding]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement(FocusTrap__default["default"], {
    active: shouldFocusTrap,
    focusTrapOptions: {
      allowOutsideClick: true,
      clickOutsideDeactivates: false,
      returnFocusOnDeactivate: false
    }
  }, /*#__PURE__*/React__default["default"].createElement("aside", _extends__default["default"]({
    "aria-hidden": !open,
    "aria-labelledby": "lmnt-side-sheet__headline",
    "aria-modal": "true",
    className: classNames,
    role: "dialog"
  }, customProps), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "lmnt-side-sheet__content"
  }, /*#__PURE__*/React__default["default"].createElement("header", {
    className: "lmnt-side-sheet__header"
  }, /*#__PURE__*/React__default["default"].createElement("button", {
    "aria-label": "Dismiss"
    // TODO refactor so this is not necessary
    // eslint-disable-next-line jsx-a11y/no-autofocus
    ,
    autoFocus: true,
    className: "mdc-icon-button mdc-button--text lmnt-side-sheet__dismiss",
    onClick: closeSideSheet,
    ref: lmntSideSheetDismiss,
    type: "button"
  }, /*#__PURE__*/React__default["default"].createElement("i", {
    className: "material-icons",
    "aria-hidden": "true"
  }, "close")), headlineText && /*#__PURE__*/React__default["default"].createElement("span", {
    className: "lmnt-side-sheet__headline mdc-typography--headline6",
    id: "lmnt-side-sheet__headline"
  }, headlineText)), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "lmnt-side-sheet__body"
  }, children)))), /*#__PURE__*/React__default["default"].createElement("div", {
    className: scrimClassNames,
    onMouseDown: allowOutsideClick && closeSideSheet,
    "aria-hidden": "true"
  }));
});
SideSheet.displayName = 'SideSheet';
SideSheet.propTypes = SideSheetPropTypes;
SideSheet.defaultProps = SideSheetDefaultProps;

const SideSheetContainer = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    isSideSheetVisible,
    variant,
    ...customProps
  } = props;
  const classNames = clsx__default["default"]('lmnt', className, 'lmnt-side-sheet-container',
  // don't even use this for CSS hooks
  variant === 'modal' && 'lmnt-side-sheet-container--modal', isSideSheetVisible && 'lmnt-side-sheet-container--sheet-is-visible');
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: externalRef,
    className: classNames
  }, customProps), children);
});
SideSheetContainer.displayName = 'SideSheetContainer';
SideSheetContainer.propTypes = {
  children: PropTypes__default["default"].node,
  className: PropTypes__default["default"].string,
  isSideSheetVisible: PropTypes__default["default"].bool,
  variant: PropTypes__default["default"].oneOf(['modal'])
};
SideSheetContainer.defaultProps = {
  children: null,
  className: null,
  isSideSheetVisible: false,
  variant: null
};

const SideSheetWrapper = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    variant,
    ...customProps
  } = props;
  const classNames = clsx__default["default"]('lmnt', className, 'lmnt-side-sheet-wrapper',
  // don't even use this for CSS hooks
  variant === 'elevated' && 'lmnt-side-sheet-wrapper--elevated', variant === 'coplanar' && 'lmnt-side-sheet-wrapper--coplanar');
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: externalRef,
    className: classNames
  }, customProps), children);
});
SideSheetWrapper.displayName = 'SideSheetWrapper';
SideSheetWrapper.propTypes = {
  children: PropTypes__default["default"].node,
  className: PropTypes__default["default"].string,
  variant: PropTypes__default["default"].oneOf(['coplanar', 'elevated'])
};
SideSheetWrapper.defaultProps = {
  children: null,
  className: null,
  variant: null
};

exports.SideSheet = SideSheet;
exports.SideSheetContainer = SideSheetContainer;
exports.SideSheetWrapper = SideSheetWrapper;
//# sourceMappingURL=index.js.map
