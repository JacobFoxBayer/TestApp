import React from 'react';


export interface TableProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Enable the user to toggle sortable columns between ascending, descending, and unsorted.
    *
    * Defaults to **false**.
    */
    canUnSort?: boolean;
    /**
    * Pass custom props directly to each TableCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(cellData)`.
    *
    * Defaults to **undefined**.
    */
    cellProps?: object | Function;
    /**
    * The composed table elements. Expects one each of TableHeader, TableBody.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Allow columns to be re-ordered using drag and drop headers. Note, this cannot be used with fixed columns.
    *
    * Defaults to **false**.
    */
    columnReordering?: boolean;
    /**
    * Apply a striped effect to columns.
    *
    * Defaults to **false**.
    */
    columnStriped?: boolean;
    /**
    * Array of objects describing the table columns, used in conjunction with `data` prop. **See README for the full column schema.**  **Note:** do not use `children` when using `data` and `columns`.
    *
    * Defaults to **[]**.
    */
    columns?: Array<object>;
    /**
    * Custom properties to be applied to the table container.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * Array of data. Must be used in conjunction with `columns`. **Note:** do not use `children` when using `data` and `columns`.
    *
    * Defaults to **null**.
    */
    data?: Array<object>;
    /**
    * An object to describe the the default column properties if none else are specified via data.
    *
    * Defaults to **null**.
    */
    defaultColumn?: object;
    /**
    * A more compact table with less padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Disable multi-column sorting.
    *
    * Defaults to **false**.
    */
    disableMultiSort?: boolean;
    /**
    * Indicates if the table supports expandable rows. See 'Expandable Rows' in the README for details.
    *
    * Defaults to **undefined**.
    */
    expandable?: boolean;
    /**
    * Used to render secondary content when used with `expandable`. Note: this is only shown when a row is expanded using a button using `row.getToggleRowExpandedProps()` or `row.getToggleAllRowsExpandedProps()`. See 'Expandable Rows' in the README for details.
    *
    * Defaults to **undefined**.
    */
    expandedRowTemplate?: Function;
    /**
    * On by default, setting this to false will remove the additional trailing border added to fixed columns. This should only be used where there is an alternate means of showing which columns are fixed, ie. background color or elevation.
    *
    * Defaults to **true**.
    */
    fixedColumnsBorder?: boolean;
    /**
    * The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Warning, `fixedHeader` requires a layout of `standard`.
    *
    * Defaults to **false**.
    */
    fixedHeader?: boolean;
    /**
    * Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    footerContent?: React.ReactNode;
    /**
    * The table will expand it's width to 100% of it's parent container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Pass custom props directly to each TableHeaderCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(column)`.
    *
    * Defaults to **undefined**.
    */
    headerCellProps?: object | Function;
    /**
    * Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    headerContent?: React.ReactNode;
    /**
    * The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table.
    *
    * Defaults to **false**.
    */
    headerDividerTall?: boolean;
    /**
    * Add a splash of color to the divider between the header and rows.
    *
    * Defaults to **null**.
    */
    headerDividerThemeColor?: string;
    /**
    * Pass custom props directly to each TableHeaderRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`.
    *
    * Defaults to **undefined**.
    */
    headerRowProps?: object | Function;
    /**
    * Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly.
    *
    * Defaults to **null**.
    */
    headerThemeColor?: string;
    /**
    * Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`. Note, must be a unit-less number (in pixels).
    *
    * Defaults to **null**.
    */
    height?: number;
    /**
    * An array of id's for columns to hide.
    *
    * Defaults to **undefined**.
    */
    hiddenColumns?: Array<string>;
    /**
    * Hides the horizontal scrollbar. Note: only use when alternative scrolling is offered.
    *
    * Defaults to **false**.
    */
    hideHorizontalScrollbar?: boolean;
    /**
    * All expandable/collapsible rows will be expanded when used with `expandable`.
    *
    * Defaults to **undefined**.
    */
    initiallyExpanded?: boolean;
    /**
    * The style of layout to use. Notes: In most cases the column width will default to 150px, with the exception of `standard`, which uses browser default table layout. Using `resizableColumns` or `columnReordering` will force layout to `block`. Using `virtualized` will use it's own layout technique. Fixed headers requires the `standard` layout. Warning: the default value will change to `standard` in v6.
    *
    * Defaults to **'block'**.
    */
    layout?: string;
    /**
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table.
    *
    * Defaults to **false**.
    */
    nested?: boolean;
    /**
    * Show the table header with the `noContentMessage` when there is no table content or data.
    *
    * Defaults to **false**.
    */
    noContentIncludeTable?: boolean;
    /**
    * The message to show when there is no table content or data.
    *
    * Defaults to **'There is no content available.'**.
    */
    noContentMessage?: string | Function | React.ReactNode;
    /**
    * Prevents hover highlighting effect on rows.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * Enable built-in pagination.
    *
    * Defaults to **false**.
    */
    paginated?: boolean;
    /**
    * Customize table behavior.
    *
    * Defaults to **null**.
    */
    plugins?: Array<object>;
    /**
    * Enable columns to be resized by the user.
    *
    * Defaults to **null**.
    */
    resizableColumns?: boolean;
    /**
    * When using `variableHeight` rowHeight must be specified as a function, otherwise the default row height of `50` should be used except in cases of custom CSS. The function will receive the rowIndex as a parameter.
    *
    * Defaults to **50**.
    */
    rowHeight?: number | Function;
    /**
    * Pass custom props directly to each TableRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`..
    *
    * Defaults to **undefined**.
    */
    rowProps?: object | Function;
    /**
    * Apply a stripped effect to the rows.
    *
    * Defaults to **null**.
    */
    rowStriped?: boolean;
    /**
    * Enable the sort indicator to be hidden until the header cell is hovered/activated.
    *
    * Defaults to **false**.
    */
    sortIndicatorOnHover?: boolean;
    /**
    * Enable built-in column sorting.
    *
    * Defaults to **false**.
    */
    sortable?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * @deprecated _Use `leadingContent` instead._
    *
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    topBar?: React.ReactNode;
    /**
    * Custom content to appear inside the table container directly below the actual table.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Used with virtualized tables with expandable rows that are of varying sizes or a different size than the original row.
    *
    * Defaults to **false**.
    */
    variableHeight?: boolean;
    /**
    * Enable virtualized rendering for high performance with large amounts of data.
    *
    * Defaults to **false**.
    */
    virtualized?: boolean;
    /**
    * Fixed width for the table. Required for a `layout` of `fixed`. Note, must be a unit-less number (in pixels).
    *
    * Defaults to **null**.
    */
    width?: number;
    /**
    * Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onStateChange?: Function;
    /**
    * Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onWidthChange?: Function;
}

/**
* The Table is an efficient way to display data in rows and columns.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {boolean} canUnSort - Enable the user to toggle sortable columns between ascending, descending, and unsorted. Defaults to _false_.
 * @prop {object|function} cellProps - Pass custom props directly to each TableCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(cellData)`. Defaults to _undefined_.
 * @prop {React.ReactNode} children - The composed table elements. Expects one each of TableHeader, TableBody. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} columnReordering - Allow columns to be re-ordered using drag and drop headers. Note, this cannot be used with fixed columns. Defaults to _false_.
 * @prop {boolean} columnStriped - Apply a striped effect to columns. Defaults to _false_.
 * @prop {[object]} columns - Array of objects describing the table columns, used in conjunction with `data` prop. **See README for the full column schema.**  **Note:** do not use `children` when using `data` and `columns`. Defaults to _[]_.
 * @prop {object} containerProps - Custom properties to be applied to the table container. Defaults to _null_.
 * @prop {[object]} data - Array of data. Must be used in conjunction with `columns`. **Note:** do not use `children` when using `data` and `columns`. Defaults to _null_.
 * @prop {object} defaultColumn - An object to describe the the default column properties if none else are specified via data. Defaults to _null_.
 * @prop {boolean} dense - A more compact table with less padding. Defaults to _false_.
 * @prop {boolean} disableMultiSort - Disable multi-column sorting. Defaults to _false_.
 * @prop {boolean} expandable - Indicates if the table supports expandable rows. See 'Expandable Rows' in the README for details. Defaults to _undefined_.
 * @prop {function} expandedRowTemplate - Used to render secondary content when used with `expandable`. Note: this is only shown when a row is expanded using a button using `row.getToggleRowExpandedProps()` or `row.getToggleAllRowsExpandedProps()`. See 'Expandable Rows' in the README for details. Defaults to _undefined_.
 * @prop {boolean} fixedColumnsBorder - On by default, setting this to false will remove the additional trailing border added to fixed columns. This should only be used where there is an alternate means of showing which columns are fixed, ie. background color or elevation. Defaults to _true_.
 * @prop {boolean} fixedHeader - The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Warning, `fixedHeader` requires a layout of `standard`. Defaults to _false_.
 * @prop {React.ReactNode} footerContent - Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} fullWidth - The table will expand it's width to 100% of it's parent container. Defaults to _false_.
 * @prop {object|function} headerCellProps - Pass custom props directly to each TableHeaderCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(column)`. Defaults to _undefined_.
 * @prop {React.ReactNode} headerContent - Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} headerDividerTall - The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table. Defaults to _false_.
 * @prop {string} headerDividerThemeColor - Add a splash of color to the divider between the header and rows. Defaults to _null_.
 * @prop {object|function} headerRowProps - Pass custom props directly to each TableHeaderRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`. Defaults to _undefined_.
 * @prop {string} headerThemeColor - Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly. Defaults to _null_.
 * @prop {number} height - Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`. Note, must be a unit-less number (in pixels). Defaults to _null_.
 * @prop {[string]} hiddenColumns - An array of id's for columns to hide. Defaults to _undefined_.
 * @prop {boolean} hideHorizontalScrollbar - Hides the horizontal scrollbar. Note: only use when alternative scrolling is offered. Defaults to _false_.
 * @prop {boolean} initiallyExpanded - All expandable/collapsible rows will be expanded when used with `expandable`. Defaults to _undefined_.
 * @prop {string} layout - The style of layout to use. Notes: In most cases the column width will default to 150px, with the exception of `standard`, which uses browser default table layout. Using `resizableColumns` or `columnReordering` will force layout to `block`. Using `virtualized` will use it's own layout technique. Fixed headers requires the `standard` layout. Warning: the default value will change to `standard` in v6. Defaults to _'block'_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {boolean} nested - Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table. Defaults to _false_.
 * @prop {boolean} noContentIncludeTable - Show the table header with the `noContentMessage` when there is no table content or data. Defaults to _false_.
 * @prop {string|function|React.ReactNode} noContentMessage - The message to show when there is no table content or data. Defaults to _'There is no content available.'_.
 * @prop {boolean} noHover - Prevents hover highlighting effect on rows. Defaults to _false_.
 * @prop {boolean} paginated - Enable built-in pagination. Defaults to _false_.
 * @prop {[object]} plugins - Customize table behavior. Defaults to _null_.
 * @prop {boolean} resizableColumns - Enable columns to be resized by the user. Defaults to _null_.
 * @prop {number|function} rowHeight - When using `variableHeight` rowHeight must be specified as a function, otherwise the default row height of `50` should be used except in cases of custom CSS. The function will receive the rowIndex as a parameter. Defaults to _50_.
 * @prop {object|function} rowProps - Pass custom props directly to each TableRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`.. Defaults to _undefined_.
 * @prop {boolean} rowStriped - Apply a stripped effect to the rows. Defaults to _null_.
 * @prop {boolean} sortIndicatorOnHover - Enable the sort indicator to be hidden until the header cell is hovered/activated. Defaults to _false_.
 * @prop {boolean} sortable - Enable built-in column sorting. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {React.ReactNode} topBar - Deprecated: Use `leadingContent` instead. Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear inside the table container directly below the actual table. Defaults to _null_.
 * @prop {boolean} variableHeight - Used with virtualized tables with expandable rows that are of varying sizes or a different size than the original row. Defaults to _false_.
 * @prop {boolean} virtualized - Enable virtualized rendering for high performance with large amounts of data. Defaults to _false_.
 * @prop {number} width - Fixed width for the table. Required for a `layout` of `fixed`. Note, must be a unit-less number (in pixels). Defaults to _null_.
 *  @event onStateChange - Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
 *  @event onWidthChange - Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
*/
export const Table: React.FunctionComponent<TableProps | Omit<React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>, 'data'>>;


export interface TableBaseProps {
    /**
    * Used by assistive technology, such as screen readers, to name the table for accessibility
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * The composed table elements. Expects one each of TableHeader, TableBody.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **null**.
    */
    className?: string;
    /**
    * Apply a striped effect to columns.
    *
    * Defaults to **false**.
    */
    columnStriped?: boolean;
    /**
    * Custom properties to be applied to the table container.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * A more compact table with less padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`.
    *
    * Defaults to **false**.
    */
    fixedHeader?: boolean;
    /**
    * The table will expand it's width to 100% of it's parent container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table.
    *
    * Defaults to **false**.
    */
    headerDividerTall?: boolean;
    /**
    * Add a splash of color to the divider between the header and rows.
    *
    * Defaults to **null**.
    */
    headerDividerThemeColor?: string;
    /**
    * Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly.
    *
    * Defaults to **null**.
    */
    headerThemeColor?: string;
    /**
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table.
    *
    * Defaults to **false**.
    */
    nested?: boolean;
    /**
    * undefined
    *
    * Defaults to **'No Content'**.
    */
    noContentMessage?: string;
    /**
    * Prevents hover highlighting effect on rows.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * Apply a stripped effect to the rows.
    *
    * Defaults to **null**.
    */
    rowStriped?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Custom content to appear inside the table container directly below the actual table.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Enable virtualized rendering of the row.
    *
    * Defaults to **false**.
    */
    virtualized?: boolean;
    /**
    * Fixed width for the table. Required for `layout` of `fixed`.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* The Table is an efficient way to display data in rows and columns.
 * @prop {string} ariaLabel - Used by assistive technology, such as screen readers, to name the table for accessibility Defaults to _null_.
 * @prop {React.ReactNode} children - The composed table elements. Expects one each of TableHeader, TableBody. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _null_.
 * @prop {boolean} columnStriped - Apply a striped effect to columns. Defaults to _false_.
 * @prop {object} containerProps - Custom properties to be applied to the table container. Defaults to _null_.
 * @prop {boolean} dense - A more compact table with less padding. Defaults to _false_.
 * @prop {boolean} fixedHeader - The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Defaults to _false_.
 * @prop {boolean} fullWidth - The table will expand it's width to 100% of it's parent container. Defaults to _false_.
 * @prop {boolean} headerDividerTall - The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table. Defaults to _false_.
 * @prop {string} headerDividerThemeColor - Add a splash of color to the divider between the header and rows. Defaults to _null_.
 * @prop {string} headerThemeColor - Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly. Defaults to _null_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {boolean} nested - Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table. Defaults to _false_.
 * @prop {string} noContentMessage - undefined Defaults to _'No Content'_.
 * @prop {boolean} noHover - Prevents hover highlighting effect on rows. Defaults to _false_.
 * @prop {boolean} rowStriped - Apply a stripped effect to the rows. Defaults to _null_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear inside the table container directly below the actual table. Defaults to _null_.
 * @prop {boolean} virtualized - Enable virtualized rendering of the row. Defaults to _false_.
 * @prop {number} width - Fixed width for the table. Required for `layout` of `fixed`. Defaults to _null_.
*/
export const TableBase: React.FunctionComponent<TableBaseProps & React.HTMLProps<HTMLElement> & React.DOMAttributes<HTMLElement>>;


export interface TableBodyProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fixed width for table body.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* Contains the TableRows.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {number} width - Fixed width for table body. Defaults to _null_.
*/
export const TableBody: React.FunctionComponent<TableBodyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableBuilderProps {
    /**
    * Used by assistive technology, such as screen readers, to name the table for accessibility
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Allow columns to be re-ordered using drag and drop headers.
    *
    * Defaults to **false**.
    */
    columnReordering?: boolean;
    /**
    * Apply a striped effect to columns.
    *
    * Defaults to **false**.
    */
    columnStriped?: boolean;
    /**
    * Array of objects describing the table columns, used in conjunction with `data` prop. Note: do not use children with data and columns, they will control the markup, when used.
    *
    * Defaults to **[]**.
    */
    columns?: Array<object>;
    /**
    * Custom properties to be applied to the table container.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * Array of data Only necessary, used in conjunction with `columns` prop. Note: do not use children with data and columns, they will control the markup, when used.
    *
    * Defaults to **null**.
    */
    data?: Array<object>;
    /**
    * An object to describe the the default column properties if none else are specified via data.
    *
    * Defaults to **null**.
    */
    defaultColumn?: object;
    /**
    * A more compact table with less padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`.
    *
    * Defaults to **false**.
    */
    fixedHeader?: boolean;
    /**
    * Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    footerContent?: React.ReactNode;
    /**
    * The table will expand it's width to 100% of it's parent container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    headerContent?: React.ReactNode;
    /**
    * The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table.
    *
    * Defaults to **false**.
    */
    headerDividerTall?: boolean;
    /**
    * Add a splash of color to the divider between the header and rows.
    *
    * Defaults to **null**.
    */
    headerDividerThemeColor?: string;
    /**
    * Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly.
    *
    * Defaults to **null**.
    */
    headerThemeColor?: string;
    /**
    * Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`.
    *
    * Defaults to **null**.
    */
    height?: number;
    /**
    * The layout approach the table will use.
    *
    * Defaults to **'block'**.
    */
    layout?: string;
    /**
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table.
    *
    * Defaults to **false**.
    */
    nested?: boolean;
    /**
    * undefined
    *
    * Defaults to **'No Content'**.
    */
    noContentMessage?: string;
    /**
    * Prevents hover highlighting effect on rows.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * undefined
    *
    * Defaults to **false**.
    */
    paginated?: boolean;
    /**
    * Customize table behavior.
    *
    * Defaults to **null**.
    */
    plugins?: Array<object>;
    /**
    * Enable columns to be resized by the user.
    *
    * Defaults to **null**.
    */
    resizableColumns?: boolean;
    /**
    * Apply a stripped effect to the rows.
    *
    * Defaults to **null**.
    */
    rowStriped?: boolean;
    /**
    * Enable column sorting.
    *
    * Defaults to **false**.
    */
    sortable?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * @deprecated _Use `leadingContent` instead._
    *
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    topBar?: React.ReactNode;
    /**
    * Custom content to appear inside the table container directly below the actual table.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Enable virtualized rendering of the row.
    *
    * Defaults to **false**.
    */
    virtualized?: boolean;
    /**
    * Fixed width for the table. Required for `layout` of `fixed`.
    *
    * Defaults to **null**.
    */
    width?: number;
    /**
    * Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onStateChange: Function;
    /**
    * Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onWidthChange: Function;
}

/**
* Automatically generates a table based on data and columns.
 * @prop {string} ariaLabel - Used by assistive technology, such as screen readers, to name the table for accessibility Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} columnReordering - Allow columns to be re-ordered using drag and drop headers. Defaults to _false_.
 * @prop {boolean} columnStriped - Apply a striped effect to columns. Defaults to _false_.
 * @prop {[object]} columns - Array of objects describing the table columns, used in conjunction with `data` prop. Note: do not use children with data and columns, they will control the markup, when used. Defaults to _[]_.
 * @prop {object} containerProps - Custom properties to be applied to the table container. Defaults to _null_.
 * @prop {[object]} data - Array of data Only necessary, used in conjunction with `columns` prop. Note: do not use children with data and columns, they will control the markup, when used. Defaults to _null_.
 * @prop {object} defaultColumn - An object to describe the the default column properties if none else are specified via data. Defaults to _null_.
 * @prop {boolean} dense - A more compact table with less padding. Defaults to _false_.
 * @prop {boolean} fixedHeader - The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Defaults to _false_.
 * @prop {React.ReactNode} footerContent - Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} fullWidth - The table will expand it's width to 100% of it's parent container. Defaults to _false_.
 * @prop {React.ReactNode} headerContent - Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} headerDividerTall - The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table. Defaults to _false_.
 * @prop {string} headerDividerThemeColor - Add a splash of color to the divider between the header and rows. Defaults to _null_.
 * @prop {string} headerThemeColor - Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly. Defaults to _null_.
 * @prop {number} height - Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`. Defaults to _null_.
 * @prop {string} layout - The layout approach the table will use. Defaults to _'block'_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {boolean} nested - Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table. Defaults to _false_.
 * @prop {string} noContentMessage - undefined Defaults to _'No Content'_.
 * @prop {boolean} noHover - Prevents hover highlighting effect on rows. Defaults to _false_.
 * @prop {boolean} paginated - undefined Defaults to _false_.
 * @prop {[object]} plugins - Customize table behavior. Defaults to _null_.
 * @prop {boolean} resizableColumns - Enable columns to be resized by the user. Defaults to _null_.
 * @prop {boolean} rowStriped - Apply a stripped effect to the rows. Defaults to _null_.
 * @prop {boolean} sortable - Enable column sorting. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {React.ReactNode} topBar - Deprecated: Use `leadingContent` instead. Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear inside the table container directly below the actual table. Defaults to _null_.
 * @prop {boolean} virtualized - Enable virtualized rendering of the row. Defaults to _false_.
 * @prop {number} width - Fixed width for the table. Required for `layout` of `fixed`. Defaults to _null_.
 *  @event onStateChange - Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
 *  @event onWidthChange - Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
*/
export const TableBuilder: React.FunctionComponent<TableBuilderProps & React.HTMLProps<HTMLElement> & React.DOMAttributes<HTMLElement>>;


export interface TableCellProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * @deprecated _This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility._
    *
    * Enabled a custom background color.
    *
    * Defaults to **undefined**.
    */
    backgroundColor?: string;
    /**
    * React-Table cell object.
    *
    * Defaults to **null**.
    */
    cell?: object;
    /**
    * Mostly commonly a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The cell may span multiple columns. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized).
    *
    * Defaults to **null**.
    */
    colSpan?: number;
    /**
    * Override the default rendering of the cell.
    *
    * Defaults to **null**.
    */
    customRenderer?: Function;
    /**
    * Used for sticky columns.
    *
    * Defaults to **undefined**.
    */
    fixed?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The table's layout value, used internally.
    *
    * Defaults to **empty string**.
    */
    layout?: string;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the parent cell of the nested table.
    *
    * Defaults to **false**.
    */
    nestable?: boolean;
    /**
    * The cell may span multiple rows. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized).
    *
    * Defaults to **null**.
    */
    rowSpan?: number;
}

/**
* Individual column cell in a TableRow.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {string} backgroundColor - Deprecated: This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility. Enabled a custom background color. Defaults to _undefined_.
 * @prop {object} cell - React-Table cell object. Defaults to _null_.
 * @prop {React.ReactNode} children - Mostly commonly a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} colSpan - The cell may span multiple columns. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized). Defaults to _null_.
 * @prop {function} customRenderer - Override the default rendering of the cell. Defaults to _null_.
 * @prop {boolean} fixed - Used for sticky columns. Defaults to _undefined_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} layout - The table's layout value, used internally. Defaults to _empty string_.
 * @prop {boolean} nestable - Removes certain margins and paddings for better appearance when nesting tables. Used on the parent cell of the nested table. Defaults to _false_.
 * @prop {number} rowSpan - The cell may span multiple rows. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized). Defaults to _null_.
*/
export const TableCell: React.FunctionComponent<TableCellProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableFooterProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fixed width for table body.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* TableFooter contains the content at the bottom of the table.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {number} width - Fixed width for table body. Defaults to _null_.
*/
export const TableFooter: React.FunctionComponent<TableFooterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableHeaderProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fixed width for table body.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* TableHeader contains the header rows.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {number} width - Fixed width for table body. Defaults to _null_.
*/
export const TableHeader: React.FunctionComponent<TableHeaderProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableHeaderCellProps {
    /**
    * Optional custom formatter function for `TableHeaderCell` actions.
    *
    * Defaults to **null**.
    */
    actionsRenderer?: Function;
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * @deprecated _This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility._
    *
    * Custom background color.
    *
    * Defaults to **undefined**.
    */
    backgroundColor?: string;
    /**
    * Mostly commonly a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * React-Table column object.
    *
    * Defaults to **null**.
    */
    column?: object;
    /**
    * Custom index to be passed to the actionsRenderer.
    *
    * Defaults to **undefined**.
    */
    columnIndex?: number;
    /**
    * Used to trigger drag-and-drop functionality.
    *
    * Defaults to **null**.
    */
    columnReordering?: boolean;
    /**
    * Override the default rendering of the cell.
    *
    * Defaults to **null**.
    */
    customRenderer?: Function;
    /**
    * Used for sticky columns.
    *
    * Defaults to **undefined**.
    */
    fixed?: boolean;
    /**
    * Required for column reordering.
    *
    * Defaults to **null**.
    */
    id?: string;
    /**
    * The table's layout value, used internally.
    *
    * Defaults to **empty string**.
    */
    layout?: string;
    /**
    * Enabled resizable column indicator.
    *
    * Defaults to **null**.
    */
    resizableColumns?: boolean;
    /**
    * Enables the sort indicator to be hidden when the mouse is not hovering.
    *
    * Defaults to **null**.
    */
    sortIndicatorOnHover?: boolean;
    /**
    * Will enable sorting events and apply a sortable indicator to the column.
    *
    * Defaults to **false**.
    */
    sortable?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fired with the user clicks on the cell.
    */
    onClick?: Function;
}

/**
* Individual column cell in a TableHeaderRow.
 * @prop {function} actionsRenderer - Optional custom formatter function for `TableHeaderCell` actions. Defaults to _null_.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {string} backgroundColor - Deprecated: This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility. Custom background color. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Mostly commonly a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} column - React-Table column object. Defaults to _null_.
 * @prop {number} columnIndex - Custom index to be passed to the actionsRenderer. Defaults to _undefined_.
 * @prop {boolean} columnReordering - Used to trigger drag-and-drop functionality. Defaults to _null_.
 * @prop {function} customRenderer - Override the default rendering of the cell. Defaults to _null_.
 * @prop {boolean} fixed - Used for sticky columns. Defaults to _undefined_.
 * @prop {string} id - Required for column reordering. Defaults to _null_.
 * @prop {string} layout - The table's layout value, used internally. Defaults to _empty string_.
 * @prop {boolean} resizableColumns - Enabled resizable column indicator. Defaults to _null_.
 * @prop {boolean} sortIndicatorOnHover - Enables the sort indicator to be hidden when the mouse is not hovering. Defaults to _null_.
 * @prop {boolean} sortable - Will enable sorting events and apply a sortable indicator to the column. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 *  @event onClick - Fired with the user clicks on the cell.
*/
export const TableHeaderCell: React.FunctionComponent<TableHeaderCellProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableHeaderRowProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* TableHeader contains the header cells.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const TableHeaderRow: React.FunctionComponent<TableHeaderRowProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableNoContentProps {
    /**
    * Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Wraps the output in a table row and cell. For use within a table.
    *
    * Defaults to **false**.
    */
    includeTableMarkup?: boolean;
}

/**
* Contains the *no content* message.
 * @prop {React.ReactNode} children - Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} includeTableMarkup - Wraps the output in a table row and cell. For use within a table. Defaults to _false_.
*/
export const TableNoContent: React.FunctionComponent<TableNoContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableRowProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* A container for TableCell components.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const TableRow: React.FunctionComponent<TableRowProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableSortIndicatorProps {
    /**
    * React-Table column object.
    *
    * Defaults to **null**.
    */
    column?: object;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
}

/**
* A visual indicator of the sort direction of a column.
 * @prop {object} column - React-Table column object. Defaults to _null_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
*/
export const TableSortIndicator: React.FunctionComponent<TableSortIndicatorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableTopBarProps {
    /**
    * Expects a component such as a button or search bar, but will accept any valid markup.
    *
    * Defaults to **null**.
    */
    actions?: React.ReactNode;
    /**
    * Expects a FilterBar component, but will accept any valid markup.
    *
    * Defaults to **null**.
    */
    filterBar?: React.ReactNode;
    /**
    * @deprecated _May be removed pending further review._
    *
    * Adds additional emphasis and padding.
    *
    * Defaults to **undefined**.
    */
    prominent?: boolean;
    /**
    * Can be used to add a title to the table.
    *
    * Defaults to **null**.
    */
    title?: string;
}

/**
* A container meant to go above the table. Has several built in options.
 * @prop {React.ReactNode} actions - Expects a component such as a button or search bar, but will accept any valid markup. Defaults to _null_.
 * @prop {React.ReactNode} filterBar - Expects a FilterBar component, but will accept any valid markup. Defaults to _null_.
 * @prop {boolean} prominent - Deprecated: May be removed pending further review. Adds additional emphasis and padding. Defaults to _undefined_.
 * @prop {string} title - Can be used to add a title to the table. Defaults to _null_.
*/
export const TableTopBar: React.FunctionComponent<TableTopBarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableVerticalResizeHandleProps {
    /**
    * The composed table elements. Expects one each of TableHeader, TableBody.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * React-Table column object.
    *
    * Defaults to **null**.
    */
    column?: object;
}

/**
* A visual indicator of for the grabble area to resize a column.
 * @prop {React.ReactNode} children - The composed table elements. Expects one each of TableHeader, TableBody. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} column - React-Table column object. Defaults to _null_.
*/
export const TableVerticalResizeHandle: React.FunctionComponent<TableVerticalResizeHandleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
