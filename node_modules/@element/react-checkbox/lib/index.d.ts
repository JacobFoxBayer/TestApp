import React from 'react';


export interface CheckboxProps {
    /**
    * Aligns checkbox to the right of the label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * The current state of the checkbox.
    *
    * Defaults to **null**.
    */
    checked?: boolean;
    /**
    * @deprecated _Use `label` instead._
    *
    * Alternative to `label`, if both `label` and `children` are set, `label` will take priority. Expects a string, but will accept any valid markup.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The label not be displayed, but will still be available to screen readers. This should only be used when the context of the checkbox is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action.
    *
    * Defaults to **false**.
    */
    hideLabel?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The checkbox will show an indicator if no value (true or false) is set.
    *
    * Defaults to **false**.
    */
    indeterminate?: boolean;
    /**
    * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Any additional value information to be included with the event.
    *
    * Defaults to **null**.
    */
    value?: string | number | boolean | object;
    /**
    * Fired when checkbox value is changed
    */
    onChange?: Function;
}

/**
* A checkbox allows a single value (true/false) choice for the user.
 * @prop {boolean} alignEnd - Aligns checkbox to the right of the label. Defaults to _false_.
 * @prop {boolean} checked - The current state of the checkbox. Defaults to _null_.
 * @prop {React.ReactNode} children - Deprecated: Use `label` instead. Alternative to `label`, if both `label` and `children` are set, `label` will take priority. Expects a string, but will accept any valid markup. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {boolean} hideLabel - The label not be displayed, but will still be available to screen readers. This should only be used when the context of the checkbox is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {boolean} indeterminate - The checkbox will show an indicator if no value (true or false) is set. Defaults to _false_.
 * @prop {string} label - Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers. Defaults to _null_.
 * @prop {string} themeColor - Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|number|boolean|object} value - Any additional value information to be included with the event. Defaults to _null_.
 *  @event onChange - Fired when checkbox value is changed
*/
export const Checkbox: React.FunctionComponent<CheckboxProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
