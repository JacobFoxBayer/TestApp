import React from 'react';


export interface GridProps {
    /**
    * @deprecated _Use `variant`='airy' instead._
    *
    * Applies extra padding to each column.
    *
    * Defaults to **undefined**.
    */
    airy?: boolean;
    /**
    * Accepts GridCol or GridRow.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets the column gap for the grid.
    *
    * Defaults to **'16px'**.
    */
    columnGap?: string | number;
    /**
    * Applies 100% height to the grid and direct children rows. Useful when creating a page layout. Be aware all direct children rows will have a 100% height.
    *
    * Defaults to **null**.
    */
    fullHeight?: boolean;
    /**
    * Applies 100% width to the grid and direct children rows. Useful to maintain full width in a flex container.
    *
    * Defaults to **null**.
    */
    fullWidth?: boolean;
    /**
    * Alignment of entire grid: left and right.
    *
    * Defaults to **'center'**.
    */
    gridAlign?: string;
    /**
    * Sets the row gap for the grid.
    *
    * Defaults to **'16px'**.
    */
    rowGap?: string | number;
    /**
    * Styles for the grid.
    *
    * Defaults to **undefined**.
    */
    style?: object;
    /**
    * If true the grid will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useMaxWidth?: boolean;
    /**
    * Select `airy` or `standard` padding.
    *
    * Defaults to **'standard'**.
    */
    variant?: string;
}

/**
* The Element Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts.
 * @prop {boolean} airy - Deprecated: Use `variant`='airy' instead. Applies extra padding to each column. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Accepts GridCol or GridRow. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|number} columnGap - Sets the column gap for the grid. Defaults to _'16px'_.
 * @prop {boolean} fullHeight - Applies 100% height to the grid and direct children rows. Useful when creating a page layout. Be aware all direct children rows will have a 100% height. Defaults to _null_.
 * @prop {boolean} fullWidth - Applies 100% width to the grid and direct children rows. Useful to maintain full width in a flex container. Defaults to _null_.
 * @prop {string} gridAlign - Alignment of entire grid: left and right. Defaults to _'center'_.
 * @prop {string|number} rowGap - Sets the row gap for the grid. Defaults to _'16px'_.
 * @prop {object} style - Styles for the grid. Defaults to _undefined_.
 * @prop {boolean} useMaxWidth - If true the grid will have a max width according to your theme's breakpoints. Defaults to _false_.
 * @prop {string} variant - Select `airy` or `standard` padding. Defaults to _'standard'_.
*/
export const Grid: React.FunctionComponent<GridProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface GridColProps {
    /**
    * Alignment of cell within the row: top, middle, bottom. If omitted the col will stretch to the height of the row.
    *
    * Defaults to **undefined**.
    */
    align?: string;
    /**
    * Content to be rendered inside the GridCol. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Specifies the number of columns the cell spans.
    *
    * Defaults to **null**.
    */
    desktopCol?: number;
    /**
    * Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. Set to any valid `grid-column-start`.
    *
    * Defaults to **null**.
    */
    gridColStart?: string | number;
    /**
    * Horizontal alignment of the cell contents of cell content: top, middle, bottom.
    *
    * Defaults to **'left'**.
    */
    horizontalAlign?: string;
    /**
    * Specifies the order of the cell.
    *
    * Defaults to **null**.
    */
    order?: number;
    /**
    * Specifies the number of columns the cell spans on a phone.
    *
    * Defaults to **null**.
    */
    phoneCol?: number;
    /**
    * Specifies the number of columns the cell spans on a tablet.
    *
    * Defaults to **null**.
    */
    tabletCol?: number;
    /**
    * Vertical alignment of cell content: top, middle, bottom.
    *
    * Defaults to **'top'**.
    */
    verticalAlign?: string;
}

/**
* The column sub-component for Grid.
 * @prop {string} align - Alignment of cell within the row: top, middle, bottom. If omitted the col will stretch to the height of the row. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Content to be rendered inside the GridCol. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} desktopCol - Specifies the number of columns the cell spans. Defaults to _null_.
 * @prop {string|number} gridColStart - Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. Set to any valid `grid-column-start`. Defaults to _null_.
 * @prop {string} horizontalAlign - Horizontal alignment of the cell contents of cell content: top, middle, bottom. Defaults to _'left'_.
 * @prop {number} order - Specifies the order of the cell. Defaults to _null_.
 * @prop {number} phoneCol - Specifies the number of columns the cell spans on a phone. Defaults to _null_.
 * @prop {number} tabletCol - Specifies the number of columns the cell spans on a tablet. Defaults to _null_.
 * @prop {string} verticalAlign - Vertical alignment of cell content: top, middle, bottom. Defaults to _'top'_.
*/
export const GridCol: React.FunctionComponent<GridColProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface GridRowProps {
    /**
    * Content to be rendered inside the GridRow. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* The row sub-component for Grid.
 * @prop {React.ReactNode} children - Content to be rendered inside the GridRow. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const GridRow: React.FunctionComponent<GridRowProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
