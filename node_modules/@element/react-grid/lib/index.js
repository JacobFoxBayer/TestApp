'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var clsx = require('clsx');
var PropTypes = require('prop-types');
var reactCommon = require('@element/react-common');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

const GridContext = /*#__PURE__*/React.createContext({});

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const GridPropTypes = {
  /**
   * @deprecated _Use `variant`='airy' instead._
   *
   * Applies extra padding to each column.
   *
   * Defaults to **undefined**.
   */
  airy: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "Grid", 'Use `variant`="airy" instead.'),
  /**
   * Accepts GridCol or GridRow.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node.isRequired,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Sets the column gap for the grid.
   *
   * Defaults to **'16px'**.
   */
  columnGap: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
  /**
   * Applies 100% height to the grid and direct children rows. Useful when creating a page layout. Be aware all direct children rows will have a 100% height.
   *
   * Defaults to **null**.
   */
  fullHeight: PropTypes__default["default"].bool,
  /**
   * Applies 100% width to the grid and direct children rows. Useful to maintain full width in a flex container.
   *
   * Defaults to **null**.
   */
  fullWidth: PropTypes__default["default"].bool,
  /**
   * Alignment of entire grid: left and right.
   *
   * Defaults to **'center'**.
   */
  gridAlign: PropTypes__default["default"].oneOf(["center", "left", "right"]),
  /**
   * Sets the row gap for the grid.
   *
   * Defaults to **'16px'**.
   */
  rowGap: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
  /**
   * Styles for the grid.
   *
   * Defaults to **undefined**.
   */
  style: PropTypes__default["default"].object,
  /**
   * If true the grid will have a max width according to your theme's breakpoints.
   *
   * Defaults to **false**.
   */
  useMaxWidth: PropTypes__default["default"].bool,
  /**
   * Select `airy` or `standard` padding.
   *
   * Defaults to **'standard'**.
   */
  variant: PropTypes__default["default"].oneOf(["standard", "airy", "none"])
};
const GridDefaultProps = {
  airy: undefined,
  children: null,
  className: undefined,
  columnGap: "16px",
  fullHeight: null,
  fullWidth: null,
  gridAlign: "center",
  rowGap: "16px",
  style: undefined,
  useMaxWidth: false,
  variant: "standard"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const GridColPropTypes = {
  /**
   * Alignment of cell within the row: top, middle, bottom. If omitted the col will stretch to the height of the row.
   *
   * Defaults to **undefined**.
   */
  align: PropTypes__default["default"].oneOf(["", "top", "middle", "bottom"]),
  /**
   * Content to be rendered inside the GridCol. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Specifies the number of columns the cell spans.
   *
   * Defaults to **null**.
   */
  desktopCol: PropTypes__default["default"].number,
  /**
   * Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. Set to any valid `grid-column-start`.
   *
   * Defaults to **null**.
   */
  gridColStart: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number]),
  /**
   * Horizontal alignment of the cell contents of cell content: top, middle, bottom.
   *
   * Defaults to **'left'**.
   */
  horizontalAlign: PropTypes__default["default"].oneOf(["left", "center", "right"]),
  /**
   * Specifies the order of the cell.
   *
   * Defaults to **null**.
   */
  order: PropTypes__default["default"].number,
  /**
   * Specifies the number of columns the cell spans on a phone.
   *
   * Defaults to **null**.
   */
  phoneCol: PropTypes__default["default"].number,
  /**
   * Specifies the number of columns the cell spans on a tablet.
   *
   * Defaults to **null**.
   */
  tabletCol: PropTypes__default["default"].number,
  /**
   * Vertical alignment of cell content: top, middle, bottom.
   *
   * Defaults to **'top'**.
   */
  verticalAlign: PropTypes__default["default"].oneOf(["top", "middle", "bottom"])
};
const GridColDefaultProps = {
  align: undefined,
  children: null,
  className: undefined,
  desktopCol: null,
  gridColStart: null,
  horizontalAlign: "left",
  order: null,
  phoneCol: null,
  tabletCol: null,
  verticalAlign: "top"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const GridRowPropTypes = {
  /**
   * Content to be rendered inside the GridRow. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node.isRequired,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string
};
const GridRowDefaultProps = {
  children: null,
  className: undefined
};

const Grid = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    airy,
    children,
    className,
    columnGap,
    fullHeight,
    fullWidth,
    gridAlign,
    rowGap,
    style,
    useMaxWidth,
    variant,
    ...customProps
  } = props;
  const currentVariant = airy ? 'airy' : variant;
  const value = React.useMemo(() => ({
    fullHeight,
    rowGap,
    columnGap
  }), [columnGap, fullHeight, rowGap]);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const classes = React.useMemo(() => clsx__default["default"]('lmnt', 'mdc-layout-grid', 'lmnt-layout-grid', `mdc-layout-grid mdc-layout-grid--align-${gridAlign}`, (currentVariant === 'airy' || airy) && 'mdc-grid-cell-wrapper-airy-tablet mdc-grid-cell-wrapper-airy-desktop', variant === 'none' && 'mdc-grid-cell-wrapper-none-tablet mdc-grid-cell-wrapper-none-desktop mdc-grid-cell-wrapper-none-phone ', fullWidth && 'lmnt-layout-grid--full-width', fullHeight && 'lmnt-layout-grid--full-height', useMaxWidth && 'lmnt-layout-grid--with-max-width', className), [airy, className, currentVariant, fullHeight, fullWidth, gridAlign, useMaxWidth, variant]);
  return /*#__PURE__*/React__default["default"].createElement(GridContext.Provider, {
    value: value
  }, /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: classes
  }, customProps), children));
});
Grid.displayName = 'Grid';
Grid.propTypes = GridPropTypes;
Grid.defaultProps = GridDefaultProps;

const GridCol = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    align,
    children,
    className,
    columns,
    desktopCol,
    gridColStart,
    horizontalAlign,
    order,
    phoneCol,
    style,
    tabletCol,
    verticalAlign,
    ...customProps
  } = props;
  const styles = React.useMemo(() => ({
    ...style,
    gridColumnStart: gridColStart
  }), [gridColStart, style]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: externalRef,
    style: styles,
    className: clsx__default["default"]('lmnt', `lmnt-layout-grid__cell--vertical-align-${verticalAlign}`, `lmnt-layout-grid__cell--horizontal-align-${horizontalAlign}`, 'mdc-layout-grid__cell', !columns && !phoneCol && !tabletCol && !desktopCol && [`mdc-layout-grid__cell`], order && `mdc-layout-grid__cell--order-${order}`, align && `mdc-layout-grid__cell--align-${align}`, columns && [`mdc-layout-grid__cell--span-${columns}`], phoneCol && [`mdc-layout-grid__cell--span-${phoneCol}-phone`], tabletCol && [`mdc-layout-grid__cell--span-${tabletCol}-tablet`], desktopCol && [`mdc-layout-grid__cell--span-${desktopCol}-desktop`], 'lmnt-layout-grid__cell', className)
  }, customProps), children);
});
GridCol.displayName = 'GridCol';
GridCol.propTypes = GridColPropTypes;
GridCol.defaultProps = GridColDefaultProps;

const GridRow = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    style,
    ...customProps
  } = props;
  const {
    fullHeight,
    rowGap,
    columnGap
  } = React.useContext(GridContext);
  const styles = React.useMemo(() => ({
    ...style,
    height: fullHeight ? '100%' : '',
    rowGap,
    columnGap
  }), [style, fullHeight, rowGap, columnGap]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: externalRef,
    className: clsx__default["default"]('lmnt', 'mdc-layout-grid__inner', 'lmnt-layout-grid__inner', className),
    style: styles
  }, customProps), children);
});
GridRow.displayName = 'GridRow';
GridRow.propTypes = GridRowPropTypes;
GridRow.defaultProps = GridRowDefaultProps;

exports.Grid = Grid;
exports.GridCol = GridCol;
exports.GridContext = GridContext;
exports.GridRow = GridRow;
//# sourceMappingURL=index.js.map
