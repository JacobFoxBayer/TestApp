import React from 'react';


export interface BannerProps {
    /**
    * Indicates that the banner should have more white-space padding than default.
    *
    * Defaults to **null**.
    */
    airy?: boolean;
    /**
    * Content to be rendered inside the banner. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * If using a custom top app bar with banner, you will have to send in the height of the custom top app bar so the banner positions correctly, ie 55px. You will be responsible for making sure the page content aligns properly upon opening and closing the Banner.  The Banner Margin Fix component allows you to wrap the content and send in the margin top or you can use a custom component.
    *
    * Defaults to **null**.
    */
    customTopAppBarHeight?: string;
    /**
    * Indicates that the banner will be used with an Element Drawer.
    *
    * Defaults to **null**.
    */
    drawer?: boolean;
    /**
    * Indicates that the banner should have box-shadow and elevation styles. Should be used when banner is fixed. Flat style by default.
    *
    * Defaults to **null**.
    */
    elevated?: boolean;
    /**
    * Indicates that the banner will be in a fixed position.
    *
    * Defaults to **null**.
    */
    fixed?: boolean;
    /**
    * Banner media slot can hold an image, icon, or other media. (40x40).
    *
    * Defaults to **null**.
    */
    media?: React.ReactNode;
    /**
    * Indicates that the banner should be open. Open by default. Animates between states with transition CSS.
    *
    * Defaults to **true**.
    */
    open?: boolean;
    /**
    * If true clicking on the primary button will dismiss the banner. At least one button must dismiss the banner. If both primary and secondary buttons are marked as not dismissive, the primary button will default to dismissive.
    *
    * Defaults to **true**.
    */
    primaryButtonDismissive?: boolean;
    /**
    * Banner primary button label text.
    *
    * Defaults to **'Ok'**.
    */
    primaryButtonLabel?: string;
    /**
    * If true clicking on the secondary button will dismiss the banner. At least one button must dismiss the banner. If both secondary and secondary buttons are marked as not dismissive, the primary button will default to dismissive.
    *
    * Defaults to **true**.
    */
    secondaryButtonDismissive?: boolean;
    /**
    * Banner action button label text.
    *
    * Defaults to **null**.
    */
    secondaryButtonLabel?: string;
    /**
    * Indicates that the banner background-color should use Element's 'surface variant' color. Uses 'surface' by default.
    *
    * Defaults to **null**.
    */
    surfaceVariant?: boolean;
    /**
    * Indicates that the banner will be used with an Element Top App Bar.
    *
    * Defaults to **null**.
    */
    topAppBar?: boolean;
    /**
    * Indicates which type of Element Top App Bar Banner will be used with.
    *
    * Defaults to **'fixed'**.
    */
    topAppBarVariant?: string;
    /**
    * Fired when the banner finishes its closing animation.
    */
    onClosed?: Function;
    /**
    * Fired when the banner begins its closing animation.
    */
    onClosing?: Function;
    /**
    * Fired when the banner finishes its opened animation.
    */
    onOpened?: Function;
    /**
    * Fired when the banner begins its MDCBanner:opening animation.
    */
    onOpening?: Function;
    /**
    * Fired when the Primary Action Button is clicked. Runs after closing animation begins.
    */
    onPrimaryClicked?: Function;
    /**
    * Fired when the Secondary Action Button is clicked. Runs after closing animation begins.
    */
    onSecondaryClicked?: Function;
}

/**
* A banner displays a prominent message and related optional actions.
 * @prop {boolean} airy - Indicates that the banner should have more white-space padding than default. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered inside the banner. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} customTopAppBarHeight - If using a custom top app bar with banner, you will have to send in the height of the custom top app bar so the banner positions correctly, ie 55px. You will be responsible for making sure the page content aligns properly upon opening and closing the Banner.  The Banner Margin Fix component allows you to wrap the content and send in the margin top or you can use a custom component. Defaults to _null_.
 * @prop {boolean} drawer - Indicates that the banner will be used with an Element Drawer. Defaults to _null_.
 * @prop {boolean} elevated - Indicates that the banner should have box-shadow and elevation styles. Should be used when banner is fixed. Flat style by default. Defaults to _null_.
 * @prop {boolean} fixed - Indicates that the banner will be in a fixed position. Defaults to _null_.
 * @prop {React.ReactNode} media - Banner media slot can hold an image, icon, or other media. (40x40). Defaults to _null_.
 * @prop {boolean} open - Indicates that the banner should be open. Open by default. Animates between states with transition CSS. Defaults to _true_.
 * @prop {boolean} primaryButtonDismissive - If true clicking on the primary button will dismiss the banner. At least one button must dismiss the banner. If both primary and secondary buttons are marked as not dismissive, the primary button will default to dismissive. Defaults to _true_.
 * @prop {string} primaryButtonLabel - Banner primary button label text. Defaults to _'Ok'_.
 * @prop {boolean} secondaryButtonDismissive - If true clicking on the secondary button will dismiss the banner. At least one button must dismiss the banner. If both secondary and secondary buttons are marked as not dismissive, the primary button will default to dismissive. Defaults to _true_.
 * @prop {string} secondaryButtonLabel - Banner action button label text. Defaults to _null_.
 * @prop {boolean} surfaceVariant - Indicates that the banner background-color should use Element's 'surface variant' color. Uses 'surface' by default. Defaults to _null_.
 * @prop {boolean} topAppBar - Indicates that the banner will be used with an Element Top App Bar. Defaults to _null_.
 * @prop {string} topAppBarVariant - Indicates which type of Element Top App Bar Banner will be used with. Defaults to _'fixed'_.
 *  @event onClosed - Fired when the banner finishes its closing animation.
 *  @event onClosing - Fired when the banner begins its closing animation.
 *  @event onOpened - Fired when the banner finishes its opened animation.
 *  @event onOpening - Fired when the banner begins its MDCBanner:opening animation.
 *  @event onPrimaryClicked - Fired when the Primary Action Button is clicked. Runs after closing animation begins.
 *  @event onSecondaryClicked - Fired when the Secondary Action Button is clicked. Runs after closing animation begins.
*/
export const Banner: React.FunctionComponent<BannerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface BannerMarginFixProps {
    /**
    * If supplied, the adjusted margin will attempt to be automatically calculated.
    *
    * Defaults to **undefined**.
    */
    bannerId?: string;
    /**
    * Apply the adjusted left margin.
    *
    * Defaults to **false**.
    */
    bannerOpen?: boolean;
    /**
    * Content to be vertically adjusted. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The spacing between the bottom of the banner and the top of the content being adjusted.
    *
    * Defaults to **24**.
    */
    extraMargin?: number;
    /**
    * Custom margin.
    *
    * Defaults to **0**.
    */
    marginTop?: number;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
}

/**
* A container to correctly position content when using a fixed Banner.
 * @prop {string} bannerId - If supplied, the adjusted margin will attempt to be automatically calculated. Defaults to _undefined_.
 * @prop {boolean} bannerOpen - Apply the adjusted left margin. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be vertically adjusted. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} extraMargin - The spacing between the bottom of the banner and the top of the content being adjusted. Defaults to _24_.
 * @prop {number} marginTop - Custom margin. Defaults to _0_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
*/
export const BannerMarginFix: React.FunctionComponent<BannerMarginFixProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
