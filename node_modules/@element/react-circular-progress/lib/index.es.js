import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useRef, useImperativeHandle, useEffect, useCallback } from 'react';
import clsx from 'clsx';
import { MDCCircularProgress } from '@material/circular-progress';
import { deprecatedProp, edsWarning } from '@element/react-common';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CircularProgressPropTypes = {
  /**
   * Accessibility label.
   *
   * Defaults to **'Progress Indicator'**.
   */
  ariaLabel: PropTypes.string,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * The size of the progress indicator.
   *
   * Defaults to **'lg'**.
   */
  indicatorSize: PropTypes.oneOf(["sm", "md", "lg"]),
  /**
   * Sets the visibility of the progress indicator.
   *
   * Defaults to **true**.
   */
  open: PropTypes.bool,
  /**
   * The current progress of a determinate progress indicator. Must be between 0 and 1.
   *
   * Defaults to **0**.
   */
  progress: PropTypes.number,
  /**
   * @deprecated _Renamed, see indicatorSize instead._
   *
   * The size of the progress indicator.
   *
   * Defaults to **undefined**.
   */
  size: deprecatedProp(PropTypes.oneOf(["sm", "md", "lg"]), "CircularProgress", "Renamed, see indicatorSize instead."),
  /**
   * Color of the indicator stroke with 'primary' or 'secondary' theme color.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes.oneOf(["primary", "secondary", "primary-variant", "secondary-variant", "two-color", "two-color-variant"]),
  /**
   * An indeterminate CircularProgress indicator will continue spinning until closed. A determinate CircularProgress indicator will display the current progress.
   *
   * Defaults to **'indeterminate'**.
   */
  variant: PropTypes.oneOf(["determinate", "indeterminate"])
};
const CircularProgressDefaultProps = {
  ariaLabel: "Progress Indicator",
  className: undefined,
  indicatorSize: "lg",
  open: true,
  progress: 0,
  size: undefined,
  themeColor: "primary",
  variant: "indeterminate"
};

const CircularProgress = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    ariaLabel,
    className,
    open,
    progress,
    size,
    indicatorSize,
    themeColor,
    variant,
    ...customProps
  } = props;
  const circularProgressRef = useRef();
  const mdcCircularProgress = useRef();
  useImperativeHandle(externalRef, () => circularProgressRef.current, []);
  useEffect(() => {
    mdcCircularProgress.current = MDCCircularProgress.attachTo(circularProgressRef.current);
    return () => {
      mdcCircularProgress.current.destroy();
    };
  }, []);
  useEffect(() => {
    if (variant === 'determinate' && progress < 0 || progress > 1) edsWarning('CircularProgress: `progress` must be between 0 and 1.');
    mdcCircularProgress.current.determinate = variant === 'determinate';
    mdcCircularProgress.current.progress = progress;
  }, [progress, variant]);
  const getSizes = () => {
    switch (indicatorSize) {
      case 'sm':
        return {
          heightWidth: '24px',
          viewBox: '24',
          cxCy: '12',
          r: '8.75',
          strokeWidth: '2.5',
          strokeWidth80: '2',
          strokeDashArray: '54.978',
          strokeDashoffset: '54.978',
          halfStrokeDashoffset: '27.489'
        };
      case 'md':
        return {
          heightWidth: '36px',
          viewBox: '32',
          cxCy: '16',
          r: '12.5',
          strokeWidth: '3',
          strokeWidth80: '2.4',
          strokeDashArray: '78.54',
          strokeDashoffset: '78.54',
          halfStrokeDashoffset: '39.27'
        };
      case 'lg':
        return {
          heightWidth: '48px',
          viewBox: '48',
          cxCy: '24',
          r: '18',
          strokeWidth: '4',
          strokeWidth80: '3.2',
          strokeDashArray: '113.097',
          strokeDashoffset: '113.097',
          halfStrokeDashoffset: '56.549'
        };
      default:
        return {
          heightWidth: '48px',
          viewBox: '48',
          cxCy: '24',
          r: '18',
          strokeWidth: '4',
          strokeWidth80: '3.2',
          strokeDashArray: '113.097',
          strokeDashoffset: '113.097',
          halfStrokeDashoffset: '56.549'
        };
    }
  };
  const {
    heightWidth,
    viewBox,
    cxCy,
    r,
    strokeWidth,
    strokeWidth80,
    strokeDashArray,
    strokeDashoffset,
    halfStrokeDashoffset
  } = getSizes();
  const Spinner = useCallback(() => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left"
  }, /*#__PURE__*/React.createElement("svg", {
    className: "mdc-circular-progress__indeterminate-circle-graphic",
    viewBox: `0 0 ${viewBox} ${viewBox}`,
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: cxCy,
    cy: cxCy,
    r: r,
    strokeDasharray: strokeDashArray,
    strokeDashoffset: halfStrokeDashoffset,
    strokeWidth: strokeWidth
  }))), /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__gap-patch"
  }, /*#__PURE__*/React.createElement("svg", {
    className: "mdc-circular-progress__indeterminate-circle-graphic",
    viewBox: `0 0 ${viewBox} ${viewBox}`,
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: cxCy,
    cy: cxCy,
    r: r,
    strokeDasharray: strokeDashArray,
    strokeDashoffset: halfStrokeDashoffset,
    strokeWidth: strokeWidth80
  }))), /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right"
  }, /*#__PURE__*/React.createElement("svg", {
    className: "mdc-circular-progress__indeterminate-circle-graphic",
    viewBox: `0 0 ${viewBox} ${viewBox}`,
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("circle", {
    cx: cxCy,
    cy: cxCy,
    r: r,
    strokeDasharray: strokeDashArray,
    strokeDashoffset: halfStrokeDashoffset,
    strokeWidth: strokeWidth
  })))), [cxCy, halfStrokeDashoffset, r, strokeDashArray, strokeWidth, strokeWidth80, viewBox]);
  const hasMultipleColors = themeColor === 'two-color' || themeColor === 'two-color-variant';
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: circularProgressRef,
    className: clsx('lmnt', 'mdc-circular-progress', variant === 'indeterminate' && 'mdc-circular-progress--indeterminate', !open && 'mdc-circular-progress--closed', themeColor === 'primary' && 'lmnt-circular-progress--primary', themeColor === 'secondary' && 'lmnt-circular-progress--secondary', themeColor === 'primary-variant' && 'lmnt-circular-progress--primary-variant', themeColor === 'secondary-variant' && 'lmnt-circular-progress--secondary-variant', themeColor === 'two-color' && 'lmnt-circular-progress--two-color', themeColor === 'two-color-variant' && 'lmnt-circular-progress--two-color-variant', className),
    style: {
      width: heightWidth,
      height: heightWidth
    },
    role: "progressbar",
    "aria-label": ariaLabel,
    "aria-valuemin": "0",
    "aria-valuemax": "1",
    "aria-valuenow": progress
  }, customProps), /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__determinate-container"
  }, /*#__PURE__*/React.createElement("svg", {
    className: "mdc-circular-progress__determinate-circle-graphic",
    viewBox: `0 0 ${viewBox} ${viewBox}`,
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React.createElement("circle", {
    className: "mdc-circular-progress__determinate-track",
    cx: cxCy,
    cy: cxCy,
    r: r,
    strokeWidth: strokeWidth
  }), /*#__PURE__*/React.createElement("circle", {
    className: "mdc-circular-progress__determinate-circle",
    cx: cxCy,
    cy: cxCy,
    r: r,
    strokeDasharray: strokeDashArray,
    strokeDashoffset: strokeDashoffset,
    strokeWidth: strokeWidth
  }))), /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__indeterminate-container"
  }, /*#__PURE__*/React.createElement("div", {
    className: clsx('mdc-circular-progress__spinner-layer', hasMultipleColors && 'mdc-circular-progress__color-1')
  }, Spinner()), hasMultipleColors && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__spinner-layer mdc-circular-progress__color-2"
  }, Spinner()), /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__spinner-layer mdc-circular-progress__color-3"
  }, Spinner()), /*#__PURE__*/React.createElement("div", {
    className: "mdc-circular-progress__spinner-layer mdc-circular-progress__color-4"
  }, Spinner()))));
});
CircularProgress.displayName = 'CircularProgress';
CircularProgress.propTypes = CircularProgressPropTypes;
CircularProgress.defaultProps = CircularProgressDefaultProps;

export { CircularProgress };
//# sourceMappingURL=index.es.js.map
