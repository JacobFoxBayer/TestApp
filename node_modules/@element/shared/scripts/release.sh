#!/usr/bin/env bash
#
# This script helps to automate the majority of the pre-publish tasks
#

# args with values
SCRIPTS_PATH="$(PWD)/node_modules/@element/shared/scripts"
SOURCE_BRANCH="dev"
TAG_NAME="latest"
VERSION_PREID=""
VERSION_TYPE=""

# local vars
FORMATTED_PREID=""
NEXT_VERSION=""
NEXT_VERSION_BRANCH=""
VERSION_FILE=""
WORKING_DIR=$(pwd)

# flags
BOOTSTRAP=false
BUILD=false
CHANGELOG=false
CHECKOUT_SOURCE=false
CLEANUP_RELEASE_BRANCH=false
CREATE_NEW_BRANCH=false
CREATE_PRS=false
CREATE_VERSION=false
EXIT_TO_SOURCE_BRANCH=false
HELP=false
INIT_ALL=false
LERNA=false
PUBLISH=false
RUN_DOCS=false
RUN_TESTS=false
SYNC_PACKAGES=false
TAG=false
UPDATE_CEREBRO=false
UPDATE_SHARED=false
UPDATE_THEMES=false
VERBOSE=false

# read args & flags
while [[ $# -gt 0 ]]; do
    case $1 in
        #
        # ARGS WITH VALUES
        #

        # the type of versioning to perform (patch, minor, major, prepatch, preminor, premajor, prerelease)
        -v | --version-type)
            VERSION_TYPE=$2
            shift # past argument
            shift # past value
            ;;

        # the path to the script directory
        --scripts-path)
            SCRIPTS_PATH=$2
            shift # past argument
            shift # past value
            ;;

        # the preid to use (alpha, beta, rc, etc)
        --preid)
            VERSION_PREID=$2
            shift # past argument
            shift # past value
            ;;

        # the source branch to use (defaults to dev)
        --source)
            SOURCE_BRANCH=$2
            shift # past argument
            shift # past value
            ;;

        # the tag name to use (latest, alpha, beta, rc, etc)
        --tag-name)
            TAG_NAME=$2
            shift # past argument
            shift # past value
            ;;

        #
        # FLAGS
        #

        # run build command
        --build)
            BUILD=true
            shift # past argument
            ;;

        # initiate `npm run bootstrap` (warning, slow)
        --bootstrap)
            BOOTSTRAP=true
            shift # past argument
            ;;

        # use lerna.json for the version number and lerna commands for versioning, and changelog generation
        --lerna)
            LERNA=true
            shift # past argument
            ;;

        # use lerna.json for the version number and lerna commands for versioning, and changelog generation
        --publish)
            PUBLISH=true
            shift # past argument
            ;;

        # update element/cerebro dependency
        --cerebro)
            UPDATE_CEREBRO=true
            shift # past argument
            ;;

        # initiate `npm run init-all` (warning, very slow)
        --init)
            INIT_ALL=true
            shift # past argument
            ;;

        # update the changelog
        --changelog)
            CHANGELOG=true
            shift # past argument
            ;;

        # cleanup release branch
        --cleanup)
            CLEANUP_RELEASE_BRANCH=true
            shift # past argument
            ;;

        # update element/shared dependency
        --shared)
            UPDATE_SHARED=true
            shift # past argument
            ;;

        # checkout and pull latest from source branch (dev by default)
        --checkout-source)
            CHECKOUT_SOURCE=true
            shift # past argument
            ;;

        # create a new branch
        --create-branch)
            CREATE_NEW_BRANCH=true
            shift # past argument
            ;;

        # update element/themes dependency
        --themes)
            UPDATE_THEMES=true
            shift # past argument
            ;;

        # run `docs` script (cerebro)
        --docs)
            RUN_DOCS=true
            shift # past argument
            ;;

        # create a new version
        --create-version)
            CREATE_VERSION=true
            shift # past argument
            ;;

        # run unit tests
        --tests)
            RUN_TESTS=true
            shift # past argument
            ;;

        # run package sync command to ensure all dependencies match
        --sync)
            SYNC_PACKAGES=true
            shift # past argument
            ;;

        # create prs
        --create-prs)
            CREATE_PRS=true
            shift # past argument
            ;;

        #  checkout the starting branch (default dev) after release
        --exit-to-source-branch)
            EXIT_TO_SOURCE_BRANCH=true
            shift # past argument
            ;;

        # do not switch back to dev after release
        --tag)
            TAG=true
            shift # past argument
            ;;

        # print help docs
        -h | --help)
            HELP=true
            shift # past argument
            ;;

        # display internal variables for troubleshooting
        --verbose)
            VERBOSE=true
            shift # past argument
            ;;

        # catch alls
        -* | --*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift                   # past argument
            ;;
    esac
done

if [ $HELP = true ]; then
    sh "$SCRIPTS_PATH/release-help.sh"
    exit 0
fi

echo 'Element Automated Release Activities'

if [ $VERBOSE = true ]; then
    echo "  \$BOOTSTRAP: $BOOTSTRAP"
    echo "  \$BUILD: $BUILD"
    echo "  \$CHANGELOG: $CHANGELOG"
    echo "  \$CHECKOUT_SOURCE: $CHECKOUT_SOURCE"
    echo "  \$CLEANUP_RELEASE_BRANCH: $CLEANUP_RELEASE_BRANCH"
    echo "  \$CREATE_NEW_BRANCH: $CREATE_NEW_BRANCH"
    echo "  \$CREATE_PRS: $CREATE_PRS"
    echo "  \$CREATE_VERSION: $CREATE_VERSION"
    echo "  \$EXIT_TO_SOURCE_BRANCH: $EXIT_TO_SOURCE_BRANCH"
    echo "  \$INIT_ALL: $INIT_ALL"
    echo "  \$LERNA: $LERNA"
    echo "  \$PUBLISH: $PUBLISH"
    echo "  \$RUN_DOCS: $RUN_DOCS"
    echo "  \$RUN_TESTS: $RUN_TESTS"
    echo "  \$SCRIPTS_PATH: $SCRIPTS_PATH"
    echo "  \$SOURCE_BRANCH: $SOURCE_BRANCH"
    echo "  \$SYNC_PACKAGES: $SYNC_PACKAGES"
    echo "  \$TAG: $TAG"
    echo "  \$TAG_NAME: $TAG_NAME"
    echo "  \$UPDATE_CEREBRO: $UPDATE_CEREBRO"
    echo "  \$UPDATE_SHARED: $UPDATE_SHARED"
    echo "  \$UPDATE_THEMES: $UPDATE_THEMES"
    echo "  \$VERSION_PREID: $VERSION_PREID"
    echo "  \$VERSION_TYPE: $VERSION_TYPE"
    echo "  \$WORKING_DIR: $WORKING_DIR"
fi

if [ $CHECKOUT_SOURCE = true ]; then
    echo 'getting latest from dev'
    git checkout "$SOURCE_BRANCH"
    git pull
fi

if [ $LERNA = true ]; then
    VERSION_FILE="$WORKING_DIR/lerna.json"
else
    VERSION_FILE="$WORKING_DIR/package.json"
fi

if [ $CREATE_VERSION = true ]; then
    NEXT_VERSION=$(node "$SCRIPTS_PATH/getVersion.js" file="$VERSION_FILE" type="$VERSION_TYPE" preid="$VERSION_PREID")
else
    NEXT_VERSION=$(node "$SCRIPTS_PATH/getVersion.js" file="$VERSION_FILE" type="current")
fi

if [ -n "$VERSION_PREID" ]; then
    FORMATTED_PREID="--preid $VERSION_PREID"
fi

NEXT_VERSION_BRANCH="release-$VERSION_TYPE-$NEXT_VERSION"

if [ $VERBOSE = true ]; then
    echo "  \$FORMATTED_PREID: $FORMATTED_PREID"
    echo "  \$NEXT_VERSION: $NEXT_VERSION"
    echo "  \$NEXT_VERSION_BRANCH: $NEXT_VERSION_BRANCH"
    echo "  \$VERSION_FILE: $VERSION_FILE"
fi

if [ $UPDATE_SHARED = true ]; then
    echo 'updating element/shared'
    npm i @element/shared@latest
fi

if [ $UPDATE_THEMES = true ]; then
    echo 'updating element/themes'
    npm i @element/themes@latest
fi

if [ $UPDATE_CEREBRO = true ]; then
    echo 'updating element/cerebro'
    npm i @element/cerebro@latest -D
fi

if [ $SYNC_PACKAGES = true ]; then
    echo 'running sync'
    npm run sync
fi

if [ $RUN_DOCS = true ]; then
    echo 'running docs'
    npm run docs
fi

if [ $INIT_ALL = true ]; then
    echo 'running init-all'
    npm run init-all
fi

if [ $BOOTSTRAP = true ]; then
    echo 'running bootstrap'
    npm run bootstrap:ci
fi

if [ $BUILD = true ]; then
    echo 'running build'
    npm run build
fi

if [ $RUN_TESTS = true ]; then
    echo 'running unit tests'
    npm run test
fi

if [ $CREATE_NEW_BRANCH = true ]; then
    echo "creating new branch $NEXT_VERSION_BRANCH"
    git checkout -B "$NEXT_VERSION_BRANCH"
    git commit -am 'chore(Release): automated release activities' --no-verify
    git push -u origin HEAD --no-verify
fi

if [ $CREATE_VERSION = true ]; then
    echo 'running version all'

    if [ $LERNA = true ]; then
        lerna version $VERSION_TYPE --conventional-commits --yes --force-git-tag $FORMATTED_PREID
    else
        npm version $VERSION_TYPE --yes $FORMATTED_PREID

        if [ $CHANGELOG = true ]; then
            npm run changelog
        fi
    fi
fi

if [ $CREATE_NEW_BRANCH = true ]; then
    echo 'final git push'
    git push --follow-tags --no-verify
fi

if [ $CREATE_PRS = true ]; then
    echo 'create pull requests'
    gh pr create -B dev -t "$NEXT_VERSION_BRANCH" -b "$NEXT_VERSION_BRANCH"

    # Be sure to merge the release branch into dev before merging dev to main
    gh pr create -B main -t "Merge dev to main $NEXT_VERSION_BRANCH" -b 'Be sure to merge the release branch into dev before merging dev to main' -H dev
fi

if [ $PUBLISH = true ]; then
    if [ $LERNA = true ]; then
        echo 'running publish all'
        lerna exec --no-private -- npm publish
    else
        npm publish
    fi
fi

if [ $TAG = true ]; then
    echo "running tag-$TAG_NAME"
    ELEMENT_PACKAGE_VERSION="5.0.0-beta.$VERSION" ELEMENT_TAG="$TAG_NAME" npm run tag
fi

if [ $EXIT_TO_SOURCE_BRANCH = true ]; then
    echo "switching back to $SOURCE_BRANCH"
    git checkout "$SOURCE_BRANCH"

    if [ $CLEANUP_RELEASE_BRANCH = true ]; then
        echo 'cleaning up release branch'
        git branch --delete --force "$NEXT_VERSION_BRANCH"
    fi

fi
