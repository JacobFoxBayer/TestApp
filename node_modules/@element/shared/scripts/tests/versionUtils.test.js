/* eslint-disable no-undef */
const childProcess = require('child_process');

const runScript = (type, version, preid) => {
    const child = childProcess.spawnSync(
        'node',
        [
            `./scripts/getVersion.js`,
            `type=${type}`,
            `file=./tests/${version}.json`,
            preid && `preid=${preid}`
        ],
        { encoding: 'utf8' }
    );

    return child.stdout.trim();
};

describe('Version Utilities', () => {
    describe('patch', () => {
        it('will return `1.0.1` when version is `1.0.0`', () => {
            const expected = '1.0.1';
            const output = runScript('patch', '1.0.0');
            expect(output).toBe(expected);
        });

        it('will return `1.1.2` when version is `1.1.1`', () => {
            const expected = '1.1.2';
            const output = runScript('patch', '1.1.1');
            expect(output).toBe(expected);
        });

        it('will return `1.0.0` when version is `1.0.0-alpha.1`', () => {
            const expected = '1.0.0';
            const output = runScript('patch', '1.0.0-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.1.1` when version is `1.1.1-alpha.1`', () => {
            const expected = '1.1.1';
            const output = runScript('patch', '1.1.1-alpha.1');
            expect(output).toBe(expected);
        });
    });

    describe('minor', () => {
        it('will return `1.1.0` when version is `1.0.0`', () => {
            const expected = '1.1.0';
            const output = runScript('minor', '1.0.0');
            expect(output).toBe(expected);
        });

        it('will return `1.2.0` when version is `1.1.1`', () => {
            const expected = '1.2.0';
            const output = runScript('minor', '1.1.1');
            expect(output).toBe(expected);
        });

        it('will return `1.0.0` when version is `1.0.0-alpha.1`', () => {
            const expected = '1.0.0';
            const output = runScript('minor', '1.0.0-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.2.0` when version is `1.1.1-alpha.1`', () => {
            const expected = '1.2.0';
            const output = runScript('minor', '1.1.1-alpha.1');
            expect(output).toBe(expected);
        });
    });

    describe('major', () => {
        it('will return `2.0.0` when version is `1.0.0`', () => {
            const expected = '2.0.0';
            const output = runScript('major', '1.0.0');
            expect(output).toBe(expected);
        });

        it('will return `2.0.0` when version is `1.1.1`', () => {
            const expected = '2.0.0';
            const output = runScript('major', '1.1.1');
            expect(output).toBe(expected);
        });

        it('will return `1.0.0` when version is `1.0.0-alpha.1`', () => {
            const expected = '1.0.0';
            const output = runScript('major', '1.0.0-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `2.0.0` when version is `1.1.1-alpha.1`', () => {
            const expected = '2.0.0';
            const output = runScript('major', '1.1.1-alpha.1');
            expect(output).toBe(expected);
        });
    });

    describe.only('prerelease', () => {
        it('will return `1.0.0-alpha.0` when version is `1.0.0`', () => {
            const expected = '1.0.0-alpha.0';
            const output = runScript('prerelease', '1.0.0');
            expect(output).toBe(expected);
        });

        it('will return `1.1.1-alpha.0` when version is `1.1.1`', () => {
            const expected = '1.1.1-alpha.0';
            const output = runScript('prerelease', '1.1.1');
            expect(output).toBe(expected);
        });

        it('will return `1.0.0-alpha.2` when version is `1.0.0-alpha.1`', () => {
            const expected = '1.0.0-alpha.2';
            const output = runScript('prerelease', '1.0.0-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.1.1-alpha.2` when version is `1.1.1-alpha.1`', () => {
            const expected = '1.1.1-alpha.2';
            const output = runScript('prerelease', '1.1.1-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.1.1-beta.0` when version is `1.1.1-alpha.1` and preid is `beta`', () => {
            const expected = '1.1.1-beta.0';
            const output = runScript('prerelease', '1.1.1-alpha.1', 'beta');
            expect(output).toBe(expected);
        });

        it('will return `1.1.1-beta.2` when version is `1.1.1-beta.1`', () => {
            const expected = '1.1.1-beta.2';
            const output = runScript('prerelease', '1.1.1-beta.1');
            expect(output).toBe(expected);
        });
    });

    describe('preminor', () => {
        it('will return `1.1.0-alpha.0` when version is `1.0.0`', () => {
            const expected = '1.1.0-alpha.0';
            const output = runScript('preminor', '1.0.0');
            expect(output).toBe(expected);
        });

        it('will return `1.2.0-alpha.0` when version is `1.1.1`', () => {
            const expected = '1.2.0-alpha.0';
            const output = runScript('preminor', '1.1.1');
            expect(output).toBe(expected);
        });

        it('will return `1.1.0-alpha.0` when version is `1.0.0-alpha.1`', () => {
            const expected = '1.1.0-alpha.0';
            const output = runScript('preminor', '1.0.0-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.2.0-alpha.0` when version is `1.1.1-alpha.1`', () => {
            const expected = '1.2.0-alpha.0';
            const output = runScript('preminor', '1.1.1-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.2.0-beta.0` when version is `1.1.1-alpha.1` and preid is `beta`', () => {
            const expected = '1.2.0-beta.0';
            const output = runScript('preminor', '1.1.1-alpha.1', 'beta');
            expect(output).toBe(expected);
        });
    });

    describe('prepatch', () => {
        it('will return `1.0.1-alpha.0` when version is `1.0.0`', () => {
            const expected = '1.0.1-alpha.0';
            const output = runScript('prepatch', '1.0.0');
            expect(output).toBe(expected);
        });

        it('will return `1.1.2-alpha.0` when version is `1.1.1`', () => {
            const expected = '1.1.2-alpha.0';
            const output = runScript('prepatch', '1.1.1');
            expect(output).toBe(expected);
        });

        it('will return `1.0.1-alpha.0` when version is `1.0.0-alpha.1`', () => {
            const expected = '1.0.1-alpha.0';
            const output = runScript('prepatch', '1.0.0-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.1.2-alpha.0` when version is `1.1.1-alpha.1`', () => {
            const expected = '1.1.2-alpha.0';
            const output = runScript('prepatch', '1.1.1-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `1.1.2-beta.0` when version is `1.1.1-alpha.1` and preid is `beta`', () => {
            const expected = '1.1.2-beta.0';
            const output = runScript('prepatch', '1.1.1-alpha.1', 'beta');
            expect(output).toBe(expected);
        });
    });

    describe('premajor', () => {
        it('will return `2.0.0-alpha.0` when version is `1.0.0`', () => {
            const expected = '2.0.0-alpha.0';
            const output = runScript('premajor', '1.0.0');
            expect(output).toBe(expected);
        });

        it('will return `2.0.0-alpha.0` when version is `1.1.1`', () => {
            const expected = '2.0.0-alpha.0';
            const output = runScript('premajor', '1.1.1');
            expect(output).toBe(expected);
        });

        it('will return `2.0.0-alpha.0` when version is `1.0.0-alpha.1`', () => {
            const expected = '2.0.0-alpha.0';
            const output = runScript('premajor', '1.0.0-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `2.0.0-alpha.0` when version is `1.1.1-alpha.1`', () => {
            const expected = '2.0.0-alpha.0';
            const output = runScript('premajor', '1.1.1-alpha.1');
            expect(output).toBe(expected);
        });

        it('will return `2.0.0-beta.0` when version is `1.1.1-alpha.1` and preid is `beta`', () => {
            const expected = '2.0.0-beta.0';
            const output = runScript('premajor', '1.1.1-alpha.1', 'beta');
            expect(output).toBe(expected);
        });
    });
});
