/* eslint-disable global-require */
/* eslint-disable import/no-dynamic-require */

const getParam = (args, param) => {
    const arg = args.find(x => x.includes(`${param}=`));
    if (!arg) return null;
    return arg.split('=')[1];
};

const getCurrentVersion = file => {
    try {
        return require(file || '../../package.json').version;
    } catch {
        return 'unknown-file';
    }
};

const getNumeric = version => version.split('-')[0].split('.').map(Number);

const getPre = currentVersion => {
    if (currentVersion.indexOf('-') === -1) return null;
    return currentVersion.split('-')[1];
};

const getNextMajorVersion = currentVersion => {
    const pre = getPre(currentVersion);
    const numeric = getNumeric(currentVersion);
    // handle graduating prerelease
    if (pre && numeric[1] === 0 && numeric[2] === 0) return numeric.join('.');
    numeric[0] += 1;
    numeric[1] = 0;
    numeric[2] = 0;
    return numeric.join('.');
};

const getNextMinorVersion = currentVersion => {
    const pre = getPre(currentVersion);
    const numeric = getNumeric(currentVersion);
    // handle graduating prerelease
    if (pre && numeric[2] === 0) return numeric.join('.');
    numeric[1] += 1;
    numeric[2] = 0;
    return numeric.join('.');
};

const getNextPatchVersion = currentVersion => {
    const pre = getPre(currentVersion);
    const numeric = getNumeric(currentVersion);
    // handle graduating prerelease
    if (pre) return numeric.join('.');
    numeric[2] += 1;
    return numeric.join('.');
};

const getNextPreMajorVersion = (currentVersion, preid) => {
    const numeric = getNumeric(currentVersion);
    const nextNumeric = getNextMajorVersion(numeric.join('.'));
    return `${nextNumeric}-${preid || 'alpha'}.0`;
};

const getNextPreMinorVersion = (currentVersion, preid) => {
    const numeric = getNumeric(currentVersion);
    const nextNumeric = getNextMinorVersion(numeric.join('.'));
    return `${nextNumeric}-${preid || 'alpha'}.0`;
};

const getNextPrePatchVersion = (currentVersion, preid) => {
    const numeric = getNumeric(currentVersion);
    const nextNumeric = getNextPatchVersion(numeric.join('.'));
    return `${nextNumeric}-${preid || 'alpha'}.0`;
};

const getExistingPreId = currentVersion => {
    if (currentVersion.indexOf('-') > -1)
        return currentVersion.split('-')[1].split('.')[0];
    return undefined;
};

const getNextPreReleaseVersion = (currentVersion, preid) => {
    const nextPreid = preid || getExistingPreId(currentVersion) || 'alpha';
    const pre = getPre(currentVersion);
    const numeric = getNumeric(currentVersion);
    if (!pre || pre.indexOf(nextPreid) === -1)
        return `${numeric.join('.')}-${nextPreid}.0`;
    const preNum = Number(pre.split('.')[1]);
    return `${numeric.join('.')}-${nextPreid}.${preNum + 1}`;
};

module.exports = {
    getParam,
    getCurrentVersion,
    getNextMinorVersion,
    getNextMajorVersion,
    getNextPatchVersion,
    getNextPreMinorVersion,
    getNextPreMajorVersion,
    getNextPrePatchVersion,
    getNextPreReleaseVersion
};
