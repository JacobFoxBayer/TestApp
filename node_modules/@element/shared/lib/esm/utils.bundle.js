import _concatInstanceProperty from '@babel/runtime-corejs3/core-js-stable/instance/concat';
import warning from 'warning';
import { nanoid } from 'nanoid';
import merge from 'lodash/merge';

var warned$1 = {}; // Example borrowed from https://reactjs.org/warnings/dont-call-proptypes.html#fixing-the-false-positive-in-third-party-proptypes

function deprecated(component, explanation) {
  var _context;

  var message = _concatInstanceProperty(_context = "\"".concat(component, "\" has been deprecated.\n")).call(_context, explanation);

  if (!warned$1[message]) {
    warning(false, message);
    warned$1[message] = true;
  }
}

var getElementNotFoundWarning = function getElementNotFoundWarning(selector) {
  return "".concat(selector, " element was not found in the DOM.");
};
var getInvalidSelectorWarning = function getInvalidSelectorWarning(selector) {
  return "".concat(selector, " is not a valid selector.");
};
var warned = {};
function edsWarning(message) {
  if (!warned[message]) {
    warning(false, message);
    warned[message] = true;
  }
}

var queryCheck = function queryCheck(selector) {
  return document.createDocumentFragment().querySelector(selector);
};
var isSelectorValid = function isSelectorValid(selector) {
  try {
    queryCheck(selector);
  } catch (_unused) {
    return false;
  }

  return true;
};
var edsQuerySelector = function edsQuerySelector(selector) {
  if (isSelectorValid(selector)) {
    return document.querySelector(selector) || edsWarning(getElementNotFoundWarning(selector));
  }

  edsWarning(getInvalidSelectorWarning(selector));
  return false;
};

var edsRandomId = function edsRandomId() {
  return "eds-".concat(nanoid(5));
};

var mergeDeep = function mergeDeep(a, b) {
  return merge(a, b);
};

/* eslint-disable import/prefer-default-export */
var getListVariant = function getListVariant(item, groupNameKey, categoryNameKey) {
  if (item[groupNameKey]) return 'group';
  if (item[categoryNameKey]) return 'category';
  return 'standard';
};
var getRole = function getRole(_ref) {
  var nonInteractive = _ref.nonInteractive,
      leadingBlockType = _ref.leadingBlockType,
      trailingBlockType = _ref.trailingBlockType,
      role = _ref.role;
  if (nonInteractive) return undefined;
  if (leadingBlockType === 'checkbox' || trailingBlockType === 'checkbox' || leadingBlockType === 'switch' || trailingBlockType === 'switch') return 'group';
  if (leadingBlockType === 'radio' || trailingBlockType === 'radio') return 'radiogroup';
  return role;
};
var getSelectedItemIndex = function getSelectedItemIndex(groupIndex, categoryIndex, roleToUse, selected, singleList) {
  if (roleToUse === 'group' || Array.isArray(selected)) {
    var selectedIndexes = []; // eslint-disable-next-line consistent-return

    selected === null || selected === void 0 ? void 0 : selected.forEach(function (s) {
      if (s.selectedCategoryIndex || s.selectedCategoryIndex === 0) {
        if (s.selectedCategoryIndex === categoryIndex && s.selectedGroupIndex === groupIndex) {
          selectedIndexes.push(s.selectedIndex);
        }
      } else if (s.selectedGroupIndex === groupIndex) {
        selectedIndexes.push(s.selectedIndex);
      }
    });
    return selectedIndexes;
  }

  if (selected !== null && selected !== void 0 && selected.selectedCategoryIndex || (selected === null || selected === void 0 ? void 0 : selected.selectedCategoryIndex) === 0) {
    if ((selected === null || selected === void 0 ? void 0 : selected.selectedCategoryIndex) === categoryIndex && (selected === null || selected === void 0 ? void 0 : selected.selectedGroupIndex) === groupIndex) {
      return selected === null || selected === void 0 ? void 0 : selected.selectedIndex;
    }

    return -1;
  }

  if (singleList && (selected === null || selected === void 0 ? void 0 : selected.selectedGroupIndex) === groupIndex) {
    return selected === null || selected === void 0 ? void 0 : selected.selectedIndex;
  }

  if (!singleList && (selected === null || selected === void 0 ? void 0 : selected.selectedGroupIndex) === groupIndex) {
    return selected === null || selected === void 0 ? void 0 : selected.selectedIndex;
  }

  return -1;
};
var isInViewport = function isInViewport(element) {
  var rect = element.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
};

export { deprecated as deprecatedComponent, edsQuerySelector, edsRandomId, edsWarning, getElementNotFoundWarning, getInvalidSelectorWarning, getListVariant, getRole, getSelectedItemIndex, isInViewport, isSelectorValid, mergeDeep, queryCheck };
//# sourceMappingURL=utils.bundle.js.map
