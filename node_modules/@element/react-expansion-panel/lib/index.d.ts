import React from 'react';


export interface ExpansionContentProps {
    /**
    * Content to be rendered inside the banner. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The content will display in the open (visible) state by default. If the ExpansionPanel is set to `accordion`, only the first item will be visible if more than one ExpansionContent is marked as open by default.
    *
    * Defaults to **false**.
    */
    defaultOpen?: boolean;
    /**
    * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
    *
    * Defaults to **null**.
    */
    expansionId: string | number;
    /**
    * Optionally override the automatically calculated content height. Must be specified in px.
    *
    * Defaults to **undefined**.
    */
    maxHeight?: string;
    /**
    * For explicit control of the open state.
    *
    * Defaults to **undefined**.
    */
    open?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * The root content HtmlElement. Expects a block element that can receive a height (spans will not work). If set to null, no HtmlElement will be inserted and the class and style properties will be added to the first child (this is for backwards compatibility.)
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
}

/**
* Expansion panels are containers that can be connected to a larger surface, such as a content block or card, or can live within a list. They contain information and actions that are not essential to exist at the highest level of the user interface of an application.
 * @prop {React.ReactNode} children - Content to be rendered inside the banner. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} defaultOpen - The content will display in the open (visible) state by default. If the ExpansionPanel is set to `accordion`, only the first item will be visible if more than one ExpansionContent is marked as open by default. Defaults to _false_.
 * @prop {string|number} expansionId - The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon. Defaults to _null_.
 * @prop {string} maxHeight - Optionally override the automatically calculated content height. Must be specified in px. Defaults to _undefined_.
 * @prop {boolean} open - For explicit control of the open state. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - The root content HtmlElement. Expects a block element that can receive a height (spans will not work). If set to null, no HtmlElement will be inserted and the class and style properties will be added to the first child (this is for backwards compatibility.) Defaults to _'div'_.
*/
export const ExpansionContent: React.FunctionComponent<ExpansionContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ExpansionIconProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * For explicit control of the icon's toggle state.
    *
    * Defaults to **undefined**.
    */
    expanded?: boolean;
    /**
    * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
    *
    * Defaults to **null**.
    */
    expansionId: string | number;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with moreIcon.
    *
    * Defaults to **'expand_less'**.
    */
    lessIcon?: string | React.ReactNode;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with lessIcon.
    *
    * Defaults to **'expand_more'**.
    */
    moreIcon?: string | React.ReactNode;
}

/**
* The ExpansionIcon is a visual indicator that will toggle between two specified icons as a panel is opened or closed.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} expanded - For explicit control of the icon's toggle state. Defaults to _undefined_.
 * @prop {string|number} expansionId - The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon. Defaults to _null_.
 * @prop {string|React.ReactNode} lessIcon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with moreIcon. Defaults to _'expand_less'_.
 * @prop {string|React.ReactNode} moreIcon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with lessIcon. Defaults to _'expand_more'_.
*/
export const ExpansionIcon: React.FunctionComponent<ExpansionIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ExpansionPanelProps {
    /**
    * Only one panel will be open at a time
    *
    * Defaults to **false**.
    */
    accordion?: boolean;
    /**
    * Content to be rendered. Expected to be ExpansionTrigger or ExpansionContent, though any other valid components or markup may be used.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Fired when a trigger is clicked and the content is contracted. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
    */
    onContract?: Function;
    /**
    * Fired when a trigger is clicked and the content is expanded. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
    */
    onExpand?: Function;
}

/**
* Expansion panels are containers that can be connected to a larger surface, such as a content block or card, or can live within a list. They contain information and actions that are not essential to exist at the highest level of the user interface of an application. ExpansionPanels require ExpansionTrigger and ExpansionContent sub-component to be used. The ExpansionIcon indicator may optionally be used.
 * @prop {boolean} accordion - Only one panel will be open at a time Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered. Expected to be ExpansionTrigger or ExpansionContent, though any other valid components or markup may be used. Defaults to _null_.
 *  @event onContract - Fired when a trigger is clicked and the content is contracted. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
 *  @event onExpand - Fired when a trigger is clicked and the content is expanded. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
*/
export const ExpansionPanel: React.FunctionComponent<ExpansionPanelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ExpansionTriggerProps {
    /**
    * Most typically a Button, IconButton or similar clickable component.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the trigger from being activated.
    *
    * Defaults to **false**.
    */
    disabled: boolean;
    /**
    * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
    *
    * Defaults to **null**.
    */
    expansionId: string | number;
    /**
    * The trigger container element. If set to null, no HtmlElement will be inserted and the css class will be added to the first child (this is for backwards compatibility.)
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Will be fired when the trigger is clicked. Returns the `expansionId` and open state.
    */
    onClick?: Function;
    /**
    * Will be fired when the content panel is contracted. Returns `expansionId` and open state.
    */
    onContract?: Function;
    /**
    * Will be fired when the content panel is expanded. Returns `expansionId` and open state.
    */
    onExpand?: Function;
}

/**
* ExpansionTrigger is required to open and close an expansion panel. It accepts a button or other clickable components or markup.
 * @prop {React.ReactNode} children - Most typically a Button, IconButton or similar clickable component. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the trigger from being activated. Defaults to _false_.
 * @prop {string|number} expansionId - The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon. Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - The trigger container element. If set to null, no HtmlElement will be inserted and the css class will be added to the first child (this is for backwards compatibility.) Defaults to _'div'_.
 *  @event onClick - Will be fired when the trigger is clicked. Returns the `expansionId` and open state.
 *  @event onContract - Will be fired when the content panel is contracted. Returns `expansionId` and open state.
 *  @event onExpand - Will be fired when the content panel is expanded. Returns `expansionId` and open state.
*/
export const ExpansionTrigger: React.FunctionComponent<ExpansionTriggerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
