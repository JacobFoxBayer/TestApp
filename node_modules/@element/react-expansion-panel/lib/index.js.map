{"version":3,"file":"index.js","sources":["../ExpansionPanelContext.js","../generated/propTypes.js","../ExpansionContent.js","../ExpansionIcon.js","../ExpansionPanel.js","../ExpansionTrigger.js"],"sourcesContent":["import { createContext } from 'react';\n\nconst ExpansionPanelContext = createContext({\n    openStates: {},\n    toggleOpenState: () => {},\n    isOpen: () => {}\n});\n\nexport default ExpansionPanelContext;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n *\n * This file is automatically generated by the Element\n * documentation system. Any modifications to this file\n * will be overwritten!\n *\n */\n\nexport const ExpansionPanelPropTypes = {\n  /**\n   * Only one panel will be open at a time\n   *\n   * Defaults to **false**.\n   */\n  accordion: PropTypes.bool,\n  /**\n   * Content to be rendered. Expected to be ExpansionTrigger or ExpansionContent, though any other valid components or markup may be used.\n   *\n   * Defaults to **null**.\n   */\n  children: PropTypes.node,\n  /**\n   * Fired when a trigger is clicked and the content is contracted. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId\n   *\n   * Defaults to **null**.\n   */\n  onContract: PropTypes.func,\n  /**\n   * Fired when a trigger is clicked and the content is expanded. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId\n   *\n   * Defaults to **null**.\n   */\n  onExpand: PropTypes.func,\n};\n\nexport const ExpansionPanelDefaultProps = {\n  accordion: false,\n  children: null,\n};\n\n/**\n *\n * This file is automatically generated by the Element\n * documentation system. Any modifications to this file\n * will be overwritten!\n *\n */\n\nexport const ExpansionContentPropTypes = {\n  /**\n   * Content to be rendered inside the banner. Accepts any valid markup.\n   *\n   * Defaults to **null**.\n   */\n  children: PropTypes.node.isRequired,\n  /**\n   * The css class name to be passed through to the component markup.\n   *\n   * Defaults to **undefined**.\n   */\n  className: PropTypes.string,\n  /**\n   * The content will display in the open (visible) state by default. If the ExpansionPanel is set to `accordion`, only the first item will be visible if more than one ExpansionContent is marked as open by default.\n   *\n   * Defaults to **false**.\n   */\n  defaultOpen: PropTypes.bool,\n  /**\n   * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.\n   *\n   * Defaults to **null**.\n   */\n  expansionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  /**\n   * Optionally override the automatically calculated content height. Must be specified in px.\n   *\n   * Defaults to **undefined**.\n   */\n  maxHeight: PropTypes.string,\n  /**\n   * For explicit control of the open state.\n   *\n   * Defaults to **undefined**.\n   */\n  open: PropTypes.bool,\n  /**\n   * Passthrough style object.\n   *\n   * Defaults to **null**.\n   */\n  style: PropTypes.object,\n  /**\n   * The root content HtmlElement. Expects a block element that can receive a height (spans will not work). If set to null, no HtmlElement will be inserted and the class and style properties will be added to the first child (this is for backwards compatibility.)\n   *\n   * Defaults to **'div'**.\n   */\n  tag: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.elementType,\n    PropTypes.instanceOf(React.Component),\n  ]),\n};\n\nexport const ExpansionContentDefaultProps = {\n  children: null,\n  className: undefined,\n  defaultOpen: false,\n  expansionId: null,\n  maxHeight: undefined,\n  open: undefined,\n  style: null,\n  tag: \"div\",\n};\n\n/**\n *\n * This file is automatically generated by the Element\n * documentation system. Any modifications to this file\n * will be overwritten!\n *\n */\n\nexport const ExpansionIconPropTypes = {\n  /**\n   * The css class name to be passed through to the component markup.\n   *\n   * Defaults to **undefined**.\n   */\n  className: PropTypes.string,\n  /**\n   * For explicit control of the icon's toggle state.\n   *\n   * Defaults to **undefined**.\n   */\n  expanded: PropTypes.bool,\n  /**\n   * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.\n   *\n   * Defaults to **null**.\n   */\n  expansionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  /**\n   * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with moreIcon.\n   *\n   * Defaults to **'expand_less'**.\n   */\n  lessIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  /**\n   * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with lessIcon.\n   *\n   * Defaults to **'expand_more'**.\n   */\n  moreIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n};\n\nexport const ExpansionIconDefaultProps = {\n  className: undefined,\n  expanded: undefined,\n  expansionId: null,\n  lessIcon: \"expand_less\",\n  moreIcon: \"expand_more\",\n};\n\n/**\n *\n * This file is automatically generated by the Element\n * documentation system. Any modifications to this file\n * will be overwritten!\n *\n */\n\nexport const ExpansionTriggerPropTypes = {\n  /**\n   * Most typically a Button, IconButton or similar clickable component.\n   *\n   * Defaults to **null**.\n   */\n  children: PropTypes.node,\n  /**\n   * The css class name to be passed through to the component markup.\n   *\n   * Defaults to **undefined**.\n   */\n  className: PropTypes.string,\n  /**\n   * Prevent the trigger from being activated.\n   *\n   * Defaults to **false**.\n   */\n  disabled: PropTypes.bool.isRequired,\n  /**\n   * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.\n   *\n   * Defaults to **null**.\n   */\n  expansionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  /**\n   * Will be fired when the trigger is clicked. Returns the `expansionId` and open state.\n   *\n   * Defaults to **null**.\n   */\n  onClick: PropTypes.func,\n  /**\n   * Will be fired when the content panel is contracted. Returns `expansionId` and open state.\n   *\n   * Defaults to **null**.\n   */\n  onContract: PropTypes.func,\n  /**\n   * Will be fired when the content panel is expanded. Returns `expansionId` and open state.\n   *\n   * Defaults to **null**.\n   */\n  onExpand: PropTypes.func,\n  /**\n   * The trigger container element. If set to null, no HtmlElement will be inserted and the css class will be added to the first child (this is for backwards compatibility.)\n   *\n   * Defaults to **'div'**.\n   */\n  tag: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.elementType,\n    PropTypes.instanceOf(React.Component),\n  ]),\n};\n\nexport const ExpansionTriggerDefaultProps = {\n  children: null,\n  className: undefined,\n  disabled: false,\n  expansionId: null,\n  tag: \"div\",\n};\n","import React, {\n    forwardRef,\n    useContext,\n    useEffect,\n    useImperativeHandle,\n    useRef,\n    useState\n} from 'react';\nimport clsx from 'clsx';\nimport { addProps } from '@element/react-common';\nimport ExpansionPanelContext from './ExpansionPanelContext';\nimport {\n    ExpansionContentDefaultProps,\n    ExpansionContentPropTypes\n} from './generated/propTypes';\n\nconst getRefHeight = ref => ref?.current?.firstChild?.offsetHeight;\n\nconst ExpansionContent = forwardRef((props, externalRef) => {\n    const {\n        children,\n        className,\n        defaultOpen,\n        expansionId,\n        maxHeight,\n        open,\n        style = {},\n        tag,\n        ...customProps\n    } = props;\n    const ref = useRef();\n    const context = useContext(ExpansionPanelContext);\n    const { isOpen, toggleOpenState } = context;\n\n    const Tag = tag;\n    const openActual = open || isOpen(expansionId);\n\n    // Track the last known height to avoid a situation where the Expansion Panel gets hidden and loses it's \"height\", appearing closed\n    const [lastKnownRefHeight, setLastKnownRefHeight] = useState(\n        getRefHeight(ref)\n    );\n\n    // check for height on open and when the children change\n    useEffect(() => {\n        const refHeight = getRefHeight(ref);\n        if (refHeight > 0) setLastKnownRefHeight(refHeight);\n    }, [openActual, children]);\n\n    const getMaxHeight = () =>\n        openActual ? maxHeight || `${lastKnownRefHeight}px` : '0px';\n\n    useImperativeHandle(externalRef, () => ({\n        component: ref.current,\n        rerender: () => {\n            toggleOpenState(expansionId);\n            toggleOpenState(expansionId);\n        }\n    }));\n\n    useEffect(() => {\n        if (!defaultOpen) return;\n        toggleOpenState(expansionId);\n        // This dependency array is explicitly left blank! Otherwise we get an endless loop.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const expansionProps = {\n        ref,\n        className: clsx('lmnt-expansion-panel__content', className),\n        style: { overflow: 'hidden', maxHeight: getMaxHeight(), ...style },\n        ...customProps\n    };\n\n    if (!tag) {\n        return addProps(children, expansionProps);\n    }\n    return (\n        <Tag {...expansionProps} {...customProps}>\n            <div className='lmnt-expansion-panel__content-inner'>\n                {children}\n            </div>\n        </Tag>\n    );\n});\n\nExpansionContent.displayName = 'ExpansionContent';\nExpansionContent.propTypes = ExpansionContentPropTypes;\nExpansionContent.defaultProps = ExpansionContentDefaultProps;\n\nexport default ExpansionContent;\n","import React, { forwardRef, useContext } from 'react';\nimport { Icon } from '@element/react-icon';\nimport ExpansionPanelContext from './ExpansionPanelContext';\nimport {\n    ExpansionIconDefaultProps,\n    ExpansionIconPropTypes\n} from './generated/propTypes';\n\nconst ExpansionIcon = forwardRef((props, externalRef) => {\n    const {\n        className,\n        expanded,\n        expansionId,\n        lessIcon,\n        moreIcon,\n        ...customProps\n    } = props;\n    const context = useContext(ExpansionPanelContext);\n    const { isOpen } = context;\n    const isExpanded = expanded || isOpen(expansionId);\n\n    return (\n        <Icon\n            ref={externalRef}\n            icon={isExpanded ? lessIcon : moreIcon}\n            className={className}\n            {...customProps}\n        />\n    );\n});\n\nExpansionIcon.displayName = 'ExpansionIcon';\nExpansionIcon.propTypes = ExpansionIconPropTypes;\nExpansionIcon.defaultProps = ExpansionIconDefaultProps;\n\nexport default ExpansionIcon;\n","import React, { useCallback, useState, useMemo } from 'react';\nimport ExpansionPanelContext from './ExpansionPanelContext';\nimport {\n    ExpansionPanelDefaultProps,\n    ExpansionPanelPropTypes\n} from './generated/propTypes';\n\nconst ExpansionPanel = props => {\n    const { children, accordion, onExpand, onContract } = props;\n    const [openStates, setOpenStates] = useState({});\n\n    const isOpen = useCallback(\n        expansionId => !!openStates[expansionId],\n        [openStates]\n    );\n\n    const toggleOpenState = useCallback(\n        expansionId => {\n            accordion\n                ? setOpenStates({ [expansionId]: !isOpen(expansionId) })\n                : setOpenStates({\n                      ...openStates,\n                      [expansionId]: !isOpen(expansionId)\n                  });\n\n            isOpen(expansionId)\n                ? onContract?.(expansionId)\n                : onExpand?.(expansionId);\n        },\n        [accordion, isOpen, onContract, onExpand, openStates]\n    );\n\n    const value = useMemo(\n        () => ({ openStates, toggleOpenState, isOpen }),\n        [openStates, toggleOpenState, isOpen]\n    );\n    return (\n        <ExpansionPanelContext.Provider value={value}>\n            {children}\n        </ExpansionPanelContext.Provider>\n    );\n};\n\nExpansionPanel.displayName = 'ExpansionPanel';\nExpansionPanel.propTypes = ExpansionPanelPropTypes;\nExpansionPanel.defaultProps = ExpansionPanelDefaultProps;\n\nexport default ExpansionPanel;\n","import React, { forwardRef, useCallback, useContext } from 'react';\nimport { addProps } from '@element/react-common';\nimport clsx from 'clsx';\nimport ExpansionPanelContext from './ExpansionPanelContext';\nimport {\n    ExpansionTriggerDefaultProps,\n    ExpansionTriggerPropTypes\n} from './generated/propTypes';\n\nconst ExpansionTrigger = forwardRef((props, externalRef) => {\n    const {\n        children,\n        expansionId,\n        onExpand,\n        onContract,\n        onClick,\n        className,\n        disabled,\n        tag,\n        ...customProps\n    } = props;\n    const context = useContext(ExpansionPanelContext);\n    const { isOpen, toggleOpenState } = context;\n\n    const handleClick = useCallback(() => {\n        if (disabled) return;\n\n        toggleOpenState(expansionId);\n        const currentlyOpen = isOpen(expansionId);\n        onClick?.(expansionId, currentlyOpen);\n        currentlyOpen\n            ? onContract?.(expansionId, currentlyOpen)\n            : onExpand?.(expansionId, currentlyOpen);\n    }, [\n        disabled,\n        expansionId,\n        isOpen,\n        onClick,\n        onContract,\n        onExpand,\n        toggleOpenState\n    ]);\n\n    const handleKeyDown = useCallback(\n        e => {\n            switch (e.key) {\n                case 'Enter':\n                case 'ArrowDown':\n                case 'ArrowUp':\n                case 'ArrowRight':\n                case 'ArrowLeft':\n                case ' ':\n                    handleClick();\n                    break;\n                default:\n                    break;\n            }\n        },\n        [handleClick]\n    );\n\n    const classes = clsx(\n        'lmnt-expansion-panel__trigger',\n        disabled && 'lmnt-expansion-panel__trigger--disabled',\n        className\n    );\n    const triggerProps = {\n        role: 'menuitem',\n        className: classes,\n        tabIndex: 0,\n        onClick: handleClick,\n        onKeyDown: handleKeyDown,\n        ...customProps\n    };\n\n    if (!tag) {\n        return addProps(children, triggerProps);\n    }\n\n    return (\n        <div ref={externalRef} {...triggerProps}>\n            {children}\n        </div>\n    );\n});\n\nExpansionTrigger.displayName = 'ExpansionTrigger';\nExpansionTrigger.propTypes = ExpansionTriggerPropTypes;\nExpansionTrigger.defaultProps = ExpansionTriggerDefaultProps;\n\nexport default ExpansionTrigger;\n"],"names":["ExpansionPanelContext","createContext","openStates","toggleOpenState","isOpen","ExpansionPanelPropTypes","accordion","PropTypes","bool","children","node","onContract","func","onExpand","ExpansionPanelDefaultProps","ExpansionContentPropTypes","isRequired","className","string","defaultOpen","expansionId","oneOfType","number","maxHeight","open","style","object","tag","elementType","instanceOf","React","Component","ExpansionContentDefaultProps","undefined","ExpansionIconPropTypes","expanded","lessIcon","moreIcon","ExpansionIconDefaultProps","ExpansionTriggerPropTypes","disabled","onClick","ExpansionTriggerDefaultProps","getRefHeight","ref","_ref$current","_ref$current$firstChi","current","firstChild","offsetHeight","ExpansionContent","forwardRef","props","externalRef","customProps","useRef","context","useContext","Tag","openActual","lastKnownRefHeight","setLastKnownRefHeight","useState","useEffect","refHeight","getMaxHeight","useImperativeHandle","component","rerender","expansionProps","clsx","overflow","addProps","createElement","_extends","displayName","propTypes","defaultProps","ExpansionIcon","isExpanded","Icon","icon","ExpansionPanel","setOpenStates","useCallback","value","useMemo","Provider","ExpansionTrigger","handleClick","currentlyOpen","handleKeyDown","e","key","classes","triggerProps","role","tabIndex","onKeyDown"],"mappings":"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"}