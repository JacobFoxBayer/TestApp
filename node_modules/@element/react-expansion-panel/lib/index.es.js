import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { createContext, forwardRef, useRef, useContext, useState, useEffect, useImperativeHandle, useCallback, useMemo } from 'react';
import clsx from 'clsx';
import { addProps } from '@element/react-common';
import PropTypes from 'prop-types';
import { Icon } from '@element/react-icon';

const ExpansionPanelContext = /*#__PURE__*/createContext({
  openStates: {},
  toggleOpenState: () => {},
  isOpen: () => {}
});

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ExpansionPanelPropTypes = {
  /**
   * Only one panel will be open at a time
   *
   * Defaults to **false**.
   */
  accordion: PropTypes.bool,
  /**
   * Content to be rendered. Expected to be ExpansionTrigger or ExpansionContent, though any other valid components or markup may be used.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * Fired when a trigger is clicked and the content is contracted. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
   *
   * Defaults to **null**.
   */
  onContract: PropTypes.func,
  /**
   * Fired when a trigger is clicked and the content is expanded. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
   *
   * Defaults to **null**.
   */
  onExpand: PropTypes.func
};
const ExpansionPanelDefaultProps = {
  accordion: false,
  children: null
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ExpansionContentPropTypes = {
  /**
   * Content to be rendered inside the banner. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node.isRequired,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * The content will display in the open (visible) state by default. If the ExpansionPanel is set to `accordion`, only the first item will be visible if more than one ExpansionContent is marked as open by default.
   *
   * Defaults to **false**.
   */
  defaultOpen: PropTypes.bool,
  /**
   * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
   *
   * Defaults to **null**.
   */
  expansionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  /**
   * Optionally override the automatically calculated content height. Must be specified in px.
   *
   * Defaults to **undefined**.
   */
  maxHeight: PropTypes.string,
  /**
   * For explicit control of the open state.
   *
   * Defaults to **undefined**.
   */
  open: PropTypes.bool,
  /**
   * Passthrough style object.
   *
   * Defaults to **null**.
   */
  style: PropTypes.object,
  /**
   * The root content HtmlElement. Expects a block element that can receive a height (spans will not work). If set to null, no HtmlElement will be inserted and the class and style properties will be added to the first child (this is for backwards compatibility.)
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType, PropTypes.instanceOf(React.Component)])
};
const ExpansionContentDefaultProps = {
  children: null,
  className: undefined,
  defaultOpen: false,
  expansionId: null,
  maxHeight: undefined,
  open: undefined,
  style: null,
  tag: "div"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ExpansionIconPropTypes = {
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * For explicit control of the icon's toggle state.
   *
   * Defaults to **undefined**.
   */
  expanded: PropTypes.bool,
  /**
   * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
   *
   * Defaults to **null**.
   */
  expansionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  /**
   * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with moreIcon.
   *
   * Defaults to **'expand_less'**.
   */
  lessIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  /**
   * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with lessIcon.
   *
   * Defaults to **'expand_more'**.
   */
  moreIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.node])
};
const ExpansionIconDefaultProps = {
  className: undefined,
  expanded: undefined,
  expansionId: null,
  lessIcon: "expand_less",
  moreIcon: "expand_more"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ExpansionTriggerPropTypes = {
  /**
   * Most typically a Button, IconButton or similar clickable component.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Prevent the trigger from being activated.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool.isRequired,
  /**
   * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
   *
   * Defaults to **null**.
   */
  expansionId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  /**
   * Will be fired when the trigger is clicked. Returns the `expansionId` and open state.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes.func,
  /**
   * Will be fired when the content panel is contracted. Returns `expansionId` and open state.
   *
   * Defaults to **null**.
   */
  onContract: PropTypes.func,
  /**
   * Will be fired when the content panel is expanded. Returns `expansionId` and open state.
   *
   * Defaults to **null**.
   */
  onExpand: PropTypes.func,
  /**
   * The trigger container element. If set to null, no HtmlElement will be inserted and the css class will be added to the first child (this is for backwards compatibility.)
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType, PropTypes.instanceOf(React.Component)])
};
const ExpansionTriggerDefaultProps = {
  children: null,
  className: undefined,
  disabled: false,
  expansionId: null,
  tag: "div"
};

const getRefHeight = ref => {
  var _ref$current, _ref$current$firstChi;
  return ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$firstChi = _ref$current.firstChild) === null || _ref$current$firstChi === void 0 ? void 0 : _ref$current$firstChi.offsetHeight;
};
const ExpansionContent = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    defaultOpen,
    expansionId,
    maxHeight,
    open,
    style = {},
    tag,
    ...customProps
  } = props;
  const ref = useRef();
  const context = useContext(ExpansionPanelContext);
  const {
    isOpen,
    toggleOpenState
  } = context;
  const Tag = tag;
  const openActual = open || isOpen(expansionId);

  // Track the last known height to avoid a situation where the Expansion Panel gets hidden and loses it's "height", appearing closed
  const [lastKnownRefHeight, setLastKnownRefHeight] = useState(getRefHeight(ref));

  // check for height on open and when the children change
  useEffect(() => {
    const refHeight = getRefHeight(ref);
    if (refHeight > 0) setLastKnownRefHeight(refHeight);
  }, [openActual, children]);
  const getMaxHeight = () => openActual ? maxHeight || `${lastKnownRefHeight}px` : '0px';
  useImperativeHandle(externalRef, () => ({
    component: ref.current,
    rerender: () => {
      toggleOpenState(expansionId);
      toggleOpenState(expansionId);
    }
  }));
  useEffect(() => {
    if (!defaultOpen) return;
    toggleOpenState(expansionId);
    // This dependency array is explicitly left blank! Otherwise we get an endless loop.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const expansionProps = {
    ref,
    className: clsx('lmnt-expansion-panel__content', className),
    style: {
      overflow: 'hidden',
      maxHeight: getMaxHeight(),
      ...style
    },
    ...customProps
  };
  if (!tag) {
    return addProps(children, expansionProps);
  }
  return /*#__PURE__*/React.createElement(Tag, _extends({}, expansionProps, customProps), /*#__PURE__*/React.createElement("div", {
    className: "lmnt-expansion-panel__content-inner"
  }, children));
});
ExpansionContent.displayName = 'ExpansionContent';
ExpansionContent.propTypes = ExpansionContentPropTypes;
ExpansionContent.defaultProps = ExpansionContentDefaultProps;

const ExpansionIcon = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    className,
    expanded,
    expansionId,
    lessIcon,
    moreIcon,
    ...customProps
  } = props;
  const context = useContext(ExpansionPanelContext);
  const {
    isOpen
  } = context;
  const isExpanded = expanded || isOpen(expansionId);
  return /*#__PURE__*/React.createElement(Icon, _extends({
    ref: externalRef,
    icon: isExpanded ? lessIcon : moreIcon,
    className: className
  }, customProps));
});
ExpansionIcon.displayName = 'ExpansionIcon';
ExpansionIcon.propTypes = ExpansionIconPropTypes;
ExpansionIcon.defaultProps = ExpansionIconDefaultProps;

const ExpansionPanel = props => {
  const {
    children,
    accordion,
    onExpand,
    onContract
  } = props;
  const [openStates, setOpenStates] = useState({});
  const isOpen = useCallback(expansionId => !!openStates[expansionId], [openStates]);
  const toggleOpenState = useCallback(expansionId => {
    accordion ? setOpenStates({
      [expansionId]: !isOpen(expansionId)
    }) : setOpenStates({
      ...openStates,
      [expansionId]: !isOpen(expansionId)
    });
    isOpen(expansionId) ? onContract === null || onContract === void 0 ? void 0 : onContract(expansionId) : onExpand === null || onExpand === void 0 ? void 0 : onExpand(expansionId);
  }, [accordion, isOpen, onContract, onExpand, openStates]);
  const value = useMemo(() => ({
    openStates,
    toggleOpenState,
    isOpen
  }), [openStates, toggleOpenState, isOpen]);
  return /*#__PURE__*/React.createElement(ExpansionPanelContext.Provider, {
    value: value
  }, children);
};
ExpansionPanel.displayName = 'ExpansionPanel';
ExpansionPanel.propTypes = ExpansionPanelPropTypes;
ExpansionPanel.defaultProps = ExpansionPanelDefaultProps;

const ExpansionTrigger = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    expansionId,
    onExpand,
    onContract,
    onClick,
    className,
    disabled,
    tag,
    ...customProps
  } = props;
  const context = useContext(ExpansionPanelContext);
  const {
    isOpen,
    toggleOpenState
  } = context;
  const handleClick = useCallback(() => {
    if (disabled) return;
    toggleOpenState(expansionId);
    const currentlyOpen = isOpen(expansionId);
    onClick === null || onClick === void 0 ? void 0 : onClick(expansionId, currentlyOpen);
    currentlyOpen ? onContract === null || onContract === void 0 ? void 0 : onContract(expansionId, currentlyOpen) : onExpand === null || onExpand === void 0 ? void 0 : onExpand(expansionId, currentlyOpen);
  }, [disabled, expansionId, isOpen, onClick, onContract, onExpand, toggleOpenState]);
  const handleKeyDown = useCallback(e => {
    switch (e.key) {
      case 'Enter':
      case 'ArrowDown':
      case 'ArrowUp':
      case 'ArrowRight':
      case 'ArrowLeft':
      case ' ':
        handleClick();
        break;
    }
  }, [handleClick]);
  const classes = clsx('lmnt-expansion-panel__trigger', disabled && 'lmnt-expansion-panel__trigger--disabled', className);
  const triggerProps = {
    role: 'menuitem',
    className: classes,
    tabIndex: 0,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    ...customProps
  };
  if (!tag) {
    return addProps(children, triggerProps);
  }
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef
  }, triggerProps), children);
});
ExpansionTrigger.displayName = 'ExpansionTrigger';
ExpansionTrigger.propTypes = ExpansionTriggerPropTypes;
ExpansionTrigger.defaultProps = ExpansionTriggerDefaultProps;

export { ExpansionContent, ExpansionIcon, ExpansionPanel, ExpansionTrigger };
//# sourceMappingURL=index.es.js.map
