import React from 'react';


export interface TooltipProps {
    /**
    * Accepts any valid markup. This will be rendered before any value set with the `text` prop. For most use-cases use `text`.
    *
    * Defaults to **undefined**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Container display type, inline or block.
    *
    * Defaults to **'inline'**.
    */
    containerType?: string;
    /**
    * Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell.
    *
    * Defaults to **false**.
    */
    hoisted?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * Position of tooltip. Options include: 'top', 'left', 'right', and 'bottom'(default). 
    *
    * Defaults to **'bottom'**.
    */
    position?: string;
    /**
    * string
    *
    * Defaults to **null**.
    */
    text: string | Function | React.ReactNode;
    /**
    * Custom properties to apply to the hovering element.
    *
    * Defaults to **null**.
    */
    tooltipProps?: object;
    /**
    * Custom properties to apply to the trigger element.
    *
    * Defaults to **null**.
    */
    triggerProps?: object;
    /**
    * Fired when the trigger is interacted with.
    */
    onClick?: Function;
}

/**
* Tooltip adds additional context about a component. To trigger the tooltip content, hover or focus on the child component such as a button or an icon that is passed into the tooltip component.
 * @prop {React.ReactNode} children - Accepts any valid markup. This will be rendered before any value set with the `text` prop. For most use-cases use `text`. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} containerType - Container display type, inline or block. Defaults to _'inline'_.
 * @prop {boolean} hoisted - Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {string} position - Position of tooltip. Options include: 'top', 'left', 'right', and 'bottom'(default).  Defaults to _'bottom'_.
 * @prop {string|function|React.ReactNode} text - string Defaults to _null_.
 * @prop {object} tooltipProps - Custom properties to apply to the hovering element. Defaults to _null_.
 * @prop {object} triggerProps - Custom properties to apply to the trigger element. Defaults to _null_.
 *  @event onClick - Fired when the trigger is interacted with.
*/
export const Tooltip: React.FunctionComponent<TooltipProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TooltipTextProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell.
    *
    * Defaults to **false**.
    */
    hoisted?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * The text to be rendered inside of the Tooltip.
    *
    * Defaults to **null**.
    */
    text: string | Function | React.ReactNode;
}

/**
* A container to display the Tooltip text.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} hoisted - Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {string|function|React.ReactNode} text - The text to be rendered inside of the Tooltip. Defaults to _null_.
*/
export const TooltipText: React.FunctionComponent<TooltipTextProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
