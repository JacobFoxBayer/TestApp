'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var clsx = require('clsx');
var React = require('react');
var PropTypes = require('prop-types');
var reactCommon = require('@element/react-common');
var reactIcon = require('@element/react-icon');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var React__default = /*#__PURE__*/_interopDefault(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const LabelBadgePropTypes = {
  /**
   *  Label to be displayed in the Badge. Usually a string, but can also be an x-small icon.
   *
   * Defaults to **null**.
   */
  label: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].func, PropTypes__default["default"].node]),
  /**
   *  Label type to be displayed in the Badge.
   *
   * Defaults to **'string'**.
   */
  labelType: PropTypes__default["default"].oneOf(["string", "icon"]),
  /**
   * Adds the given Icon to the left of the label text. May not be used with `trailingIcon` or if `labelType` is icon - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority.  If `labelType` is set to `icon` label will take priority.  Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.  If a custom icon is used, the icon should not be larger than 9 x 9.
   *
   * Defaults to **undefined**.
   */
  leadingIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].func, PropTypes__default["default"].node]),
  /**
   * Color of the badge. It will default according to your theme.  For most themes that is primary.
   *
   * Defaults to **'themeDefault'**.
   */
  themeColor: reactCommon.deprecatedOneOf(PropTypes__default["default"].oneOf(["themeDefault", "primary", "secondary", "danger", "success", "blue", "gray", "green", "orange", "purple", "red", "teal", "yellow", "primary-variant", "no-bg-on-dark"]), ["primaryVariant"], "LabelBadge", "Please use one of 'themeDefault','primary','secondary','danger','success','blue','gray','green','orange','purple','red','teal','yellow','primary-variant','no-bg-on-dark'."),
  /**
   * Adds the given Icon to the right of the label text. May not be used with `leadingIcon` or if `labelType` is icon - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority.  If `labelType` is set to `icon` label will take priority.  Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
   *
   * Defaults to **undefined**.
   */
  trailingIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].func, PropTypes__default["default"].node])
};
const LabelBadgeDefaultProps = {
  label: null,
  labelType: "string",
  leadingIcon: undefined,
  themeColor: "themeDefault",
  trailingIcon: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const NotificationBadgePropTypes = {
  /**
   *  Number to be displayed in badge. Omit for a status light badge.
   *
   * Defaults to **null**.
   */
  counter: PropTypes__default["default"].number,
  /**
   * Max number the badge can display.
   *
   * Defaults to **99**.
   */
  max: PropTypes__default["default"].number,
  /**
   *  Theme color of the badge.
   *
   * Defaults to **'danger'**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "danger", "success"])
};
const NotificationBadgeDefaultProps = {
  counter: null,
  max: 99,
  themeColor: "danger"
};

const getCounter = (counter, max) => {
  if (!counter && counter !== 0) return null;
  if (counter <= max) return counter;
  return `${max}+`;
};
const NotificationBadge = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    counter,
    max,
    themeColor,
    ...customProps
  } = props;
  const ref = React.useRef();
  const [counterActual, setCounterActual] = React.useState(getCounter(counter, max));
  React.useEffect(() => setCounterActual(getCounter(counter, max)), [counter, max]);
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const classNames = clsx__default["default"]('lmnt', 'lmnt-badge', 'lmnt-badge--notification', `lmnt-badge--notification-${themeColor}`, 'mdc-typography--caption-bold', (counterActual || counterActual === 0) && 'lmnt-badge--notification-badge-counter', className);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: classNames
  }, customProps), counterActual && counterActual);
});
NotificationBadge.displayName = 'NotificationBadge';
NotificationBadge.propTypes = NotificationBadgePropTypes;
NotificationBadge.defaultProps = NotificationBadgeDefaultProps;

const LabelBadge = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    label,
    labelType,
    leadingIcon,
    trailingIcon,
    themeColor,
    ...customProps
  } = props;
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const classNames = clsx__default["default"]('lmnt', 'lmnt-badge', 'lmnt-badge--label', `lmnt-badge--label-${themeColor}`, 'mdc-typography--caption-bold', labelType === 'icon' && 'lmnt-badge--label-icon-as-label', leadingIcon && 'lmnt-badge--label-leading-icon', trailingIcon && 'lmnt-badge--label-trailing-icon', className);
  const leadingIconActual = React.useMemo(() => {
    var _leadingIcon$props;
    if (labelType === 'icon' || !leadingIcon) {
      return null;
    }
    if (typeof leadingIcon === 'string') {
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        className: "lmnt-badge-label__leading-icon",
        icon: leadingIcon,
        iconSize: "xsmall"
      });
    }
    if (typeof leadingIcon === 'function') {
      return leadingIcon({
        className: 'lmnt-icon--xsmall lmnt-badge-label__leading-icon'
      });
    }
    return reactCommon.addProps(leadingIcon, {
      className: clsx__default["default"]('lmnt-badge-label__leading-icon', leadingIcon === null || leadingIcon === void 0 ? void 0 : (_leadingIcon$props = leadingIcon.props) === null || _leadingIcon$props === void 0 ? void 0 : _leadingIcon$props.className)
    });
  }, [labelType, leadingIcon]);
  const labelActual = React.useMemo(() => {
    var _label$props;
    if (labelType === 'string') {
      return label;
    }
    if (typeof label === 'string') {
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        className: "lmnt-badge-label-icon",
        icon: label,
        iconSize: "xsmall"
      });
    }
    if (typeof label === 'function') {
      return label({
        className: 'lmnt-icon--xsmall lmnt-badge-label-icon'
      });
    }
    return reactCommon.addProps(label, {
      className: clsx__default["default"]('lmnt-badge-label-icon', 'lmnt-icon--xsmall', label === null || label === void 0 ? void 0 : (_label$props = label.props) === null || _label$props === void 0 ? void 0 : _label$props.className)
    });
  }, [labelType, label]);
  const trailingIconActual = React.useMemo(() => {
    var _trailingIcon$props;
    if (!trailingIcon || labelType === 'icon' || leadingIconActual) {
      return null;
    }
    if (typeof trailingIcon === 'string') {
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        className: "lmnt-badge-label__trailing-icon",
        icon: trailingIcon,
        iconSize: "xsmall"
      });
    }
    if (typeof trailingIcon === 'function') {
      return trailingIcon({
        className: 'lmnt-icon--xsmall lmnt-badge-label__trailing-icon'
      });
    }
    return reactCommon.addProps(trailingIcon, {
      className: clsx__default["default"]('lmnt-badge-label__trailing-icon', trailingIcon === null || trailingIcon === void 0 ? void 0 : (_trailingIcon$props = trailingIcon.props) === null || _trailingIcon$props === void 0 ? void 0 : _trailingIcon$props.className)
    });
  }, [labelType, trailingIcon, leadingIconActual]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: classNames
  }, customProps), leadingIconActual && leadingIconActual, /*#__PURE__*/React__default["default"].createElement("span", {
    className: "lmnt-badge--label__label"
  }, labelActual), trailingIconActual && trailingIconActual);
});
LabelBadge.displayName = 'LabelBadge';
LabelBadge.propTypes = LabelBadgePropTypes;
LabelBadge.defaultProps = LabelBadgeDefaultProps;

exports.LabelBadge = LabelBadge;
exports.NotificationBadge = NotificationBadge;
//# sourceMappingURL=index.js.map
