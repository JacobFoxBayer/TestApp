import React from 'react';


export interface StepProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Optionally override the global Stepper density. The step will be smaller with smaller icons.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Set this flag to have a step display incomplete or in error/danger while maintaining internal variant logic. It is commonly useful with form validation. This will only show when a linear Stepper has moved beyond the flagged step. For non-linear Steppers, it will always show if the flag is set except for the active step.
    *
    * Defaults to **undefined**.
    */
    errorState?: string;
    /**
    * A unique id used to associate the step with StepContent when using StepperContainer.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Secondary text for the given step.
    *
    * Defaults to **undefined**.
    */
    secondaryText?: React.ReactNode;
    /**
    * Optionally override the stepIndex. Normally, this is automatically calculated when using Stepper with a StepperContainer.
    *
    * Defaults to **undefined**.
    */
    stepIndex?: number;
    /**
    * Optionally override the default component of `button`. If using a tag other than `button` or `input`, keyboard events (such as onKeyUp) will need to be added for accessability compliance.
    *
    * Defaults to **'button'**.
    */
    tag?: string | React.ElementType;
    /**
    * Optional custom props to be passed to the TextBubble. See the Element TextBubble for more information.
    *
    * Defaults to **undefined**.
    */
    textBubbleProps?: object;
    /**
    * Optionally override the text for the TextBubble. This is normally managed by the parent Stepper.
    *
    * Defaults to **undefined**.
    */
    textBubbleText?: object;
    /**
    * Optionally override the TextBubble themeColor. This is normally managed by the parent Stepper.
    *
    * Defaults to **undefined**.
    */
    textBubbleThemeColor?: object;
    /**
    * Primary text for the given step.
    *
    * Defaults to **undefined**.
    */
    title?: React.ReactNode;
    /**
    * Optionally override the step variant - the step will ignore any internal variant logic. This is normally managed by the parent Stepper except for error/validation cases.
    *
    * Defaults to **undefined**.
    */
    variant?: string;
    /**
    * Fired when the step is clicked. Primarily used in non-linear mode.
    */
    onClick?: Function;
    /**
    * Fired when the step becomes visible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
    */
    onStepEnter?: Function;
    /**
    * Fired when the step becomes invisible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
    */
    onStepLeave?: Function;
}

/**
* An individual step in a multi-part Stepper component. Contains a title, text bubble, and optionally secondary text.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - Optionally override the global Stepper density. The step will be smaller with smaller icons. Defaults to _false_.
 * @prop {string} errorState - Set this flag to have a step display incomplete or in error/danger while maintaining internal variant logic. It is commonly useful with form validation. This will only show when a linear Stepper has moved beyond the flagged step. For non-linear Steppers, it will always show if the flag is set except for the active step. Defaults to _undefined_.
 * @prop {string} id - A unique id used to associate the step with StepContent when using StepperContainer. Defaults to _undefined_.
 * @prop {React.ReactNode} secondaryText - Secondary text for the given step. Defaults to _undefined_.
 * @prop {number} stepIndex - Optionally override the stepIndex. Normally, this is automatically calculated when using Stepper with a StepperContainer. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - Optionally override the default component of `button`. If using a tag other than `button` or `input`, keyboard events (such as onKeyUp) will need to be added for accessability compliance. Defaults to _'button'_.
 * @prop {object} textBubbleProps - Optional custom props to be passed to the TextBubble. See the Element TextBubble for more information. Defaults to _undefined_.
 * @prop {object} textBubbleText - Optionally override the text for the TextBubble. This is normally managed by the parent Stepper. Defaults to _undefined_.
 * @prop {object} textBubbleThemeColor - Optionally override the TextBubble themeColor. This is normally managed by the parent Stepper. Defaults to _undefined_.
 * @prop {React.ReactNode} title - Primary text for the given step. Defaults to _undefined_.
 * @prop {string} variant - Optionally override the step variant - the step will ignore any internal variant logic. This is normally managed by the parent Stepper except for error/validation cases. Defaults to _undefined_.
 *  @event onClick - Fired when the step is clicked. Primarily used in non-linear mode.
 *  @event onStepEnter - Fired when the step becomes visible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
 *  @event onStepLeave - Fired when the step becomes invisible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
*/
export const Step: React.FunctionComponent<StepProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepButtonProps {
    /**
    * Additional props to be passed to the underlying button. See the Element Button documentation for more information.
    *
    * Defaults to **undefined**.
    */
    buttonProps?: object;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent user interaction with the button on the last step*. Can be used with form validation.
    *
    * Defaults to **false**.
    */
    confirmDisabled?: boolean;
    /**
    * Override the default button label of 'next' or 'prev'.
    *
    * Defaults to **undefined**.
    */
    customLabel?: React.ReactNode;
    /**
    * The type of button, next or previous. Will automatically become a confirm button on the last step
    *
    * Defaults to **'next'**.
    */
    direction?: string;
    /**
    * Prevent user interaction with the button. Can be used with form validation.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Hide the button using display:none instead of removing it from the dom. May be useful with animations.
    *
    * Defaults to **false**.
    */
    persistent?: boolean;
    /**
    * Optionally override the default component of Element Button (such as an IconButton).
    *
    * Defaults to **undefined**.
    */
    tag?: string | React.ElementType;
    /**
    * An optional custom event handler to be executed after internal events are complete.
    */
    onClick?: Function;
}

/**
* When used with StepperContainer and StepContent it will automatically update Stepper progress as well as show and hide the active step. A StepButton with a stepType of `next` will become a __Confirm__ label when the last Step is reached.
 * @prop {object} buttonProps - Additional props to be passed to the underlying button. See the Element Button documentation for more information. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} confirmDisabled - Prevent user interaction with the button on the last step*. Can be used with form validation. Defaults to _false_.
 * @prop {React.ReactNode} customLabel - Override the default button label of 'next' or 'prev'. Defaults to _undefined_.
 * @prop {string} direction - The type of button, next or previous. Will automatically become a confirm button on the last step Defaults to _'next'_.
 * @prop {boolean} disabled - Prevent user interaction with the button. Can be used with form validation. Defaults to _false_.
 * @prop {boolean} persistent - Hide the button using display:none instead of removing it from the dom. May be useful with animations. Defaults to _false_.
 * @prop {string|React.ElementType} tag - Optionally override the default component of Element Button (such as an IconButton). Defaults to _undefined_.
 *  @event onClick - An optional custom event handler to be executed after internal events are complete.
*/
export const StepButton: React.FunctionComponent<StepButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepContentProps {
    /**
    * Content to be rendered inside StepContent.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Disable the normal width of `600px` and apply a full-width style to fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Change the default padding. The StepContent will normally use standard padding.
    *
    * Defaults to **'standard'**.
    */
    padding?: string;
    /**
    * Hide the button using display:none instead of removing it from the dom. May be useful with animations.
    *
    * Defaults to **false**.
    */
    persistent?: boolean;
    /**
    * The id of the associated step.
    *
    * Defaults to **undefined**.
    */
    stepId: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
}

/**
* When used with StepperContainer and StepButtons it will automatically show and hide the active step.
 * @prop {React.ReactNode} children - Content to be rendered inside StepContent. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Disable the normal width of `600px` and apply a full-width style to fill it's container. Defaults to _false_.
 * @prop {string} padding - Change the default padding. The StepContent will normally use standard padding. Defaults to _'standard'_.
 * @prop {boolean} persistent - Hide the button using display:none instead of removing it from the dom. May be useful with animations. Defaults to _false_.
 * @prop {string} stepId - The id of the associated step. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
*/
export const StepContent: React.FunctionComponent<StepContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepDividerProps {
    /**
    * Optionally override automatic active tracking - only needed when managing Stepper state in the parent application. Will use the `primary` color when true and the `stroke` color when false. Only used with linear Steppers.
    *
    * Defaults to **undefined**.
    */
    active?: boolean;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Optional props to be passed to the underlying Element Divider component. See Divider documentation for more info.
    *
    * Defaults to **undefined**.
    */
    dividerProps?: object;
    /**
    * The step index immediately preceding the StepDivider. Used for calculating the active state with a linear Stepper.
    *
    * Defaults to **undefined**.
    */
    nearestStepIndex?: number;
}

/**
* A wrapper around Element Divider that customizes behavior for use within Stepper. Will be automatically created when using the `steps` prop with the Stepper component.
 * @prop {boolean} active - Optionally override automatic active tracking - only needed when managing Stepper state in the parent application. Will use the `primary` color when true and the `stroke` color when false. Only used with linear Steppers. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} dividerProps - Optional props to be passed to the underlying Element Divider component. See Divider documentation for more info. Defaults to _undefined_.
 * @prop {number} nearestStepIndex - The step index immediately preceding the StepDivider. Used for calculating the active state with a linear Stepper. Defaults to _undefined_.
*/
export const StepDivider: React.FunctionComponent<StepDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperProps {
    /**
    * Change the default border. The Stepper will normally have a bottom border in horizontal mode and a trailing border in vertical mode.
    *
    * Defaults to **'default'**.
    */
    border?: string;
    /**
    * Steps to be rendered inside the Stepper when managing Stepper state in a parent application. Not needed when using the `steps` prop.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The steps will be closer together with smaller icons.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Non-linear will allow the user to navigate steps in any order by making the individual steps clickable.
    *
    * Defaults to **false**.
    */
    nonLinear?: boolean;
    /**
    * Optionally override the current active step. Only used when tracking Stepper progress in the parent application.
    *
    * Defaults to **undefined**.
    */
    progress?: number;
    /**
    * Improves layout for right-to-left languages.
    *
    * Defaults to **false**.
    */
    rtl?: boolean;
    /**
    * An array of objects describing the steps to show. See readme for full schema.
    *
    * Defaults to **undefined**.
    */
    steps?: Array<object>;
    /**
    * By default StepButton will render a div, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * Stacks steps vertically.
    *
    * Defaults to **false**.
    */
    vertical?: boolean;
}

/**
* A multi-step container. Most commonly used full screen or in a modal.
 * @prop {string} border - Change the default border. The Stepper will normally have a bottom border in horizontal mode and a trailing border in vertical mode. Defaults to _'default'_.
 * @prop {React.ReactNode} children - Steps to be rendered inside the Stepper when managing Stepper state in a parent application. Not needed when using the `steps` prop. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - The steps will be closer together with smaller icons. Defaults to _false_.
 * @prop {boolean} nonLinear - Non-linear will allow the user to navigate steps in any order by making the individual steps clickable. Defaults to _false_.
 * @prop {number} progress - Optionally override the current active step. Only used when tracking Stepper progress in the parent application. Defaults to _undefined_.
 * @prop {boolean} rtl - Improves layout for right-to-left languages. Defaults to _false_.
 * @prop {[object]} steps - An array of objects describing the steps to show. See readme for full schema. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default StepButton will render a div, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
 * @prop {boolean} vertical - Stacks steps vertically. Defaults to _false_.
*/
export const Stepper: React.FunctionComponent<StepperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperButtonContainerProps {
    /**
    * Change the default border. The Stepper Button Container will normally have a top border.
    *
    * Defaults to **'default'**.
    */
    border?: string;
    /**
    * Content to be rendered inside StepContent.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Disable the normal width of `600px` and apply a  100% width style to fill it's container. Note, this is automatically enabled with vertical steppers.
    *
    * Defaults to **undefined**.
    */
    fullWidth?: boolean;
    /**
    * Change the default padding. The Stepper Button Container will normally use standard padding.
    *
    * Defaults to **'standard'**.
    */
    padding?: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
}

/**
* An optional container that adds the appropriate border and padding for button area in a stepper.
 * @prop {string} border - Change the default border. The Stepper Button Container will normally have a top border. Defaults to _'default'_.
 * @prop {React.ReactNode} children - Content to be rendered inside StepContent. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Disable the normal width of `600px` and apply a  100% width style to fill it's container. Note, this is automatically enabled with vertical steppers. Defaults to _undefined_.
 * @prop {string} padding - Change the default padding. The Stepper Button Container will normally use standard padding. Defaults to _'standard'_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
*/
export const StepperButtonContainer: React.FunctionComponent<StepperButtonContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperContainerProps {
    /**
    * The Stepper component to render.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * Fired when the confirm button is clicked.
    */
    onConfirm?: Function;
    /**
    * Using onStepChange is usually preferred as it catches non-linear step clicks. OnNext is fired only when the next button is clicked.
    */
    onNext?: Function;
    /**
    * Using onStepChange is usually preferred as it catches non-linear step clicks. OnPrev is fired only when the prev button is clicked.
    */
    onPrev?: Function;
    /**
    * An alternative to onNext and onPrev, onStepChange will fire when the progress is changed in any way. Note: this *does not* fire when the confirm button is clicked.
    */
    onStepChange?: Function;
}

/**
* An optional container that enables automatic step progress management using StepContent and StepButtons.
 * @prop {React.ReactNode} children - The Stepper component to render. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
 *  @event onConfirm - Fired when the confirm button is clicked.
 *  @event onNext - Using onStepChange is usually preferred as it catches non-linear step clicks. OnNext is fired only when the next button is clicked.
 *  @event onPrev - Using onStepChange is usually preferred as it catches non-linear step clicks. OnPrev is fired only when the prev button is clicked.
 *  @event onStepChange - An alternative to onNext and onPrev, onStepChange will fire when the progress is changed in any way. Note: this *does not* fire when the confirm button is clicked.
*/
export const StepperContainer: React.FunctionComponent<StepperContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperContentContainerProps {
    /**
    * Content to be rendered inside StepContent.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
}

/**
* An optional container used primarily with vertical Steppers.
 * @prop {React.ReactNode} children - Content to be rendered inside StepContent. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
*/
export const StepperContentContainer: React.FunctionComponent<StepperContentContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
