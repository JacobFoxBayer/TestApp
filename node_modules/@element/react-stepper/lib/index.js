'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var clsx = require('clsx');
var React = require('react');
var reactTextBubble = require('@element/react-text-bubble');
var reactTypography = require('@element/react-typography');
var reactIcon = require('@element/react-icon');
var PropTypes = require('prop-types');
var reactButton = require('@element/react-button');
var reactDivider = require('@element/react-divider');
var reactCommon = require('@element/react-common');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var React__default = /*#__PURE__*/_interopDefault(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const StepperPropTypes = {
  /**
   * Change the default border. The Stepper will normally have a bottom border in horizontal mode and a trailing border in vertical mode.
   *
   * Defaults to **'default'**.
   */
  border: PropTypes__default["default"].oneOf(["none", "default"]),
  /**
   * Steps to be rendered inside the Stepper when managing Stepper state in a parent application. Not needed when using the `steps` prop.
   *
   * Defaults to **undefined**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The steps will be closer together with smaller icons.
   *
   * Defaults to **false**.
   */
  dense: PropTypes__default["default"].bool,
  /**
   * Non-linear will allow the user to navigate steps in any order by making the individual steps clickable.
   *
   * Defaults to **false**.
   */
  nonLinear: PropTypes__default["default"].bool,
  /**
   * Optionally override the current active step. Only used when tracking Stepper progress in the parent application.
   *
   * Defaults to **undefined**.
   */
  progress: PropTypes__default["default"].number,
  /**
   * Improves layout for right-to-left languages.
   *
   * Defaults to **false**.
   */
  rtl: PropTypes__default["default"].bool,
  /**
   * An array of objects describing the steps to show. See readme for full schema.
   *
   * Defaults to **undefined**.
   */
  steps: PropTypes__default["default"].arrayOf(PropTypes__default["default"].object),
  /**
   * By default StepButton will render a div, this allow another tag to be used instead. A block type component is suggested.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType]),
  /**
   * Stacks steps vertically.
   *
   * Defaults to **false**.
   */
  vertical: PropTypes__default["default"].bool
};
const StepperDefaultProps = {
  border: "default",
  children: undefined,
  className: undefined,
  dense: false,
  nonLinear: false,
  progress: undefined,
  rtl: false,
  steps: undefined,
  tag: "div",
  vertical: false
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const StepPropTypes = {
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Optionally override the global Stepper density. The step will be smaller with smaller icons.
   *
   * Defaults to **false**.
   */
  dense: PropTypes__default["default"].bool,
  /**
   * Set this flag to have a step display incomplete or in error/danger while maintaining internal variant logic. It is commonly useful with form validation. This will only show when a linear Stepper has moved beyond the flagged step. For non-linear Steppers, it will always show if the flag is set except for the active step.
   *
   * Defaults to **undefined**.
   */
  errorState: PropTypes__default["default"].oneOf(["incomplete", "danger"]),
  /**
   * A unique id used to associate the step with StepContent when using StepperContainer.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes__default["default"].string,
  /**
   * Fired when the step is clicked. Primarily used in non-linear mode.
   *
   * Defaults to **undefined**.
   */
  onClick: PropTypes__default["default"].func,
  /**
   * Fired when the step becomes visible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
   *
   * Defaults to **undefined**.
   */
  onStepEnter: PropTypes__default["default"].func,
  /**
   * Fired when the step becomes invisible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
   *
   * Defaults to **undefined**.
   */
  onStepLeave: PropTypes__default["default"].func,
  /**
   * Secondary text for the given step.
   *
   * Defaults to **undefined**.
   */
  secondaryText: PropTypes__default["default"].node,
  /**
   * Optionally override the stepIndex. Normally, this is automatically calculated when using Stepper with a StepperContainer.
   *
   * Defaults to **undefined**.
   */
  stepIndex: PropTypes__default["default"].number,
  /**
   * Optionally override the default component of `button`. If using a tag other than `button` or `input`, keyboard events (such as onKeyUp) will need to be added for accessability compliance.
   *
   * Defaults to **'button'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType]),
  /**
   * Optional custom props to be passed to the TextBubble. See the Element TextBubble for more information.
   *
   * Defaults to **undefined**.
   */
  textBubbleProps: PropTypes__default["default"].object,
  /**
   * Optionally override the text for the TextBubble. This is normally managed by the parent Stepper.
   *
   * Defaults to **undefined**.
   */
  textBubbleText: PropTypes__default["default"].object,
  /**
   * Optionally override the TextBubble themeColor. This is normally managed by the parent Stepper.
   *
   * Defaults to **undefined**.
   */
  textBubbleThemeColor: PropTypes__default["default"].object,
  /**
   * Primary text for the given step.
   *
   * Defaults to **undefined**.
   */
  title: PropTypes__default["default"].node,
  /**
   * Optionally override the step variant - the step will ignore any internal variant logic. This is normally managed by the parent Stepper except for error/validation cases.
   *
   * Defaults to **undefined**.
   */
  variant: PropTypes__default["default"].oneOf(["inactive", "completed", "active", "incomplete", "danger"])
};
const StepDefaultProps = {
  className: undefined,
  dense: false,
  errorState: undefined,
  id: undefined,
  secondaryText: undefined,
  stepIndex: undefined,
  tag: "button",
  textBubbleProps: undefined,
  textBubbleText: undefined,
  textBubbleThemeColor: undefined,
  title: undefined,
  variant: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const StepButtonPropTypes = {
  /**
   * Additional props to be passed to the underlying button. See the Element Button documentation for more information.
   *
   * Defaults to **undefined**.
   */
  buttonProps: PropTypes__default["default"].object,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Prevent user interaction with the button on the last step*. Can be used with form validation.
   *
   * Defaults to **false**.
   */
  confirmDisabled: PropTypes__default["default"].bool,
  /**
   * Override the default button label of 'next' or 'prev'.
   *
   * Defaults to **undefined**.
   */
  customLabel: PropTypes__default["default"].node,
  /**
   * The type of button, next or previous. Will automatically become a confirm button on the last step
   *
   * Defaults to **'next'**.
   */
  direction: PropTypes__default["default"].oneOf(["next", "prev"]),
  /**
   * Prevent user interaction with the button. Can be used with form validation.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * An optional custom event handler to be executed after internal events are complete.
   *
   * Defaults to **undefined**.
   */
  onClick: PropTypes__default["default"].func,
  /**
   * Hide the button using display:none instead of removing it from the dom. May be useful with animations.
   *
   * Defaults to **false**.
   */
  persistent: PropTypes__default["default"].bool,
  /**
   * Optionally override the default component of Element Button (such as an IconButton).
   *
   * Defaults to **undefined**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType])
};
const StepButtonDefaultProps = {
  buttonProps: undefined,
  className: undefined,
  confirmDisabled: false,
  customLabel: undefined,
  direction: "next",
  disabled: false,
  persistent: false,
  tag: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const StepContentPropTypes = {
  /**
   * Content to be rendered inside StepContent.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Disable the normal width of `600px` and apply a full-width style to fill it's container.
   *
   * Defaults to **false**.
   */
  fullWidth: PropTypes__default["default"].bool,
  /**
   * Change the default padding. The StepContent will normally use standard padding.
   *
   * Defaults to **'standard'**.
   */
  padding: PropTypes__default["default"].oneOf(["none", "dense", "standard", "airy"]),
  /**
   * Hide the button using display:none instead of removing it from the dom. May be useful with animations.
   *
   * Defaults to **false**.
   */
  persistent: PropTypes__default["default"].bool,
  /**
   * The id of the associated step.
   *
   * Defaults to **undefined**.
   */
  stepId: PropTypes__default["default"].string.isRequired,
  /**
   * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType])
};
const StepContentDefaultProps = {
  children: null,
  className: undefined,
  fullWidth: false,
  padding: "standard",
  persistent: false,
  stepId: undefined,
  tag: "div"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const StepDividerPropTypes = {
  /**
   * Optionally override automatic active tracking - only needed when managing Stepper state in the parent application. Will use the `primary` color when true and the `stroke` color when false. Only used with linear Steppers.
   *
   * Defaults to **undefined**.
   */
  active: PropTypes__default["default"].bool,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Optional props to be passed to the underlying Element Divider component. See Divider documentation for more info.
   *
   * Defaults to **undefined**.
   */
  dividerProps: PropTypes__default["default"].object,
  /**
   * The step index immediately preceding the StepDivider. Used for calculating the active state with a linear Stepper.
   *
   * Defaults to **undefined**.
   */
  nearestStepIndex: PropTypes__default["default"].number
};
const StepDividerDefaultProps = {
  active: undefined,
  className: undefined,
  dividerProps: undefined,
  nearestStepIndex: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const StepperButtonContainerPropTypes = {
  /**
   * Change the default border. The Stepper Button Container will normally have a top border.
   *
   * Defaults to **'default'**.
   */
  border: PropTypes__default["default"].oneOf(["none", "default"]),
  /**
   * Content to be rendered inside StepContent.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Disable the normal width of `600px` and apply a  100% width style to fill it's container. Note, this is automatically enabled with vertical steppers.
   *
   * Defaults to **undefined**.
   */
  fullWidth: PropTypes__default["default"].bool,
  /**
   * Change the default padding. The Stepper Button Container will normally use standard padding.
   *
   * Defaults to **'standard'**.
   */
  padding: PropTypes__default["default"].oneOf(["none", "dense", "standard", "airy"]),
  /**
   * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType])
};
const StepperButtonContainerDefaultProps = {
  border: "default",
  children: null,
  className: undefined,
  fullWidth: undefined,
  padding: "standard",
  tag: "div"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const StepperContainerPropTypes = {
  /**
   * The Stepper component to render.
   *
   * Defaults to **undefined**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Fired when the confirm button is clicked.
   *
   * Defaults to **undefined**.
   */
  onConfirm: PropTypes__default["default"].func,
  /**
   * Using onStepChange is usually preferred as it catches non-linear step clicks. OnNext is fired only when the next button is clicked.
   *
   * Defaults to **undefined**.
   */
  onNext: PropTypes__default["default"].func,
  /**
   * Using onStepChange is usually preferred as it catches non-linear step clicks. OnPrev is fired only when the prev button is clicked.
   *
   * Defaults to **undefined**.
   */
  onPrev: PropTypes__default["default"].func,
  /**
   * An alternative to onNext and onPrev, onStepChange will fire when the progress is changed in any way. Note: this *does not* fire when the confirm button is clicked.
   *
   * Defaults to **undefined**.
   */
  onStepChange: PropTypes__default["default"].func,
  /**
   * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType])
};
const StepperContainerDefaultProps = {
  children: undefined,
  className: undefined,
  tag: "div"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

({
  /**
   * Content to be rendered inside StepContent.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType])
});

// intentionally left empty (for Stepper to detect if it needs to create a Stepper Container)
const StepperContext = /*#__PURE__*/React.createContext();

const getThemeColor = variant => {
  switch (variant) {
    case 'active':
      return 'primary';
    case 'completed':
      return 'primary';
    case 'incomplete':
      return 'gray';
    case 'danger':
      return 'danger';
    case 'inactive':
    default:
      return 'muted';
  }
};
const getVariant = (stepIndex, progress, nonLinear, errorState) => {
  // the current step should always be active, regardless of mode
  if (stepIndex === progress) return 'active';
  // in linear mode, anything in front the current progress should simply be inactive
  if (!nonLinear && stepIndex > progress) return 'inactive';
  // check and show the error state
  if (errorState) return errorState;
  // if there is no validation state and we're not non-linear, success!
  if (!nonLinear && stepIndex > -1 && stepIndex < progress) return 'completed';
  // anything we didn't catch
  return 'inactive';
};
const getBubbleText = (variant, stepNumber) => {
  switch (variant) {
    case 'completed':
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        icon: "check"
      });
    case 'incomplete':
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        icon: "warning"
      });
    case 'danger':
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        icon: "error"
      });
    case 'inactive':
    case 'active':
    default:
      return stepNumber;
  }
};
const getStepIndex = (stepIndexProp, stepIndexes, id) => {
  if (stepIndexProp !== undefined) return stepIndexProp;
  if (stepIndexes) return stepIndexes.findIndex(x => x === id);
  return 0;
};
const Step = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    dense: denseProp,
    forceVariant,
    id,
    onClick,
    onStepEnter,
    onStepLeave,
    secondaryText,
    stepIndex: stepIndexOverride,
    tag: Tag,
    textBubbleProps,
    textBubbleText: textBubbleTextOverride,
    textBubbleThemeColor: textBubbleThemeColorOverride,
    title,
    errorState,
    variant: variantOverride,
    ...customProps
  } = props;
  const {
    dense: denseContext,
    nonLinear,
    progress,
    registerStep,
    setProgress,
    stepIndexes
  } = React.useContext(StepperContext) || {};
  const stepIndex = getStepIndex(stepIndexOverride, stepIndexes, id);
  const stepNumber = stepIndex > -1 ? stepIndex + 1 : '';
  const variant = variantOverride || getVariant(stepIndex, progress, nonLinear, errorState);
  const bubbleText = textBubbleTextOverride || getBubbleText(variant, stepNumber);
  const bubbleThemeColor = textBubbleThemeColorOverride || getThemeColor(variant);
  const dense = denseProp || denseContext;
  const bubbleSize = dense ? 'small' : 'default';
  const handleClick = () => {
    setProgress(stepIndex);
    onClick === null || onClick === void 0 ? void 0 : onClick(stepIndex);
  };
  React.useEffect(() => {
    registerStep === null || registerStep === void 0 ? void 0 : registerStep(id || title, onStepEnter, onStepLeave);
  }, [id, title, registerStep, onStepEnter, onStepLeave]);
  return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    id: id,
    ref: externalRef,
    className: clsx__default["default"]('lmnt lmnt-stepper__step', `lmnt-stepper__step--${variant}`, className),
    disabled: !nonLinear,
    onClick: handleClick,
    type: "button"
  }, customProps), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "lmnt-stepper__step-indicator"
  }, /*#__PURE__*/React__default["default"].createElement(reactTextBubble.TextBubble, _extends__default["default"]({
    bubbleSize: bubbleSize,
    themeColor: bubbleThemeColor,
    text: bubbleText
  }, textBubbleProps))), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "lmnt-stepper__step-text"
  }, /*#__PURE__*/React__default["default"].createElement(reactTypography.TypoSubtitle, {
    tag: "div",
    className: "lmnt-stepper__step-title"
  }, title), /*#__PURE__*/React__default["default"].createElement(reactTypography.TypoCaption, {
    tag: "div",
    className: "lmnt-stepper__step-secondary-text"
  }, secondaryText)));
});
Step.displayName = 'Step';
Step.propTypes = StepPropTypes;
Step.defaultProps = StepDefaultProps;

const getLabel = stepType => {
  switch (stepType) {
    case 'confirm':
      return 'Confirm';
    case 'prev':
      return 'Prev';
    case 'next':
    default:
      return 'Next';
  }
};
const StepButton = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    buttonProps,
    className,
    customLabel,
    disabled,
    confirmDisabled,
    onClick,
    persistent,
    direction,
    tag: Tag = reactButton.Button,
    ...customProps
  } = props;
  const {
    next,
    prev,
    progress,
    stepIndexes,
    confirm
  } = React.useContext(StepperContext) || {};
  const lastStep = direction === 'next' && progress === ((stepIndexes === null || stepIndexes === void 0 ? void 0 : stepIndexes.length) || 0) - 1;
  const stepType = lastStep ? 'confirm' : direction;
  const hidePrevious = stepType === 'prev' && progress === 0;
  const buttonDisabled = confirmDisabled && lastStep || disabled || hidePrevious;
  const labelActual = customLabel || getLabel(stepType);
  const handClick = () => {
    if (stepType === 'confirm') {
      confirm();
      onClick === null || onClick === void 0 ? void 0 : onClick();
      return;
    }
    direction === 'prev' ? prev() : next();
    onClick === null || onClick === void 0 ? void 0 : onClick();
  };
  if (!hidePrevious || persistent) return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: externalRef,
    className: clsx__default["default"]('lmnt-stepper__step-button', hidePrevious && 'lmnt-stepper__step-button--hidden', className),
    disabled: buttonDisabled,
    variant: stepType === 'prev' ? 'text' : 'filled',
    onClick: handClick
  }, buttonProps, customProps), labelActual);
  return null;
});
StepButton.displayName = 'StepButton';
StepButton.propTypes = StepButtonPropTypes;
StepButton.defaultProps = StepButtonDefaultProps;

const StepContent = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  // eslint-disable-next-line react/prop-types
  const {
    children,
    className,
    fullWidth,
    padding,
    persistent,
    stepId,
    tag: Tag,
    ...customProps
  } = props;
  const {
    stepIndexes,
    progress
  } = React.useContext(StepperContext) || {};
  const active = progress === (stepIndexes === null || stepIndexes === void 0 ? void 0 : stepIndexes.findIndex(x => x === stepId));
  if (active || persistent) return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: externalRef,
    className: clsx__default["default"]('lmnt-stepper__step-content', !active && 'lmnt-stepper__step-content--hidden', fullWidth && 'lmnt-stepper__step-content--full-width', padding === 'airy' && 'lmnt-padding--airy', padding === 'dense' && 'lmnt-padding--dense', padding === 'standard' && 'lmnt-padding--standard', className)
  }, customProps), children);
  return null;
});
StepContent.displayName = StepContent;
StepContent.propTypes = StepContentPropTypes;
StepContent.defaultProps = StepContentDefaultProps;

const StepDivider = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    active: activeOverride,
    className,
    dividerProps,
    nearestStepIndex,
    ...customProps
  } = props;
  const {
    progress,
    nonLinear
  } = React.useContext(StepperContext) || {};
  const active = activeOverride || !nonLinear && progress > nearestStepIndex;
  return /*#__PURE__*/React__default["default"].createElement(reactDivider.Divider, _extends__default["default"]({
    ref: externalRef,
    variant: "tall",
    className: clsx__default["default"]('lmnt-stepper__step-divider', className),
    themeColor: active ? 'primary' : 'on-surface-stroke'
  }, dividerProps, customProps));
});
StepDivider.displayName = 'StepDivider';
StepDivider.propTypes = StepDividerPropTypes;
StepDivider.defaultProps = StepDividerDefaultProps;

const StepperContainer = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    onConfirm,
    onNext,
    onPrev,
    onStepChange,
    tag,
    ...customProps
  } = props;
  const Tag = tag || 'div';
  const [dense, setDense] = React.useState();
  const [vertical, setVertical] = React.useState(false);
  const [nonLinear, setNonLinear] = React.useState(false);
  const [rtl, setRtl] = React.useState(false);
  const [progress, setProgress] = React.useState(0);
  const [stepRegistration, setStepRegistration] = React.useState([]);
  const [stepIndexes, setStepIndexes] = React.useState([]);
  const ref = React.useRef();
  React.useEffect(() => {
    setStepIndexes(stepRegistration.map(x => x.stepId));
  }, [stepRegistration]);
  const registerStep = React.useCallback((key, onStepEnter, onStepLeave) => {
    setStepRegistration(current => {
      if (current.find(x => x === key)) return current;
      const next = [...current];
      next.push({
        stepId: key,
        onStepEnter,
        onStepLeave
      });
      return next;
    });
  }, []);
  const handleProgressChange = React.useCallback(newProgress => {
    var _stepRegistration$pro, _stepRegistration$pro2, _stepRegistration$new, _stepRegistration$new2;
    setProgress(newProgress);
    (_stepRegistration$pro = (_stepRegistration$pro2 = stepRegistration[progress]).onStepLeave) === null || _stepRegistration$pro === void 0 ? void 0 : _stepRegistration$pro.call(_stepRegistration$pro2, newProgress, progress);
    (_stepRegistration$new = (_stepRegistration$new2 = stepRegistration[newProgress]).onStepEnter) === null || _stepRegistration$new === void 0 ? void 0 : _stepRegistration$new.call(_stepRegistration$new2, newProgress, progress);
    onStepChange === null || onStepChange === void 0 ? void 0 : onStepChange(newProgress, progress);
  }, [onStepChange, progress, stepRegistration]);
  const prev = React.useCallback(() => {
    const newProgress = progress <= 0 ? 0 : progress - 1;
    handleProgressChange(newProgress, progress);
    onPrev === null || onPrev === void 0 ? void 0 : onPrev(newProgress, progress);
  }, [handleProgressChange, onPrev, progress]);
  const next = React.useCallback(() => {
    const stepCount = stepIndexes.length;
    const newProgress = progress + 1;
    if (newProgress >= stepCount) return;
    handleProgressChange(newProgress, progress);
    onNext === null || onNext === void 0 ? void 0 : onNext(newProgress, progress);
  }, [handleProgressChange, onNext, progress, stepIndexes.length]);
  const confirm = React.useCallback(() => {
    onConfirm === null || onConfirm === void 0 ? void 0 : onConfirm();
  }, [onConfirm]);
  const contextValue = React.useMemo(() => ({
    confirm,
    dense,
    next,
    nonLinear,
    prev,
    progress,
    registerStep,
    rtl,
    setDense,
    setNonLinear,
    setProgress,
    setRtl,
    setVertical,
    stepIndexes,
    vertical
  }), [confirm, dense, next, nonLinear, prev, progress, registerStep, rtl, stepIndexes, vertical]);
  React.useImperativeHandle(externalRef, () => ({
    ...contextValue,
    current: ref.current
  }));
  return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: ref,
    className: clsx__default["default"]('lmnt-stepper__container', rtl && 'lmnt-stepper__container--rtl', vertical && 'lmnt-stepper__container--vertical', className)
  }, customProps), /*#__PURE__*/React__default["default"].createElement(StepperContext.Provider, {
    value: contextValue
  }, children));
});
StepperContainer.displayName = 'StepperContainer';
StepperContainer.propTypes = StepperContainerPropTypes;
StepperContainer.defaultProps = StepperContainerDefaultProps;

const customContainer = containerRef => content => /*#__PURE__*/React__default["default"].createElement(StepperContainer, {
  ref: containerRef
}, content);

// TODO: Mikes todo list
// - fix flash of checked steppers on load (I think this is from the new "active" logic change)
// - finish form validation demo (do we need to add a validation to Step that passes a param that allows variant to be updated?)

const Stepper = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    border,
    children,
    className,
    dense,
    nonLinear,
    progress,
    rtl,
    steps,
    tag: Tag,
    vertical,
    ...customProps
  } = props;
  const context = React.useContext(StepperContext);
  const [sharedState, setSharedState] = React.useState();
  const containerRef = React.useRef();
  React.useEffect(() => {
    // make sure we only set this once
    if (sharedState) return;
    // Shared state is managed in the StepperContainer. However, if StepperContainer has not been created externally we create one using ConditionalWrapper and get shared state via ref.
    const {
      setDense,
      setProgress,
      setNonLinear,
      setVertical,
      setRtl
    } = context || containerRef.current;
    if (!setDense || !setNonLinear || !setProgress || !setRtl || !setVertical) return;
    // store minimum we need here
    setSharedState({
      setDense,
      setNonLinear,
      setProgress,
      setRtl,
      setVertical
    });
  }, [context, sharedState]);
  React.useEffect(() => {
    var _sharedState$setDense;
    if (dense === undefined) return;
    sharedState === null || sharedState === void 0 ? void 0 : (_sharedState$setDense = sharedState.setDense) === null || _sharedState$setDense === void 0 ? void 0 : _sharedState$setDense.call(sharedState, dense);
  }, [dense, sharedState]);
  React.useEffect(() => {
    var _sharedState$setNonLi;
    if (nonLinear === undefined) return;
    sharedState === null || sharedState === void 0 ? void 0 : (_sharedState$setNonLi = sharedState.setNonLinear) === null || _sharedState$setNonLi === void 0 ? void 0 : _sharedState$setNonLi.call(sharedState, nonLinear);
  }, [nonLinear, sharedState]);
  React.useEffect(() => {
    var _sharedState$setProgr;
    if (progress === undefined) return;
    sharedState === null || sharedState === void 0 ? void 0 : (_sharedState$setProgr = sharedState.setProgress) === null || _sharedState$setProgr === void 0 ? void 0 : _sharedState$setProgr.call(sharedState, progress);
  }, [progress, sharedState]);
  React.useEffect(() => {
    var _sharedState$setRtl;
    if (rtl === undefined) return;
    sharedState === null || sharedState === void 0 ? void 0 : (_sharedState$setRtl = sharedState.setRtl) === null || _sharedState$setRtl === void 0 ? void 0 : _sharedState$setRtl.call(sharedState, rtl);
  }, [rtl, sharedState]);
  React.useEffect(() => {
    var _sharedState$setVerti;
    if (vertical === undefined) return;
    sharedState === null || sharedState === void 0 ? void 0 : (_sharedState$setVerti = sharedState.setVertical) === null || _sharedState$setVerti === void 0 ? void 0 : _sharedState$setVerti.call(sharedState, vertical);
  }, [vertical, sharedState]);
  return /*#__PURE__*/React__default["default"].createElement(reactCommon.ConditionalWrapper, {
    condition: !context,
    wrapper: customContainer(containerRef)
  }, /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: externalRef,
    className: clsx__default["default"]('lmnt lmnt-stepper', border === 'none' && 'lmnt-stepper--un-bordered', dense && 'lmnt-stepper--dense', rtl && 'lmnt-stepper--rtl', vertical && 'lmnt-stepper--vertical', nonLinear && 'lmnt-stepper--non-linear', className)
  }, customProps), steps && steps.map((s, i) => /*#__PURE__*/React__default["default"].createElement(React.Fragment, {
    key: s.title
  }, /*#__PURE__*/React__default["default"].createElement(Step, _extends__default["default"]({
    stepIndex: i
  }, s)), i !== steps.length - 1 && /*#__PURE__*/React__default["default"].createElement(StepDivider, {
    nearestStepIndex: i
  }))), children));
});
Stepper.displayName = 'Stepper';
Stepper.propTypes = StepperPropTypes;
Stepper.defaultProps = StepperDefaultProps;

const StepperButtonContainer = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    border,
    children,
    className,
    fullWidth: fullWidthProp,
    padding,
    tag: Tag,
    ...customProps
  } = props;
  const {
    vertical
  } = React.useContext(StepperContext) || {};
  const fullWidth = fullWidthProp !== undefined ? fullWidthProp : vertical;
  return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: externalRef,
    className: clsx__default["default"]('lmnt-stepper__button-container', border === 'none' && 'lmnt-stepper__button-container--un-bordered', fullWidth && 'lmnt-stepper__button-container--full-width', className)
  }, customProps), /*#__PURE__*/React__default["default"].createElement("div", {
    className: clsx__default["default"]('lmnt-stepper__button-container-inner', padding === 'dense' && 'lmnt-padding--dense', padding === 'standard' && 'lmnt-padding--standard', padding === 'airy' && 'lmnt-padding--airy')
  }, children));
});
StepperButtonContainer.displayName = 'StepperButtonContainer';
StepperButtonContainer.propTypes = StepperButtonContainerPropTypes;
StepperButtonContainer.defaultProps = StepperButtonContainerDefaultProps;

const StepperContentContainer = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    border,
    children,
    className,
    fullWidth,
    padding,
    tag: Tag,
    ...customProps
  } = props;
  return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: externalRef,
    className: clsx__default["default"]('lmnt-stepper__content-container', className)
  }, customProps), children);
});
StepperContentContainer.displayName = 'StepperButtonContainer';
StepperContentContainer.propTypes = StepperButtonContainerPropTypes;
StepperContentContainer.defaultProps = StepperButtonContainerDefaultProps;

exports.Step = Step;
exports.StepButton = StepButton;
exports.StepContent = StepContent;
exports.StepDivider = StepDivider;
exports.Stepper = Stepper;
exports.StepperButtonContainer = StepperButtonContainer;
exports.StepperContainer = StepperContainer;
exports.StepperContentContainer = StepperContentContainer;
exports.StepperContext = StepperContext;
//# sourceMappingURL=index.js.map
