import _extends from '@babel/runtime-corejs3/helpers/extends';
import { MDCLinearProgress } from '@material/linear-progress';
import React, { forwardRef, useRef, useImperativeHandle, useEffect } from 'react';
import clsx from 'clsx';
import PropTypes from 'prop-types';
import { deprecatedProp } from '@element/react-common';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const LinearProgressPropTypes = {
  /**
   * Accessibility label.
   *
   * Defaults to **'Progress Indicator'**.
   */
  ariaLabel: PropTypes.string,
  /**
   * The buffer bar is a secondary bar to indicate the amount of buffered data (useful for video playback indicators). Buffer bar shows maximum width of linearProgress bar. Buffer is only used for determinate progress bar.
   *
   * Defaults to **1**.
   */
  buffer: PropTypes.number,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * @deprecated _Use `variant='indeterminate'` instead._
   *
   * Toggles the component between the determinate (when a known percentage has been completed) and indeterminate state (a continuously animated indicator used when there is no known percentage of completion).
   *
   * Defaults to **undefined**.
   */
  indeterminate: deprecatedProp(PropTypes.bool, "LinearProgress", 'Use `variant="indeterminate"` instead.'),
  /**
   * Puts the component in the open or closed state.
   *
   * Defaults to **true**.
   */
  open: PropTypes.bool,
  /**
   * The current progress of a determinate progress indicator. Must be between 0 and 1. Progress is only used for determinate progress bar.
   *
   * Defaults to **0**.
   */
  progress: PropTypes.number,
  /**
   * Reverses the direction of the linear progress indicator.
   *
   * Defaults to **false**.
   */
  reversed: PropTypes.bool,
  /**
   * Color of the indicator stroke with 'primary' or 'secondary' theme color.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes.oneOf(["primary", "secondary", "primary-variant", "secondary-variant"]),
  /**
   * An indeterminate LinearProgress indicator will continue animating until closed. A determinate LinearProgress indicator will display the current progress.
   *
   * Defaults to **'indeterminate'**.
   */
  variant: PropTypes.oneOf(["determinate", "indeterminate"])
};
const LinearProgressDefaultProps = {
  ariaLabel: "Progress Indicator",
  buffer: 1,
  className: undefined,
  indeterminate: undefined,
  open: true,
  progress: 0,
  reversed: false,
  themeColor: "primary",
  variant: "indeterminate"
};

const LinearProgress = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    ariaLabel,
    buffer,
    className,
    indeterminate,
    open,
    progress,
    reversed,
    themeColor,
    variant,
    ...customProps
  } = props;
  const rootRef = useRef();
  const mdcLinearProgress = useRef();
  useImperativeHandle(externalRef, () => rootRef.current, []);
  useEffect(() => {
    mdcLinearProgress.current = new MDCLinearProgress(rootRef.current);
    return () => {
      mdcLinearProgress.current.destroy();
    };
  }, [mdcLinearProgress]);
  useEffect(() => {
    mdcLinearProgress.current.buffer = buffer;
  }, [mdcLinearProgress, buffer]);

  // Added extra dependencies to avoid issue where animation stopped when open or themeColor changed
  useEffect(() => {
    mdcLinearProgress.current.determinate = variant === 'determinate';
    mdcLinearProgress.current.progress = progress;
  }, [variant, progress, themeColor, open]);
  return /*#__PURE__*/React.createElement("div", _extends({
    role: "progressbar",
    "aria-label": ariaLabel,
    "aria-valuemin": "0",
    "aria-valuemax": "1",
    "aria-valuenow": progress,
    ref: rootRef,
    dir: reversed ? 'rtl' : undefined,
    className: clsx(className, 'lmnt', 'mdc-linear-progress', !open && 'mdc-linear-progress--closed', indeterminate || variant === 'indeterminate' && 'mdc-linear-progress--indeterminate', themeColor === 'primary' && 'lmnt-linear-progress--primary', themeColor === 'primary-variant' && 'lmnt-linear-progress--primary-variant', themeColor === 'secondary' && 'lmnt-linear-progress--secondary', themeColor === 'secondary-variant' && 'lmnt-linear-progress--secondary-variant')
  }, customProps), /*#__PURE__*/React.createElement("div", {
    className: "mdc-linear-progress__buffer"
  }, /*#__PURE__*/React.createElement("div", {
    className: "mdc-linear-progress__buffer-bar"
  }), /*#__PURE__*/React.createElement("div", {
    className: "mdc-linear-progress__buffer-dots"
  })), /*#__PURE__*/React.createElement("div", {
    className: "mdc-linear-progress__bar mdc-linear-progress__primary-bar"
  }, /*#__PURE__*/React.createElement("span", {
    className: "mdc-linear-progress__bar-inner"
  })), /*#__PURE__*/React.createElement("div", {
    className: "mdc-linear-progress__bar mdc-linear-progress__secondary-bar"
  }, /*#__PURE__*/React.createElement("span", {
    className: "mdc-linear-progress__bar-inner"
  })));
});
LinearProgress.displayName = 'LinearProgress';
LinearProgress.propTypes = LinearProgressPropTypes;
LinearProgress.defaultProps = LinearProgressDefaultProps;

export { LinearProgress };
//# sourceMappingURL=index.es.js.map
