'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var clsx = require('clsx');
var React = require('react');
var PropTypes = require('prop-types');
var reactGroup = require('@element/react-group');
var reactTypography = require('@element/react-typography');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var React__default = /*#__PURE__*/_interopDefault(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const HeroPropTypes = {
  /**
   * Aligns the Hero contents.
   *
   * Defaults to **'centered'**.
   */
  alignment: PropTypes__default["default"].oneOf(["center-bottom", "center-top", "centered", "left-bottom", "left-center", "left-top", "right-bottom", "right-center", "right-top"]),
  /**
   * Content to be rendered inside the Hero.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Image Url for Hero background image
   *
   * Defaults to **null**.
   */
  imageUrl: PropTypes__default["default"].string,
  /**
   * Adds an overlay over the Hero. Use `overlayProps` to send props to the Hero Overlay component.  See Hero Overlay for prop details.
   *
   * Defaults to **false**.
   */
  overlay: PropTypes__default["default"].bool,
  /**
   * Props sent to Hero Overlay. See Hero Overlay for prop details.
   *
   * Defaults to **{}**.
   */
  overlayProps: PropTypes__default["default"].object,
  /**
   * Override the default background color. Can only be used if background image is omitted.
   *
   * Defaults to **empty string**.
   */
  themeColor: PropTypes__default["default"].oneOf(["", "surface", "primary", "secondary"])
};
const HeroDefaultProps = {
  alignment: "centered",
  children: null,
  className: undefined,
  imageUrl: null,
  overlay: false,
  overlayProps: {},
  themeColor: ""
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const HeroContentPropTypes = {
  /**
   * Content to be rendered inside the Hero Content.  Will take precedence over props.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Button to be rendered inside the Hero Content.
   *
   * Defaults to **null**.
   */
  heroBtn: PropTypes__default["default"].node,
  /**
   * Logo to be rendered inside the Hero Content.
   *
   * Defaults to **null**.
   */
  logo: PropTypes__default["default"].node,
  /**
   * Overline text for the Hero Content. Cannot be used with children.
   *
   * Defaults to **'Overline'**.
   */
  overline: PropTypes__default["default"].string,
  /**
   * Adds a padding style to the Hero. Must be a valid CSS padding declaration. i.e. 38px 30px
   *
   * Defaults to **null**.
   */
  padding: PropTypes__default["default"].string,
  /**
   * Passthrough style object.
   *
   * Defaults to **null**.
   */
  style: PropTypes__default["default"].object,
  /**
   * Subtitle text for the Hero Content. Cannot be used with children.
   *
   * Defaults to **'Subtitle'**.
   */
  subtitle: PropTypes__default["default"].string,
  /**
   * Set the color of the text.  Make sure to check for accessibility compliance.
   *
   * Defaults to **'on-unknown-black-active'**.
   */
  textColor: PropTypes__default["default"].oneOf(["on-unknown-black-active", "on-unknown-white-active", "primary", "secondary", "on-primary", "on-secondary"]),
  /**
   * Title text for the Hero Content. Cannot be used with children.
   *
   * Defaults to **'Title'**.
   */
  title: PropTypes__default["default"].string
};
const HeroContentDefaultProps = {
  children: null,
  className: undefined,
  heroBtn: null,
  logo: null,
  overline: "Overline",
  padding: null,
  style: null,
  subtitle: "Subtitle",
  textColor: "on-unknown-black-active",
  title: "Title"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const HeroOverlayPropTypes = {
  /**
   * Content to be rendered inside the Hero Overlay.  Useful for angles or other non semantic elements displayed in the Hero.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Overlay theme color.
   *
   * Defaults to **'dark'**.
   */
  overlayThemeColor: PropTypes__default["default"].oneOf(["dark", "light", "surface", "linear-gradient-white-to-bottom", "linear-gradient-white-to-top", "linear-gradient-black-to-bottom", "linear-gradient-black-to-top", "linear-gradient-primary-dark-to-bottom", "linear-gradient-primary-dark-to-top", "linear-gradient-primary-darker-to-bottom", "linear-gradient-primary-darker-to-top", "linear-gradient-primary-to-bottom", "linear-gradient-primary-to-top", "linear-gradient-secondary-dark-to-bottom", "linear-gradient-secondary-dark-to-top", "linear-gradient-secondary-darker-to-bottom", "linear-gradient-secondary-darker-to-top", "linear-gradient-secondary-to-bottom", "linear-gradient-secondary-to-top"]),
  /**
   * Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Hero accordingly to have Hero Content over the overlay.
   *
   * Defaults to **'full'**.
   */
  position: PropTypes__default["default"].oneOf(["full", "leading", "trailing"])
};
const HeroOverlayDefaultProps = {
  children: null,
  className: undefined,
  overlayThemeColor: "dark",
  position: "full"
};

const HeroOverlay = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    position,
    overlayThemeColor,
    ...customProps
  } = props;
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const classNames = React.useMemo(() => position !== 'none' && clsx__default["default"]('lmnt', 'lmnt-hero-overlay ', !overlayThemeColor.includes('gradient') && overlayThemeColor !== 'surface' && `lmnt-hero-overlay__${overlayThemeColor}`, overlayThemeColor.includes('gradient') && overlayThemeColor !== 'surface' && `lmnt-theme--bg-${overlayThemeColor}`, overlayThemeColor === 'surface' && 'lmnt-theme-surface-bg', `lmnt-hero-overlay__${position}`, className), [overlayThemeColor, position, className]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    className: classNames
  }, customProps), children && children);
});
HeroOverlay.displayName = 'HeroOverlay';
HeroOverlay.propTypes = HeroOverlayPropTypes;
HeroOverlay.defaultProps = HeroOverlayDefaultProps;

const Hero = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    alignment,
    children,
    className,
    imageUrl,
    style,
    themeColor,
    overlay,
    overlayProps,
    ...customProps
  } = props;
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const classNames = React.useMemo(() => clsx__default["default"]('lmnt lmnt-hero', themeColor && `lmnt-theme-${themeColor}-bg`, `lmnt-hero__align-${alignment}`, className), [alignment, className, themeColor]);
  const styles = React.useMemo(() => {
    if (!imageUrl) return style;
    return {
      ...style,
      backgroundImage: `url(${imageUrl})`
    };
  }, [imageUrl, style]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: classNames,
    style: styles
  }, customProps), overlay && /*#__PURE__*/React__default["default"].createElement(HeroOverlay, overlayProps), children);
});
Hero.displayName = 'Hero';
Hero.propTypes = HeroPropTypes;
Hero.defaultProps = HeroDefaultProps;

const HeroContent = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    heroBtn,
    logo,
    overline,
    padding,
    title,
    style,
    subtitle,
    textColor,
    ...customProps
  } = props;
  const ref = React.useRef();
  const classNames = React.useMemo(() => clsx__default["default"]('lmnt lmnt-hero-content', `lmnt-theme-${textColor}`, className), [className, textColor]);
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const styles = React.useMemo(() => ({
    ...style,
    padding
  }), [padding, style]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: classNames
  }, customProps, {
    style: styles
  }), children || /*#__PURE__*/React__default["default"].createElement(reactGroup.Group, {
    gap: "dense",
    direction: "vertical",
    secondaryAlign: "center"
  }, logo && logo, overline && /*#__PURE__*/React__default["default"].createElement(reactTypography.Typography, {
    type: "overline"
  }, overline), title && /*#__PURE__*/React__default["default"].createElement(reactTypography.Typography, {
    type: "display2"
  }, title), subtitle && /*#__PURE__*/React__default["default"].createElement(reactTypography.Typography, {
    type: "display6"
  }, subtitle), heroBtn && heroBtn));
});
HeroContent.displayName = 'HeroContent';
HeroContent.propTypes = HeroContentPropTypes;
HeroContent.defaultProps = HeroContentDefaultProps;

exports.Hero = Hero;
exports.HeroContent = HeroContent;
exports.HeroOverlay = HeroOverlay;
//# sourceMappingURL=index.js.map
