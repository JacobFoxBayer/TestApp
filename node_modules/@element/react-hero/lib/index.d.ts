import React from 'react';


export interface HeroProps {
    /**
    * Aligns the Hero contents.
    *
    * Defaults to **'centered'**.
    */
    alignment?: string;
    /**
    * Content to be rendered inside the Hero.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Image Url for Hero background image
    *
    * Defaults to **null**.
    */
    imageUrl?: string;
    /**
    * Adds an overlay over the Hero. Use `overlayProps` to send props to the Hero Overlay component.  See Hero Overlay for prop details.
    *
    * Defaults to **false**.
    */
    overlay?: boolean;
    /**
    * Props sent to Hero Overlay. See Hero Overlay for prop details.
    *
    * Defaults to **{}**.
    */
    overlayProps?: object;
    /**
    * Override the default background color. Can only be used if background image is omitted.
    *
    * Defaults to **empty string**.
    */
    themeColor?: string;
}

/**
* Heros are the area of the page between the navigation and the start of your content. They are often images, but they do not have to be. They serve as the starting point for your page and the contents should orient the user to the content on the rest of the page.
 * @prop {string} alignment - Aligns the Hero contents. Defaults to _'centered'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the Hero. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} imageUrl - Image Url for Hero background image Defaults to _null_.
 * @prop {boolean} overlay - Adds an overlay over the Hero. Use `overlayProps` to send props to the Hero Overlay component.  See Hero Overlay for prop details. Defaults to _false_.
 * @prop {object} overlayProps - Props sent to Hero Overlay. See Hero Overlay for prop details. Defaults to _{}_.
 * @prop {string} themeColor - Override the default background color. Can only be used if background image is omitted. Defaults to _empty string_.
*/
export const Hero: React.FunctionComponent<HeroProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface HeroContentProps {
    /**
    * Content to be rendered inside the Hero Content.  Will take precedence over props.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Button to be rendered inside the Hero Content.
    *
    * Defaults to **null**.
    */
    heroBtn?: React.ReactNode;
    /**
    * Logo to be rendered inside the Hero Content.
    *
    * Defaults to **null**.
    */
    logo?: React.ReactNode;
    /**
    * Overline text for the Hero Content. Cannot be used with children.
    *
    * Defaults to **'Overline'**.
    */
    overline?: string;
    /**
    * Adds a padding style to the Hero. Must be a valid CSS padding declaration. i.e. 38px 30px
    *
    * Defaults to **null**.
    */
    padding?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Subtitle text for the Hero Content. Cannot be used with children.
    *
    * Defaults to **'Subtitle'**.
    */
    subtitle?: string;
    /**
    * Set the color of the text.  Make sure to check for accessibility compliance.
    *
    * Defaults to **'on-unknown-black-active'**.
    */
    textColor?: string;
    /**
    * Title text for the Hero Content. Cannot be used with children.
    *
    * Defaults to **'Title'**.
    */
    title?: string;
}

/**
* Hero text is the block for the text in the Hero Banner.  You can either use the props to send in prearranged texts or any valid component you need to render.
 * @prop {React.ReactNode} children - Content to be rendered inside the Hero Content.  Will take precedence over props. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} heroBtn - Button to be rendered inside the Hero Content. Defaults to _null_.
 * @prop {React.ReactNode} logo - Logo to be rendered inside the Hero Content. Defaults to _null_.
 * @prop {string} overline - Overline text for the Hero Content. Cannot be used with children. Defaults to _'Overline'_.
 * @prop {string} padding - Adds a padding style to the Hero. Must be a valid CSS padding declaration. i.e. 38px 30px Defaults to _null_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {string} subtitle - Subtitle text for the Hero Content. Cannot be used with children. Defaults to _'Subtitle'_.
 * @prop {string} textColor - Set the color of the text.  Make sure to check for accessibility compliance. Defaults to _'on-unknown-black-active'_.
 * @prop {string} title - Title text for the Hero Content. Cannot be used with children. Defaults to _'Title'_.
*/
export const HeroContent: React.FunctionComponent<HeroContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface HeroOverlayProps {
    /**
    * Content to be rendered inside the Hero Overlay.  Useful for angles or other non semantic elements displayed in the Hero.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Overlay theme color.
    *
    * Defaults to **'dark'**.
    */
    overlayThemeColor?: string;
    /**
    * Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Hero accordingly to have Hero Content over the overlay.
    *
    * Defaults to **'full'**.
    */
    position?: string;
}

/**
* Hero Overlay is an optional overlay that goes over the Hero Banner.  You can send in children as angles or other non semantic elements displayed in the Hero.
 * @prop {React.ReactNode} children - Content to be rendered inside the Hero Overlay.  Useful for angles or other non semantic elements displayed in the Hero. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} overlayThemeColor - Overlay theme color. Defaults to _'dark'_.
 * @prop {string} position - Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Hero accordingly to have Hero Content over the overlay. Defaults to _'full'_.
*/
export const HeroOverlay: React.FunctionComponent<HeroOverlayProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
