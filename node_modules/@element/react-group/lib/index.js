'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var clsx = require('clsx');
var PropTypes = require('prop-types');
var reactCommon = require('@element/react-common');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const GroupPropTypes = {
  /**
   * Children to be rendered. Expects multiple components of a similar type.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The grouping direction.
   *
   * Defaults to **'horizontal'**.
   */
  direction: PropTypes__default["default"].oneOf(["horizontal", "vertical", "horizontal-reverse", "vertical-reverse"]),
  /**
   * Sets the Group width to be 100%.
   *
   * Defaults to **false**.
   */
  fullWidth: PropTypes__default["default"].bool,
  /**
   * How much spacing between items. Dense is 8p, standard is 16px and airy is 24px.
   *
   * Defaults to **'standard'**.
   */
  gap: PropTypes__default["default"].oneOf(["dense", "standard", "airy", "none"]),
  /**
   * @deprecated _Renamed for improved clarity. See `gap`._
   *
   * How much spacing between items. Dense is 8p, standard is 16px and airy is 24px.
   *
   * Defaults to **undefined**.
   */
  padding: reactCommon.deprecatedProp(PropTypes__default["default"].oneOf(["dense", "standard", "airy", "none"]), "Group", "Renamed for improved clarity. See `gap`."),
  /**
   * Alignment along the primary axis. 'For `horizontal` grouping this means the x-axis positioning, for `vertical`, this means the y-axis positioning.Equivalent to flexbox 'justify-content.
   *
   * Defaults to **'start'**.
   */
  primaryAlign: PropTypes__default["default"].oneOf(["start", "end", "center", "space-evenly", "space-between", "space-around"]),
  /**
   * Alignment along the secondary axis. For horizontal grouping this means the y-axis positioning, for vertical, this means the x-axis positioning.Equivalent to flexbox 'align-items.
   *
   * Defaults to **'baseline'**.
   */
  secondaryAlign: PropTypes__default["default"].oneOf(["start", "end", "center", "stretch", "baseline"])
};
const GroupDefaultProps = {
  children: null,
  direction: "horizontal",
  fullWidth: false,
  gap: "standard",
  padding: undefined,
  primaryAlign: "start",
  secondaryAlign: "baseline"
};

const getSecondaryAlignment = align => {
  switch (align) {
    case 'end':
      return 'flex-end';
    case 'start':
      return 'flex-start';
    case 'center':
      return 'center';
    case 'stretch':
      return 'stretch';
    case 'baseline':
    default:
      return 'baseline';
  }
};
const getPrimaryAlignment = justification => {
  switch (justification) {
    case 'end':
      return 'flex-end';
    case 'center':
      return 'center';
    case 'space-evenly':
      return 'space-evenly';
    case 'space-between':
      return 'space-between';
    case 'space-around':
      return 'space-around';
    case 'start':
    default:
      return 'flex-start';
  }
};
const getPadding = padding => {
  switch (padding) {
    case 'dense':
      return '8px';
    case 'airy':
      return '24px';
    case 'standard':
      return '16px';
    case 'none':
    default:
      return '0px';
  }
};
const getDirection = direction => {
  switch (direction) {
    case 'horizontal':
      return 'row';
    case 'vertical':
      return 'column';
    case 'horizontal-reverse':
      return 'row-reverse';
    case 'vertical-reverse':
      return 'column-reverse';
    default:
      return 'row';
  }
};
const Group = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    direction,
    fullWidth,
    gap,
    padding,
    primaryAlign,
    secondaryAlign,
    style,
    variant,
    ...customProps
  } = props;
  const styleActual = {
    display: 'flex',
    flexDirection: getDirection(direction),
    justifyContent: getPrimaryAlignment(primaryAlign),
    alignItems: getSecondaryAlignment(secondaryAlign),
    gap: getPadding(padding || gap),
    width: fullWidth ? '100%' : '',
    ...style
  };
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: clsx__default["default"]('lmnt', 'lmnt-group',
    // variant === 'dense' && 'lmnt-button-group--dense',
    // variant === 'standard' && 'lmnt-button-group--standard',
    // variant === 'airy' && 'lmnt-button-group--airy',
    className),
    style: styleActual
  }, customProps), children);
});
Group.displayName = 'Group';
Group.propTypes = GroupPropTypes;
Group.defaultProps = GroupDefaultProps;

exports.Group = Group;
//# sourceMappingURL=index.js.map
