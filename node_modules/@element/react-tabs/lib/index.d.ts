import React from 'react';


export interface TabProps {
    /**
    * Indicates that the tab is active.
    *
    * Defaults to **undefined**.
    */
    active?: boolean;
    /**
    * The custom tab notification badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: string | Function | React.ReactNode;
    /**
    * The displayed content. Expects a valid string, though will accept any valid components or markup. If label and `children` are both set, `label` will take priority.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Indicates that the tab should shrink in size to be as narrow as possible without causing text to wrap.
    *
    * Defaults to **false**.
    */
    clustered?: boolean;
    /**
    * Add a leading icon to the tab.
    *
    * Defaults to **undefined**.
    */
    icon?: React.ReactNode;
    /**
    * An icon to be used as the tab indicator. Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). If no icon is provided the tab-indicator will use an underline.
    *
    * Defaults to **null**.
    */
    indicatorIcon?: string;
    /**
    * The tab-indicator will span the entire tab with 'full' or only the content of the tab with 'content'.
    *
    * Defaults to **'full'**.
    */
    indicatorSize?: string;
    /**
    * The tab-indicator will use a 'slide' or 'fade' transition between tabs.
    *
    * Defaults to **'slide'**.
    */
    indicatorTransition?: string;
    /**
    * The displayed text. Expects a valid string. If label and `children` are both set, `label` will take priority.
    *
    * Defaults to **null**.
    */
    label?: React.ReactNode;
    /**
    * Indicates that the tab icon and label should flow vertically instead of horizontally. If stacked is true the tab will not show a badge.  You can place the badge on the leading icon.
    *
    * Defaults to **false**.
    */
    stacked?: boolean;
}

/**
* An individual tab in a TabBar.
 * @prop {boolean} active - Indicates that the tab is active. Defaults to _undefined_.
 * @prop {string|function|React.ReactNode} badge - The custom tab notification badge to be rendered. Defaults to _undefined_.
 * @prop {React.ReactNode} children - The displayed content. Expects a valid string, though will accept any valid components or markup. If label and `children` are both set, `label` will take priority. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} clustered - Indicates that the tab should shrink in size to be as narrow as possible without causing text to wrap. Defaults to _false_.
 * @prop {React.ReactNode} icon - Add a leading icon to the tab. Defaults to _undefined_.
 * @prop {string} indicatorIcon - An icon to be used as the tab indicator. Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). If no icon is provided the tab-indicator will use an underline. Defaults to _null_.
 * @prop {string} indicatorSize - The tab-indicator will span the entire tab with 'full' or only the content of the tab with 'content'. Defaults to _'full'_.
 * @prop {string} indicatorTransition - The tab-indicator will use a 'slide' or 'fade' transition between tabs. Defaults to _'slide'_.
 * @prop {React.ReactNode} label - The displayed text. Expects a valid string. If label and `children` are both set, `label` will take priority. Defaults to _null_.
 * @prop {boolean} stacked - Indicates that the tab icon and label should flow vertically instead of horizontally. If stacked is true the tab will not show a badge.  You can place the badge on the leading icon. Defaults to _false_.
*/
export const Tab: React.FunctionComponent<TabProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TabBarProps {
    /**
    * Index of the currently active tab.
    *
    * Defaults to **0**.
    */
    activeTabIndex?: number;
    /**
    * Accepts one or more Tab components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Clustered tabs can be aligned to 'start', 'center', or 'end'. Requires one or more tabs to have clustered set to true.
    *
    * Defaults to **'start'**.
    */
    clusterAlign?: string;
    /**
    * Indicates that tabs should shrink in size to be as narrow as possible without causing text to wrap.
    *
    * Defaults to **false**.
    */
    clustered?: boolean;
    /**
    * Apply elevated styles to raise the tab-bar above standard content.
    *
    * Defaults to **false**.
    */
    elevated?: boolean;
    /**
    * @deprecated _Please use elevated instead._
    *
    *  Apply a raised style.
    *
    * Defaults to **undefined**.
    */
    raised?: boolean;
    /**
    * @deprecated _Deprecated, containers will scroll when necessary._
    *
    * Create a fixed height scrollable container.
    *
    * Defaults to **undefined**.
    */
    scrollable?: boolean;
    /**
    * Indicates that the tab icon and label should flow vertically instead of horizontally.
    *
    * Defaults to **false**.
    */
    stacked?: boolean;
    /**
    * Background theme color. Accepts one of 'primary', 'secondary', or 'surface'.
    *
    * Defaults to **'surface'**.
    */
    variant?: string;
    /**
    * Fires when switching to a different tab.
    */
    onTabActivated?: Function;
}

/**
* Tabs organize content across different screens, data sets, and other interactions. The Tab Bar contains the Tab Scroller and Tab components.
 * @prop {number} activeTabIndex - Index of the currently active tab. Defaults to _0_.
 * @prop {React.ReactNode} children - Accepts one or more Tab components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} clusterAlign - Clustered tabs can be aligned to 'start', 'center', or 'end'. Requires one or more tabs to have clustered set to true. Defaults to _'start'_.
 * @prop {boolean} clustered - Indicates that tabs should shrink in size to be as narrow as possible without causing text to wrap. Defaults to _false_.
 * @prop {boolean} elevated - Apply elevated styles to raise the tab-bar above standard content. Defaults to _false_.
 * @prop {boolean} raised - Deprecated: Please use elevated instead.  Apply a raised style. Defaults to _undefined_.
 * @prop {boolean} scrollable - Deprecated: Deprecated, containers will scroll when necessary. Create a fixed height scrollable container. Defaults to _undefined_.
 * @prop {boolean} stacked - Indicates that the tab icon and label should flow vertically instead of horizontally. Defaults to _false_.
 * @prop {string} variant - Background theme color. Accepts one of 'primary', 'secondary', or 'surface'. Defaults to _'surface'_.
 *  @event onTabActivated - Fires when switching to a different tab.
*/
export const TabBar: React.FunctionComponent<TabBarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TabIndicatorProps {
    /**
    * Visually activates the indicator.
    *
    * Defaults to **false**.
    */
    active?: boolean;
    /**
    * The tab-indicator will use an underline if no icon is provided.
    *
    * Defaults to **null**.
    */
    icon?: string;
    /**
    * The Tab Indicator will use a 'slide' or 'fade' transition between tabs.
    *
    * Defaults to **'slide'**.
    */
    transition?: string;
}

/**
* A Tab Indicator is a visual guide that shows which Tab is active.
 * @prop {boolean} active - Visually activates the indicator. Defaults to _false_.
 * @prop {string} icon - The tab-indicator will use an underline if no icon is provided. Defaults to _null_.
 * @prop {string} transition - The Tab Indicator will use a 'slide' or 'fade' transition between tabs. Defaults to _'slide'_.
*/
export const TabIndicator: React.FunctionComponent<TabIndicatorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TabScrollerProps {
    /**
    * Clustered tabs can be aligned to 'start', 'center', or 'end'.
    *
    * Defaults to **'start'**.
    */
    align?: string;
    /**
    * Accepts Tab components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A TabScroller allows for smooth native and animated scrolling of tabs. Used internally by TabBar.
 * @prop {string} align - Clustered tabs can be aligned to 'start', 'center', or 'end'. Defaults to _'start'_.
 * @prop {React.ReactNode} children - Accepts Tab components. Defaults to _null_.
*/
export const TabScroller: React.FunctionComponent<TabScrollerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
