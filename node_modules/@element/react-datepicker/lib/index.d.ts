import React from 'react';


export interface CalendarProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * A function for formatting the individual days of the calendar. It takes the date being rendered and returns content.
    *
    * Defaults to **day => day.date**.
    */
    dayCellTemplate?: Function;
    /**
    * Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month. An alternative to disabled dates.
    *
    * Defaults to **false**.
    */
    disableChangeMonth?: boolean;
    /**
    * Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current year. An alternative to disabled dates.
    *
    * Defaults to **false**.
    */
    disableChangeYear?: boolean;
    /**
    * One or more date ranges that are not selectable. Must be in the format: `{ranges: [{ from, to }]}` where from/to are valid javascript date objects.
    *
    * Defaults to **undefined**.
    */
    disabledDates?: object;
    /**
    * Make the calendar float using absolute positioning.
    *
    * Defaults to **true**.
    */
    floating?: boolean;
    /**
    * To show the full month name.
    *
    * Defaults to **true**.
    */
    fullMonthName?: boolean;
    /**
    * Content to appear immediately after the header.
    *
    * Defaults to **undefined**.
    */
    headerContent?: React.ReactNode;
    /**
    * An object describing pre-highlighted dates of the currently visible month. The object can include the following fields: `includeDisabled` = include dates that are outside of the current month in the highlighting. `dates` = an array of valid date objects to highlight, most useful for scattered highlighted dates. `from` and `to` = a valid start and end date range to highlight, most useful for a contiguous block of highlighted dates.
    *
    * Defaults to **undefined**.
    */
    highlightedDates?: object;
    /**
    * Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-Element) component with a parent that has `overflow: hidden`.
    *
    * Defaults to **undefined**.
    */
    hoisted?: boolean;
    /**
    * The current language is right-to-left.
    *
    * Defaults to **false**.
    */
    isRtl?: boolean;
    /**
    * Content to appear before the header.
    *
    * Defaults to **undefined**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`.
    *
    * Defaults to **enUS**.
    */
    locale?: object;
    /**
    * The maximum date selectable. Dates later than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    maxDate?: Date;
    /**
    * Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10.
    *
    * Defaults to **undefined**.
    */
    maxQuickSelectYear?: number;
    /**
    * The minimum date selectable. Dates earlier than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    minDate?: Date;
    /**
    * Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10.
    *
    * Defaults to **undefined**.
    */
    minQuickSelectYear?: number;
    /**
    * Overrides the first day of the week to start on Monday.
    *
    * Defaults to **false**.
    */
    mondayFirst?: boolean;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * The currently selected date.
    *
    * Defaults to **undefined**.
    */
    selectedDate?: Date;
    /**
    * Content to appear to the side of the calendar. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar.
    *
    * Defaults to **undefined**.
    */
    sideContent?: object | string | Function;
    /**
    * Content to appear after the header.
    *
    * Defaults to **undefined**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Use UTC for time calculations.
    *
    * Defaults to **false**.
    */
    useUtc?: boolean;
    /**
    * The date currently displayed on the calendar.
    *
    * Defaults to **new Date()**.
    */
    visibleDate?: Date;
    /**
    * @deprecated _Renamed for consistency. See `visibleDate` instead._
    *
    * The date of the month and year currently displayed on the calendar.
    *
    * Defaults to **undefined**.
    */
    visibleMonthYear?: Date;
    /**
    * Fired when the user selects a date.
    */
    onSelectDate?: Function;
    /**
    * Fired when a disabled date is selected.
    */
    onSelectDisabled?: Function;
    /**
    * Fired when the user selects a month.
    */
    onSelectMonth?: Function;
}

/**
* The calendar popup for Datepicker.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {function} dayCellTemplate - A function for formatting the individual days of the calendar. It takes the date being rendered and returns content. Defaults to _day => day.date_.
 * @prop {boolean} disableChangeMonth - Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month. An alternative to disabled dates. Defaults to _false_.
 * @prop {boolean} disableChangeYear - Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current year. An alternative to disabled dates. Defaults to _false_.
 * @prop {Object} disabledDates - One or more date ranges that are not selectable. Must be in the format: `{ranges: [{ from, to }]}` where from/to are valid javascript date objects. Defaults to _undefined_.
 * @prop {boolean} floating - Make the calendar float using absolute positioning. Defaults to _true_.
 * @prop {boolean} fullMonthName - To show the full month name. Defaults to _true_.
 * @prop {React.ReactNode} headerContent - Content to appear immediately after the header. Defaults to _undefined_.
 * @prop {Object} highlightedDates - An object describing pre-highlighted dates of the currently visible month. The object can include the following fields: `includeDisabled` = include dates that are outside of the current month in the highlighting. `dates` = an array of valid date objects to highlight, most useful for scattered highlighted dates. `from` and `to` = a valid start and end date range to highlight, most useful for a contiguous block of highlighted dates. Defaults to _undefined_.
 * @prop {boolean} hoisted - Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-Element) component with a parent that has `overflow: hidden`. Defaults to _undefined_.
 * @prop {boolean} isRtl - The current language is right-to-left. Defaults to _false_.
 * @prop {React.ReactNode} leadingContent - Content to appear before the header. Defaults to _undefined_.
 * @prop {object} locale - Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`. Defaults to _enUS_.
 * @prop {Date} maxDate - The maximum date selectable. Dates later than this will be disabled. Defaults to _undefined_.
 * @prop {number} maxQuickSelectYear - Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10. Defaults to _undefined_.
 * @prop {Date} minDate - The minimum date selectable. Dates earlier than this will be disabled. Defaults to _undefined_.
 * @prop {number} minQuickSelectYear - Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10. Defaults to _undefined_.
 * @prop {boolean} mondayFirst - Overrides the first day of the week to start on Monday. Defaults to _false_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {date} selectedDate - The currently selected date. Defaults to _undefined_.
 * @prop {object|string|function} sideContent - Content to appear to the side of the calendar. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar. Defaults to _undefined_.
 * @prop {React.ReactNode} trailingContent - Content to appear after the header. Defaults to _undefined_.
 * @prop {boolean} useUtc - Use UTC for time calculations. Defaults to _false_.
 * @prop {date} visibleDate - The date currently displayed on the calendar. Defaults to _new Date()_.
 * @prop {date} visibleMonthYear - Deprecated: Renamed for consistency. See `visibleDate` instead. The date of the month and year currently displayed on the calendar. Defaults to _undefined_.
 *  @event onSelectDate - Fired when the user selects a date.
 *  @event onSelectDisabled - Fired when a disabled date is selected.
 *  @event onSelectMonth - Fired when the user selects a month.
*/
export const Calendar: React.FunctionComponent<CalendarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DateInputProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the datePicker from being cleared.
    *
    * Defaults to **false**.
    */
    disableClearing?: boolean;
    /**
    * If true, disable datePicker on screen.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Date formatting string or function. For string formatting, valid placeholders include: `D` = day name. `dd` = day of month as 2 digits (leading zero). `d` = day of the month. `MMMM` = month name. `MMM` = abbreviated month name. `MM` month number as 2 digits (leading zero). `M` number of the month. `su` = day of month with ordinal suffix (1st, 2nd, 3rd, 10th). `yyyy` 4 digit year. `yy` 2 digit year. A function may also be used. It will receive the date as the only parameter and must return a valid string.
    *
    * Defaults to **'dd MMM yyyy'**.
    */
    format?: string | Function;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The input label.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`.
    *
    * Defaults to **enUS**.
    */
    locale?: object;
    /**
    * Placeholder text for the input.
    *
    * Defaults to **null**.
    */
    placeholder?: string;
    /**
    * If true, the use will not be allowed to type the date and must select it from the calendar.
    *
    * Defaults to **false**.
    */
    readOnly?: boolean;
    /**
    * Sets html required attribute on input
    *
    * Defaults to **false**.
    */
    required?: boolean;
    /**
    * The currently selected date.
    *
    * Defaults to **undefined**.
    */
    selectedDate?: Date;
    /**
    * Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props.
    *
    * Defaults to **null**.
    */
    textfieldProps?: object;
    /**
    * The value typed into the date input. Note: state management for this field has been elevated outside of date input for the time being.
    *
    * Defaults to **empty string**.
    */
    typedDate?: string;
    /**
    * Use UTC for time calculations.
    *
    * Defaults to **false**.
    */
    useUtc?: boolean;
    /**
    * Applies the selected style to the internal textfield.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when character is entered into text field and on select.
    */
    onChange?: Function;
    /**
    * Fired when input is cleared with the 'x' button.
    */
    onClear?: Function;
    /**
    * Fired when calendar is closed.
    */
    onClose?: Function;
    /**
    * Fired when calendar is opened.
    */
    onOpen?: Function;
    /**
    * Fired when date is selected.
    */
    onSelect?: Function;
    /**
    * Fired when disabled date is clicked
    */
    onSelectDisable?: Function;
    /**
    * Fired when month is selected
    */
    onSelectMonth?: Function;
    /**
    * Fired when calendar is opened.
    */
    onShowCalendar?: Function;
    /**
    * Fired when user types a date.
    */
    onTypedDate?: Function;
}

/**
* The input sub-component of Datepicker.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disableClearing - Prevent the datePicker from being cleared. Defaults to _false_.
 * @prop {boolean} disabled - If true, disable datePicker on screen. Defaults to _false_.
 * @prop {string|function} format - Date formatting string or function. For string formatting, valid placeholders include: `D` = day name. `dd` = day of month as 2 digits (leading zero). `d` = day of the month. `MMMM` = month name. `MMM` = abbreviated month name. `MM` month number as 2 digits (leading zero). `M` number of the month. `su` = day of month with ordinal suffix (1st, 2nd, 3rd, 10th). `yyyy` 4 digit year. `yy` 2 digit year. A function may also be used. It will receive the date as the only parameter and must return a valid string. Defaults to _'dd MMM yyyy'_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} label - The input label. Defaults to _null_.
 * @prop {object} locale - Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`. Defaults to _enUS_.
 * @prop {string} placeholder - Placeholder text for the input. Defaults to _null_.
 * @prop {boolean} readOnly - If true, the use will not be allowed to type the date and must select it from the calendar. Defaults to _false_.
 * @prop {boolean} required - Sets html required attribute on input Defaults to _false_.
 * @prop {date} selectedDate - The currently selected date. Defaults to _undefined_.
 * @prop {object} textfieldProps - Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props. Defaults to _null_.
 * @prop {string} typedDate - The value typed into the date input. Note: state management for this field has been elevated outside of date input for the time being. Defaults to _empty string_.
 * @prop {boolean} useUtc - Use UTC for time calculations. Defaults to _false_.
 * @prop {string} variant - Applies the selected style to the internal textfield. Defaults to _'filled'_.
 *  @event onChange - Fired when character is entered into text field and on select.
 *  @event onClear - Fired when input is cleared with the 'x' button.
 *  @event onClose - Fired when calendar is closed.
 *  @event onOpen - Fired when calendar is opened.
 *  @event onSelect - Fired when date is selected.
 *  @event onSelectDisable - Fired when disabled date is clicked
 *  @event onSelectMonth - Fired when month is selected
 *  @event onShowCalendar - Fired when calendar is opened.
 *  @event onTypedDate - Fired when user types a date.
*/
export const DateInput: React.FunctionComponent<DateInputProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DatepickerProps {
    /**
    * Keep the calendar visible at all times.
    *
    * Defaults to **false**.
    */
    alwaysOpen?: boolean;
    /**
    * @deprecated _Use `leadingContent` instead._
    *
    * Content to appear before the header.
    *
    * Defaults to **undefined**.
    */
    beforeCalendarHeader?: React.ReactNode;
    /**
    * Custom props to be passed to the calendar.
    *
    * Defaults to **undefined**.
    */
    calendarProps?: object;
    /**
    * When typing a date, this will determine 2-digit year parsing behavior. A value of `forward-only` will always use current century, so `02/08/02` will parse to `02/08/2002`. A value of `age`, on the other hand is meant to assist age entry. It will use the current century until a certain point (see `centurySlidingOffset`), and then will revert to the previous century. For example `05/25/01` will parse to `05/25/2001`, while `02/08/76` will parse to `02/08/1976`.
    *
    * Defaults to **'age'**.
    */
    centuryBehavior?: string;
    /**
    * Only used when `centuryBehavior` is set to `age`. This will adjust the cutoff point where 2 digit dates will revert to the previous century to aid in typed age entry. The formula for the cutoff is `last 2 digits of the result of current year minus centuryCutoffOffset`. For example, using the year 2022 and the default value of 76 we would have `lastTwoDigits(2022 - 76) = 46`. So any 2 digit year of `45` or less will become `20XX` and any 2 digit year of `46` or more will become `19XX`. A value of `0` will disable the behavior, regardless of `centuryBehavior`. In 2023, the cutoff will be `47`, and so forth.
    *
    * Defaults to **76**.
    */
    centurySlidingOffset?: number;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * A function for formatting the individual days of the calendar. It takes the date being rendered and returns content.
    *
    * Defaults to **day => day.date**.
    */
    dayCellTemplate?: Function;
    /**
    * Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month.
    *
    * Defaults to **false**.
    */
    disableChangeMonth?: boolean;
    /**
    * Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current month.
    *
    * Defaults to **false**.
    */
    disableChangeYear?: boolean;
    /**
    * Prevent the datePicker from being cleared. It is suggested to use `readOnly` in conjunction with `disableClearing`.
    *
    * Defaults to **false**.
    */
    disableClearing?: boolean;
    /**
    * If true, disable datePicker completely.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * An object describing dates to be disabled and non-interactive. The schema includes the following: `{ dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time.
    *
    * Defaults to **undefined**.
    */
    disabledDates?: object;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply filled style to the date picker input. Previously called primary.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Date formatting string or function. For format strings we use `date-fns.format()`. See https://date-fns.org/v2.23.0/docs/format for more details.
    *
    * Defaults to **'dd MMM yyyy'**.
    */
    format?: string | Function;
    /**
    * Display the full month name in the calendar interface. Note, this does not effect the date format.
    *
    * Defaults to **true**.
    */
    fullMonthName?: boolean;
    /**
    * Content to appear immediately after the `Calendar` header.
    *
    * Defaults to **undefined**.
    */
    headerContent?: React.ReactNode;
    /**
    * An object describing dates to be highlighted. The schema includes the following: `{ includeDisabled, dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time.
    *
    * Defaults to **undefined**.
    */
    highlightedDates?: object;
    /**
    * Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-element) components with a parent that has `overflow: hidden`.
    *
    * Defaults to **undefined**.
    */
    hoisted?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The timezone that the input date is provided in (see `value`). If `outputTimeZone` is not set, the date will be returned as UTC. Supports international timezones. See https://www.iana.org/time-zones.
    *
    * Defaults to **undefined**.
    */
    inputTimeZone?: string;
    /**
    * The input label.
    *
    * Defaults to **undefined**.
    */
    label?: string;
    /**
    * Content to appear before the `Calendar` header.
    *
    * Defaults to **undefined**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`.
    *
    * Defaults to **enUS**.
    */
    locale?: object;
    /**
    * The maximum date selectable. Dates later than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    maxDate?: Date;
    /**
    * The maximum year that will be visible in the year select dropdown. Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10.
    *
    * Defaults to **undefined**.
    */
    maxQuickSelectYear?: number;
    /**
    * The minimum date selectable. Dates earlier than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    minDate?: Date;
    /**
    * The minimum year visible in the year select dropdown. Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10.
    *
    * Defaults to **undefined**.
    */
    minQuickSelectYear?: number;
    /**
    * Overrides the first day of the week to start on Monday.
    *
    * Defaults to **false**.
    */
    mondayFirst?: boolean;
    /**
    * If set, open on that date. Must be either a valid date object or a string that can be parsed by the date constructor.
    *
    * Defaults to **undefined**.
    */
    openDate?: Date;
    /**
    * @deprecated _Replaced by `variant='outlined'`_
    *
    * Apply outlined style to the date picker input. Previously called secondary.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * The timezone the date will be converted to and formatted as when using `useUtc`. If `inputTimeZone` is not set, the date is assumed to already be in UTC time. Supports international timezones. See https://www.iana.org/time-zones.
    *
    * Defaults to **undefined**.
    */
    outputTimeZone?: string;
    /**
    * One or more acceptable formats for typed input. The default value 'P' will accept a short locale formatted date. See https://date-fns.org/v2.28.0/docs/parse for parsing options. Note, the value of the `format` prop will automatically be accepted.
    *
    * Defaults to **["P"]**.
    */
    parseFormats?: Array<string>;
    /**
    * Placeholder text for the input.
    *
    * Defaults to **undefined**.
    */
    placeholder?: string;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * @deprecated _Replaced by `variant='outlined'`_
    *
    * Applies a filled style.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * User will not be allowed to type the date and must select it from the calendar.
    *
    * Defaults to **false**.
    */
    readOnly?: boolean;
    /**
    * Sets html required attribute on input
    *
    * Defaults to **false**.
    */
    required?: boolean;
    /**
    * This will reset the `Calendar` view to the selected date (or today's date when no date has been selected). By default the calendar will remember the last visible date shown until the page is refreshed.
    *
    * Defaults to **false**.
    */
    resetCalendarOnClose?: boolean;
    /**
    * @deprecated _Replaced by `variant='outlined'`_
    *
    * Applies outlined style.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * Content to appear to the side of the `Calendar`. Can be used to display details for a selected date. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar.
    *
    * Defaults to **undefined**.
    */
    sideContent?: object | string | Function;
    /**
    * Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props.
    *
    * Defaults to **undefined**.
    */
    textfieldProps?: object;
    /**
    * Content to appear after the `Calendar`.
    *
    * Defaults to **undefined**.
    */
    trailingContent?: React.ReactNode;
    /**
    * @deprecated _Please use `readOnly` instead._
    *
    * The user will not be allowed to type the date and must select it from the calendar.
    *
    * Defaults to **undefined**.
    */
    typeable?: boolean;
    /**
    * Use UTC for time calculations.
    *
    * Defaults to **false**.
    */
    useUtc?: boolean;
    /**
    * Current value of the datePicker.
    *
    * Defaults to **undefined**.
    */
    value?: Date;
    /**
    * Applies the selected style to the internal textfield.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when character is entered into text field and on select.
    */
    onChange?: Function;
    /**
    * Fired when input is cleared with the 'x' button.
    */
    onClear?: Function;
    /**
    * Fired when calendar is closed.
    */
    onClose?: Function;
    /**
    * Fired when calendar is opened.
    */
    onOpen?: Function;
    /**
    * Fired when date is selected.
    */
    onSelect?: Function;
    /**
    * Fired when disabled date is clicked
    */
    onSelectDisable?: Function;
    /**
    * Fired when disabled date is clicked
    */
    onSelectDisabled?: Function;
    /**
    * Fired when month is selected
    */
    onSelectMonth?: Function;
    /**
    * Fired when year is selected
    */
    onSelectYear?: Function;
}

/**
* Datepicker provides a way for users to select a specific date or range of dates from a dialog or dropdown.
 * @prop {boolean} alwaysOpen - Keep the calendar visible at all times. Defaults to _false_.
 * @prop {React.ReactNode} beforeCalendarHeader - Deprecated: Use `leadingContent` instead. Content to appear before the header. Defaults to _undefined_.
 * @prop {object} calendarProps - Custom props to be passed to the calendar. Defaults to _undefined_.
 * @prop {string} centuryBehavior - When typing a date, this will determine 2-digit year parsing behavior. A value of `forward-only` will always use current century, so `02/08/02` will parse to `02/08/2002`. A value of `age`, on the other hand is meant to assist age entry. It will use the current century until a certain point (see `centurySlidingOffset`), and then will revert to the previous century. For example `05/25/01` will parse to `05/25/2001`, while `02/08/76` will parse to `02/08/1976`. Defaults to _'age'_.
 * @prop {number} centurySlidingOffset - Only used when `centuryBehavior` is set to `age`. This will adjust the cutoff point where 2 digit dates will revert to the previous century to aid in typed age entry. The formula for the cutoff is `last 2 digits of the result of current year minus centuryCutoffOffset`. For example, using the year 2022 and the default value of 76 we would have `lastTwoDigits(2022 - 76) = 46`. So any 2 digit year of `45` or less will become `20XX` and any 2 digit year of `46` or more will become `19XX`. A value of `0` will disable the behavior, regardless of `centuryBehavior`. In 2023, the cutoff will be `47`, and so forth. Defaults to _76_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {function} dayCellTemplate - A function for formatting the individual days of the calendar. It takes the date being rendered and returns content. Defaults to _day => day.date_.
 * @prop {boolean} disableChangeMonth - Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month. Defaults to _false_.
 * @prop {boolean} disableChangeYear - Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current month. Defaults to _false_.
 * @prop {boolean} disableClearing - Prevent the datePicker from being cleared. It is suggested to use `readOnly` in conjunction with `disableClearing`. Defaults to _false_.
 * @prop {boolean} disabled - If true, disable datePicker completely. Defaults to _false_.
 * @prop {Object} disabledDates - An object describing dates to be disabled and non-interactive. The schema includes the following: `{ dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time. Defaults to _undefined_.
 * @prop {boolean} filled - Deprecated: Use `variant='filled'` instead. Apply filled style to the date picker input. Previously called primary. Defaults to _undefined_.
 * @prop {string|function} format - Date formatting string or function. For format strings we use `date-fns.format()`. See https://date-fns.org/v2.23.0/docs/format for more details. Defaults to _'dd MMM yyyy'_.
 * @prop {boolean} fullMonthName - Display the full month name in the calendar interface. Note, this does not effect the date format. Defaults to _true_.
 * @prop {React.ReactNode} headerContent - Content to appear immediately after the `Calendar` header. Defaults to _undefined_.
 * @prop {Object} highlightedDates - An object describing dates to be highlighted. The schema includes the following: `{ includeDisabled, dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time. Defaults to _undefined_.
 * @prop {boolean} hoisted - Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-element) components with a parent that has `overflow: hidden`. Defaults to _undefined_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} inputTimeZone - The timezone that the input date is provided in (see `value`). If `outputTimeZone` is not set, the date will be returned as UTC. Supports international timezones. See https://www.iana.org/time-zones. Defaults to _undefined_.
 * @prop {string} label - The input label. Defaults to _undefined_.
 * @prop {React.ReactNode} leadingContent - Content to appear before the `Calendar` header. Defaults to _undefined_.
 * @prop {object} locale - Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`. Defaults to _enUS_.
 * @prop {Date} maxDate - The maximum date selectable. Dates later than this will be disabled. Defaults to _undefined_.
 * @prop {number} maxQuickSelectYear - The maximum year that will be visible in the year select dropdown. Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10. Defaults to _undefined_.
 * @prop {Date} minDate - The minimum date selectable. Dates earlier than this will be disabled. Defaults to _undefined_.
 * @prop {number} minQuickSelectYear - The minimum year visible in the year select dropdown. Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10. Defaults to _undefined_.
 * @prop {boolean} mondayFirst - Overrides the first day of the week to start on Monday. Defaults to _false_.
 * @prop {date} openDate - If set, open on that date. Must be either a valid date object or a string that can be parsed by the date constructor. Defaults to _undefined_.
 * @prop {boolean} outlined - Deprecated: Replaced by `variant='outlined'` Apply outlined style to the date picker input. Previously called secondary. Defaults to _undefined_.
 * @prop {string} outputTimeZone - The timezone the date will be converted to and formatted as when using `useUtc`. If `inputTimeZone` is not set, the date is assumed to already be in UTC time. Supports international timezones. See https://www.iana.org/time-zones. Defaults to _undefined_.
 * @prop {[string]} parseFormats - One or more acceptable formats for typed input. The default value 'P' will accept a short locale formatted date. See https://date-fns.org/v2.28.0/docs/parse for parsing options. Note, the value of the `format` prop will automatically be accepted. Defaults to _["P"]_.
 * @prop {string} placeholder - Placeholder text for the input. Defaults to _undefined_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {boolean} primary - Deprecated: Replaced by `variant='outlined'` Applies a filled style. Defaults to _undefined_.
 * @prop {boolean} readOnly - User will not be allowed to type the date and must select it from the calendar. Defaults to _false_.
 * @prop {boolean} required - Sets html required attribute on input Defaults to _false_.
 * @prop {boolean} resetCalendarOnClose - This will reset the `Calendar` view to the selected date (or today's date when no date has been selected). By default the calendar will remember the last visible date shown until the page is refreshed. Defaults to _false_.
 * @prop {boolean} secondary - Deprecated: Replaced by `variant='outlined'` Applies outlined style. Defaults to _undefined_.
 * @prop {object|string|function} sideContent - Content to appear to the side of the `Calendar`. Can be used to display details for a selected date. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar. Defaults to _undefined_.
 * @prop {object} textfieldProps - Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props. Defaults to _undefined_.
 * @prop {React.ReactNode} trailingContent - Content to appear after the `Calendar`. Defaults to _undefined_.
 * @prop {boolean} typeable - Deprecated: Please use `readOnly` instead. The user will not be allowed to type the date and must select it from the calendar. Defaults to _undefined_.
 * @prop {boolean} useUtc - Use UTC for time calculations. Defaults to _false_.
 * @prop {date} value - Current value of the datePicker. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected style to the internal textfield. Defaults to _'filled'_.
 *  @event onChange - Fired when character is entered into text field and on select.
 *  @event onClear - Fired when input is cleared with the 'x' button.
 *  @event onClose - Fired when calendar is closed.
 *  @event onOpen - Fired when calendar is opened.
 *  @event onSelect - Fired when date is selected.
 *  @event onSelectDisable - Fired when disabled date is clicked
 *  @event onSelectDisabled - Fired when disabled date is clicked
 *  @event onSelectMonth - Fired when month is selected
 *  @event onSelectYear - Fired when year is selected
*/
export const Datepicker: React.FunctionComponent<DatepickerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
