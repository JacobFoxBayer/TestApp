import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useRef, useImperativeHandle, useEffect } from 'react';
import { MDCLineRipple } from '@material/line-ripple';
import clsx from 'clsx';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const LineRipplePropTypes = {
  /**
   *
   *
   * Defaults to **null**.
   */
  activated: PropTypes.bool,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   *
   *
   * Defaults to **null**.
   */
  rippleCenter: PropTypes.string
};
const LineRippleDefaultProps = {
  activated: null,
  className: undefined,
  rippleCenter: null
};

const LineRipple = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    activated,
    rippleCenter,
    className,
    ...customProps
  } = props;
  const mdcLineRippleRef = useRef();
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  useEffect(() => {
    mdcLineRippleRef.current = MDCLineRipple.attachTo(ref.current);
    return () => {
      mdcLineRippleRef.current.destroy();
    };
  }, [ref]);
  useEffect(() => {
    if (activated) {
      mdcLineRippleRef.current.activate();
    } else {
      mdcLineRippleRef.current.deactivate();
    }
  }, [activated]);
  useEffect(() => {
    if (rippleCenter) {
      mdcLineRippleRef.current.setRippleCenter(rippleCenter);
    }
  }, [rippleCenter]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: clsx('lmnt', 'mdc-line-ripple', className)
  }, customProps));
});
LineRipple.displayName = 'LineRipple';
LineRipple.propTypes = LineRipplePropTypes;
LineRipple.defaultProps = LineRippleDefaultProps;

export { LineRipple };
//# sourceMappingURL=index.es.js.map
