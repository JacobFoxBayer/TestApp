import React from 'react';


export interface DrawerProps {
    /**
    * Positions the modal lower, below the TopAppBar.
    *
    * Defaults to **null**.
    */
    belowTopAppBar?: boolean;
    /**
    * Content to be rendered inside the Drawer
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _Use `variant='dismissible'` instead._
    *
    * Enables a dismissible drawer.
    *
    * Defaults to **undefined**.
    */
    dismissible?: boolean;
    /**
    * @deprecated _Use `variant='modal'` instead._
    *
    * Enabled a modal drawer.
    *
    * Defaults to **undefined**.
    */
    modal?: boolean;
    /**
    * Displays the drawer when `variant` is either `dismissible` or modal`
    *
    * Defaults to **null**.
    */
    open?: boolean;
    /**
    * Defines the type of drawer. By default the drawer will be always shown, a permanent drawer. If defined, either `modal` or `dismissible`
    *
    * Defaults to **empty string**.
    */
    variant?: string;
    /**
    * Fired when drawer is closed.
    */
    onClose?: Function;
    /**
    * Fired when drawer is opened.
    */
    onOpen?: Function;
}

/**
* Navigation drawers provide access to destinations and app functionality, such as switching accounts. It can either be permanently on-screen or controlled by a navigation menu icon. A navigation drawer is recommended for: 1. Apps with five or more top-level destinations 2. Apps with two or more levels of navigation hierarchy 3. Quick navigation between unrelated destinations
 * @prop {boolean} belowTopAppBar - Positions the modal lower, below the TopAppBar. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered inside the Drawer Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dismissible - Deprecated: Use `variant='dismissible'` instead. Enables a dismissible drawer. Defaults to _undefined_.
 * @prop {boolean} modal - Deprecated: Use `variant='modal'` instead. Enabled a modal drawer. Defaults to _undefined_.
 * @prop {boolean} open - Displays the drawer when `variant` is either `dismissible` or modal` Defaults to _null_.
 * @prop {string} variant - Defines the type of drawer. By default the drawer will be always shown, a permanent drawer. If defined, either `modal` or `dismissible` Defaults to _empty string_.
 *  @event onClose - Fired when drawer is closed.
 *  @event onOpen - Fired when drawer is opened.
*/
export const Drawer: React.FunctionComponent<DrawerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerAppContentProps {
    /**
    * Positions the modal lower, below the TopAppBar.
    *
    * Defaults to **null**.
    */
    belowTopAppBar?: boolean;
    /**
    * Content to be rendered inside the DrawerAppContent
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* DrawerAppContent is a container for app contents.  Its child is resized when the drawer opens/closes.
 * @prop {boolean} belowTopAppBar - Positions the modal lower, below the TopAppBar. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered inside the DrawerAppContent Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const DrawerAppContent: React.FunctionComponent<DrawerAppContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerContentProps {
    /**
    * Content to be rendered inside the drawer. Most commonly a list, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* DrawerContent is the container for the main body of the drawer.
 * @prop {React.ReactNode} children - Content to be rendered inside the drawer. Most commonly a list, but accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const DrawerContent: React.FunctionComponent<DrawerContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerHeaderProps {
    /**
    * Most commonly an avatar style image, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    avatar?: React.ReactNode;
    /**
    * Most commonly a text or a Typography component, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Subtitle of Drawer Header
    *
    * Defaults to **empty string**.
    */
    subtitle?: string;
    /**
    * Title of Drawer Header
    *
    * Defaults to **empty string**.
    */
    title?: string;
}

/**
* DrawerHeader contains the top title portion of the drawer.
 * @prop {React.ReactNode} avatar - Most commonly an avatar style image, but accepts any valid markup. Defaults to _null_.
 * @prop {React.ReactNode} children - Most commonly a text or a Typography component, but accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} subtitle - Subtitle of Drawer Header Defaults to _empty string_.
 * @prop {string} title - Title of Drawer Header Defaults to _empty string_.
*/
export const DrawerHeader: React.FunctionComponent<DrawerHeaderProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerScrimProps {
}

/**
* DrawerScrim covers the screen behind the drawer component to focus the users attention.
*/
export const DrawerScrim: React.FunctionComponent<DrawerScrimProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
