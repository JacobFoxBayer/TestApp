import _extends from '@babel/runtime-corejs3/helpers/extends';
import { MDCDrawer } from '@material/drawer';
import clsx from 'clsx';
import React, { forwardRef, useState, useRef, useImperativeHandle, useEffect, useMemo } from 'react';
import { useEvent } from 'react-use';
import PropTypes from 'prop-types';
import { deprecatedProp } from '@element/react-common';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DrawerPropTypes = {
  /**
   * Positions the modal lower, below the TopAppBar.
   *
   * Defaults to **null**.
   */
  belowTopAppBar: PropTypes.bool,
  /**
   * Content to be rendered inside the Drawer
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * @deprecated _Use `variant='dismissible'` instead._
   *
   * Enables a dismissible drawer.
   *
   * Defaults to **undefined**.
   */
  dismissible: deprecatedProp(PropTypes.bool, "Drawer", 'Use `variant="dismissible"` instead.'),
  /**
   * @deprecated _Use `variant='modal'` instead._
   *
   * Enabled a modal drawer.
   *
   * Defaults to **undefined**.
   */
  modal: deprecatedProp(PropTypes.bool, "Drawer", 'Use `variant="modal"` instead.'),
  /**
   * Fired when drawer is closed.
   *
   * Defaults to **null**.
   */
  onClose: PropTypes.func,
  /**
   * Fired when drawer is opened.
   *
   * Defaults to **null**.
   */
  onOpen: PropTypes.func,
  /**
   * Displays the drawer when `variant` is either `dismissible` or modal`
   *
   * Defaults to **null**.
   */
  open: PropTypes.bool,
  /**
   * Defines the type of drawer. By default the drawer will be always shown, a permanent drawer. If defined, either `modal` or `dismissible`
   *
   * Defaults to **empty string**.
   */
  variant: PropTypes.oneOf(["", "modal", "dismissible"])
};
const DrawerDefaultProps = {
  belowTopAppBar: null,
  children: null,
  className: undefined,
  dismissible: undefined,
  modal: undefined,
  open: null,
  variant: ""
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DrawerAppContentPropTypes = {
  /**
   * Positions the modal lower, below the TopAppBar.
   *
   * Defaults to **null**.
   */
  belowTopAppBar: PropTypes.bool,
  /**
   * Content to be rendered inside the DrawerAppContent
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string
};
const DrawerAppContentDefaultProps = {
  belowTopAppBar: null,
  children: null,
  className: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DrawerContentPropTypes = {
  /**
   * Content to be rendered inside the drawer. Most commonly a list, but accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string
};
const DrawerContentDefaultProps = {
  children: null,
  className: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DrawerHeaderPropTypes = {
  /**
   * Most commonly an avatar style image, but accepts any valid markup.
   *
   * Defaults to **null**.
   */
  avatar: PropTypes.node,
  /**
   * Most commonly a text or a Typography component, but accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Subtitle of Drawer Header
   *
   * Defaults to **empty string**.
   */
  subtitle: PropTypes.string,
  /**
   * Title of Drawer Header
   *
   * Defaults to **empty string**.
   */
  title: PropTypes.string
};
const DrawerHeaderDefaultProps = {
  avatar: null,
  children: null,
  className: undefined,
  subtitle: "",
  title: ""
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DrawerScrimPropTypes = {};
const DrawerScrimDefaultProps = {};

const DrawerScrim = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    className,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef
  }, customProps, {
    className: clsx('lmnt mdc-drawer-scrim', className)
  }));
});
DrawerScrim.displayName = 'DrawerScrim';
DrawerScrim.propTypes = DrawerScrimPropTypes;
DrawerScrim.defaultProps = DrawerScrimDefaultProps;
var DrawerScrim$1 = /*#__PURE__*/React.memo(DrawerScrim);

const Drawer = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    belowTopAppBar,
    children,
    className,
    dismissible,
    modal,
    onClose,
    onOpen,
    open,
    variant,
    ...customProps
  } = props;
  const [ref, setRef] = useState(null); // Initialize to null so that useEvent doesn't initially listen to the global window
  const [mdcDrawer, setMdcDrawer] = useState(null);
  const [isInitiallyOpen] = useState(() => !!open);
  const drawerRef = useRef();
  useImperativeHandle(externalRef, () => drawerRef.current, []);
  const isDismissible = variant === 'dismissible' || dismissible;
  const isModal = variant === 'modal' || modal;
  const isCloseable = isDismissible || isModal;
  useEffect(() => {
    const drawer = ref && isCloseable ? MDCDrawer.attachTo(ref) : null;
    setMdcDrawer(drawer);
    return () => {
      drawer === null || drawer === void 0 ? void 0 : drawer.destroy();
    };
  }, [isCloseable, ref]);
  useEvent('MDCDrawer:opened', onOpen, ref);
  useEvent('MDCDrawer:closed', onClose, ref);
  useEffect(() => {
    if (mdcDrawer) {
      mdcDrawer.open = open;
    }
  }, [mdcDrawer, open]);
  const classes = useMemo(() => clsx('lmnt', 'mdc-drawer', !variant && 'lmnt-drawer--permanent', isInitiallyOpen && 'mdc-drawer--open', isDismissible && 'mdc-drawer--dismissible', isModal && 'mdc-drawer--modal', belowTopAppBar && 'mdc-top-app-bar--fixed-adjust', className), [belowTopAppBar, className, isDismissible, isInitiallyOpen, isModal, variant]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("aside", _extends({
    ref: setRef,
    className: classes
  }, customProps), children), isModal && /*#__PURE__*/React.createElement(DrawerScrim$1, null));
});
Drawer.displayName = 'Drawer';
Drawer.propTypes = DrawerPropTypes;
Drawer.defaultProps = DrawerDefaultProps;
var Drawer$1 = /*#__PURE__*/React.memo(Drawer);

const DrawerAppContent = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    className,
    belowTopAppBar,
    children,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'mdc-drawer-app-content', belowTopAppBar && 'mdc-top-app-bar--fixed-adjust', className)
  }, customProps), children);
});
DrawerAppContent.displayName = 'DrawerAppContent';
DrawerAppContent.propTypes = DrawerAppContentPropTypes;
DrawerAppContent.defaultProps = DrawerAppContentDefaultProps;
var DrawerAppContent$1 = /*#__PURE__*/React.memo(DrawerAppContent);

const DrawerContent = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("nav", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'mdc-drawer__content', className)
  }, customProps), children);
});
DrawerContent.displayName = 'DrawerContent';
DrawerContent.propTypes = DrawerContentPropTypes;
DrawerContent.defaultProps = DrawerContentDefaultProps;
var DrawerContent$1 = /*#__PURE__*/React.memo(DrawerContent);

const DrawerHeader = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    avatar,
    className,
    title,
    subtitle,
    ...customProps
  } = props;
  let avatarRendered = null;
  if (avatar) {
    avatarRendered = /*#__PURE__*/React.cloneElement(avatar, {
      className: 'mdc-drawer__header-avatar'
    });
  }
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'mdc-drawer__header', className)
  }, customProps), avatarRendered && /*#__PURE__*/React.createElement("div", null, avatarRendered), title && /*#__PURE__*/React.createElement("div", {
    className: "mdc-drawer__title"
  }, title), subtitle && /*#__PURE__*/React.createElement("div", {
    className: "mdc-drawer__subtitle"
  }, subtitle), children);
});
DrawerHeader.displayName = 'DrawerHeader';
DrawerHeader.propTypes = DrawerHeaderPropTypes;
DrawerHeader.defaultProps = DrawerHeaderDefaultProps;
var DrawerHeader$1 = /*#__PURE__*/React.memo(DrawerHeader);

export { Drawer$1 as Drawer, DrawerAppContent$1 as DrawerAppContent, DrawerContent$1 as DrawerContent, DrawerHeader$1 as DrawerHeader, DrawerScrim$1 as DrawerScrim };
//# sourceMappingURL=index.es.js.map
