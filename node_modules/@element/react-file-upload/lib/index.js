'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var clsx = require('clsx');
var reactCommon = require('@element/react-common');
var shared = require('@element/shared');
var reactIcon = require('@element/react-icon');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const FileUploadPropTypes = {
  /**
   * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Prevent the user from interacting with the component.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Randomly generated id. May be overwritten.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes__default["default"].string,
  /**
   * Label to be displayed on the button.
   *
   * Defaults to **null**.
   */
  label: PropTypes__default["default"].string,
  /**
   * Allows for multiple files to be uploaded.
   *
   * Defaults to **false**.
   */
  multiple: PropTypes__default["default"].bool,
  /**
   * Fired when file input's value is changed
   *
   * Defaults to **null**.
   */
  onChange: PropTypes__default["default"].func,
  /**
   * Placeholder text for the file name readonly input.
   *
   * Defaults to **'No File Chosen'**.
   */
  placeholder: PropTypes__default["default"].string,
  /**
   * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary"])
};
const FileUploadDefaultProps = {
  children: null,
  className: undefined,
  disabled: false,
  id: undefined,
  label: null,
  multiple: false,
  placeholder: "No File Chosen",
  themeColor: "primary"
};

const FileUpload = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    disabled,
    id,
    label,
    leadingIcon,
    multiple,
    onChange,
    placeholder,
    themeColor,
    trailingIcon,
    ...customProps
  } = props;
  const [idActual] = React.useState(() => id || shared.edsRandomId());
  const urlInputRef = React.useRef();
  const btnRef = React.useRef();
  const inputRef = React.useRef();
  const content = React.useMemo(() => label || children, [label, children]);
  const hasTrailingIcon = React.useMemo(() => trailingIcon && !leadingIcon, [leadingIcon, trailingIcon]);
  const clear = React.useCallback(() => {
    urlInputRef.current.value = '';
    inputRef.current.value = '';
  }, []);
  React.useImperativeHandle(externalRef, () => ({
    clear,
    btnRef: btnRef.current,
    urlInput: urlInputRef.current,
    input: inputRef.current
  }), [clear]);
  const LeadingIcon = React.useCallback(() => {
    if (typeof leadingIcon === 'string') {
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        tabIndex: 0,
        role: "button",
        className: "mdc-button__icon lmnt-button__icon--leading",
        icon: leadingIcon
      });
    }
    if (typeof leadingIcon === 'function') {
      return leadingIcon({
        className: 'mdc-button__icon lmnt-button__icon--leading'
      });
    }
    return reactCommon.addClass(leadingIcon, 'mdc-button__icon lmnt-button__icon--leading');
  }, [leadingIcon]);
  const TrailingIcon = React.useCallback(() => {
    if (typeof trailingIcon === 'string') {
      return /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
        tabIndex: 0,
        role: "button",
        className: "mdc-button__icon lmnt-button__icon--trailing",
        icon: trailingIcon
      });
    }
    if (typeof leadingIcon === 'function') {
      return trailingIcon({
        className: 'mdc-button__icon lmnt-button__icon--trailing'
      });
    }
    return reactCommon.addClass(trailingIcon, 'mdc-button__icon lmnt-button__icon--trailing');
  }, [leadingIcon, trailingIcon]);
  const classes = React.useMemo(() => clsx__default["default"]('lmnt', 'lmnt-file-upload', multiple && 'lmnt-file-upload--multiple', disabled && 'lmnt-file-upload--disabled', themeColor === 'primary' && 'lmnt-file-upload--primary', themeColor === 'secondary' && 'lmnt-file-upload--secondary', className), [className, disabled, multiple, themeColor]);
  const btnClasses = React.useMemo(() => clsx__default["default"]('lmnt', 'mdc-button', 'mdc-button--touch', 'mdc-button--outlined', themeColor === 'primary' && 'lmnt-button--outlined-primary', themeColor === 'secondary' && 'lmnt-button--outlined-secondary', className), [className, themeColor]);
  const handleChange = React.useCallback(e => {
    if (multiple) {
      const vals = Array.from(e.target.files).map(f => f.name);
      urlInputRef.current.value = vals;
    } else {
      urlInputRef.current.value = e.target.files[0].name;
    }
    onChange && onChange(e.target.files, e);
  }, [onChange, multiple]);
  return /*#__PURE__*/React__default["default"].createElement("div", {
    className: classes
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-touch-target-wrapper lmnt-file-upload__btn"
  }, /*#__PURE__*/React__default["default"].createElement("button", {
    type: "button",
    className: btnClasses,
    onChange: handleChange,
    disabled: disabled,
    ref: btnRef
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-button__ripple"
  }), leadingIcon && LeadingIcon(), /*#__PURE__*/React__default["default"].createElement("span", {
    className: "mdc-button__label"
  }, content), /*#__PURE__*/React__default["default"].createElement("input", _extends__default["default"]({}, customProps, {
    id: idActual,
    className: "lmnt lmnt-file-upload__input",
    multiple: multiple,
    type: "file",
    ref: inputRef
  })), hasTrailingIcon && TrailingIcon(), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-button__touch"
  }))), /*#__PURE__*/React__default["default"].createElement("input", {
    ref: urlInputRef,
    placeholder: placeholder,
    type: "text",
    className: "lmnt lmnt-file-upload__file-url mdc-typography--caption",
    readOnly: true
  }));
});
FileUpload.displayName = 'FileUpload';
FileUpload.propTypes = FileUploadPropTypes;
FileUpload.defaultProps = FileUploadDefaultProps;

exports.FileUpload = FileUpload;
//# sourceMappingURL=index.js.map
