import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useState, useRef, useMemo, useCallback, useImperativeHandle } from 'react';
import clsx from 'clsx';
import { addClass } from '@element/react-common';
import { edsRandomId } from '@element/shared';
import { Icon } from '@element/react-icon';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const FileUploadPropTypes = {
  /**
   * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Prevent the user from interacting with the component.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool,
  /**
   * Randomly generated id. May be overwritten.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes.string,
  /**
   * Label to be displayed on the button.
   *
   * Defaults to **null**.
   */
  label: PropTypes.string,
  /**
   * Allows for multiple files to be uploaded.
   *
   * Defaults to **false**.
   */
  multiple: PropTypes.bool,
  /**
   * Fired when file input's value is changed
   *
   * Defaults to **null**.
   */
  onChange: PropTypes.func,
  /**
   * Placeholder text for the file name readonly input.
   *
   * Defaults to **'No File Chosen'**.
   */
  placeholder: PropTypes.string,
  /**
   * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes.oneOf(["primary", "secondary"])
};
const FileUploadDefaultProps = {
  children: null,
  className: undefined,
  disabled: false,
  id: undefined,
  label: null,
  multiple: false,
  placeholder: "No File Chosen",
  themeColor: "primary"
};

const FileUpload = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    disabled,
    id,
    label,
    leadingIcon,
    multiple,
    onChange,
    placeholder,
    themeColor,
    trailingIcon,
    ...customProps
  } = props;
  const [idActual] = useState(() => id || edsRandomId());
  const urlInputRef = useRef();
  const btnRef = useRef();
  const inputRef = useRef();
  const content = useMemo(() => label || children, [label, children]);
  const hasTrailingIcon = useMemo(() => trailingIcon && !leadingIcon, [leadingIcon, trailingIcon]);
  const clear = useCallback(() => {
    urlInputRef.current.value = '';
    inputRef.current.value = '';
  }, []);
  useImperativeHandle(externalRef, () => ({
    clear,
    btnRef: btnRef.current,
    urlInput: urlInputRef.current,
    input: inputRef.current
  }), [clear]);
  const LeadingIcon = useCallback(() => {
    if (typeof leadingIcon === 'string') {
      return /*#__PURE__*/React.createElement(Icon, {
        tabIndex: 0,
        role: "button",
        className: "mdc-button__icon lmnt-button__icon--leading",
        icon: leadingIcon
      });
    }
    if (typeof leadingIcon === 'function') {
      return leadingIcon({
        className: 'mdc-button__icon lmnt-button__icon--leading'
      });
    }
    return addClass(leadingIcon, 'mdc-button__icon lmnt-button__icon--leading');
  }, [leadingIcon]);
  const TrailingIcon = useCallback(() => {
    if (typeof trailingIcon === 'string') {
      return /*#__PURE__*/React.createElement(Icon, {
        tabIndex: 0,
        role: "button",
        className: "mdc-button__icon lmnt-button__icon--trailing",
        icon: trailingIcon
      });
    }
    if (typeof leadingIcon === 'function') {
      return trailingIcon({
        className: 'mdc-button__icon lmnt-button__icon--trailing'
      });
    }
    return addClass(trailingIcon, 'mdc-button__icon lmnt-button__icon--trailing');
  }, [leadingIcon, trailingIcon]);
  const classes = useMemo(() => clsx('lmnt', 'lmnt-file-upload', multiple && 'lmnt-file-upload--multiple', disabled && 'lmnt-file-upload--disabled', themeColor === 'primary' && 'lmnt-file-upload--primary', themeColor === 'secondary' && 'lmnt-file-upload--secondary', className), [className, disabled, multiple, themeColor]);
  const btnClasses = useMemo(() => clsx('lmnt', 'mdc-button', 'mdc-button--touch', 'mdc-button--outlined', themeColor === 'primary' && 'lmnt-button--outlined-primary', themeColor === 'secondary' && 'lmnt-button--outlined-secondary', className), [className, themeColor]);
  const handleChange = useCallback(e => {
    if (multiple) {
      const vals = Array.from(e.target.files).map(f => f.name);
      urlInputRef.current.value = vals;
    } else {
      urlInputRef.current.value = e.target.files[0].name;
    }
    onChange && onChange(e.target.files, e);
  }, [onChange, multiple]);
  return /*#__PURE__*/React.createElement("div", {
    className: classes
  }, /*#__PURE__*/React.createElement("div", {
    className: "mdc-touch-target-wrapper lmnt-file-upload__btn"
  }, /*#__PURE__*/React.createElement("button", {
    type: "button",
    className: btnClasses,
    onChange: handleChange,
    disabled: disabled,
    ref: btnRef
  }, /*#__PURE__*/React.createElement("div", {
    className: "mdc-button__ripple"
  }), leadingIcon && LeadingIcon(), /*#__PURE__*/React.createElement("span", {
    className: "mdc-button__label"
  }, content), /*#__PURE__*/React.createElement("input", _extends({}, customProps, {
    id: idActual,
    className: "lmnt lmnt-file-upload__input",
    multiple: multiple,
    type: "file",
    ref: inputRef
  })), hasTrailingIcon && TrailingIcon(), /*#__PURE__*/React.createElement("div", {
    className: "mdc-button__touch"
  }))), /*#__PURE__*/React.createElement("input", {
    ref: urlInputRef,
    placeholder: placeholder,
    type: "text",
    className: "lmnt lmnt-file-upload__file-url mdc-typography--caption",
    readOnly: true
  }));
});
FileUpload.displayName = 'FileUpload';
FileUpload.propTypes = FileUploadPropTypes;
FileUpload.defaultProps = FileUploadDefaultProps;

export { FileUpload };
//# sourceMappingURL=index.es.js.map
