import React from 'react';


export interface ListProps {
    /**
    * Name of the key for category ID in `items`.
    *
    * Defaults to **'id'**.
    */
    categoryIdKey?: string;
    /**
    * Name of the key for category name in `items`.
    *
    * Defaults to **'categoryName'**.
    */
    categoryNameKey?: string;
    /**
    * List content. Expects a 'ListItem'.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Name of the key for group ID in `items`. custom props to apply to each list item.
    *
    * Defaults to **'componentProps'**.
    */
    componentPropsKey?: string;
    /**
    * Reduced height of list items.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Variant of divider padding.
    *
    * Defaults to **'full'**.
    */
    dividerVariant?: string;
    /**
    * Name of the key for group ID in `items`.
    *
    * Defaults to **'id'**.
    */
    groupIdKey?: string;
    /**
    * Name of the key for group name in `items`.
    *
    * Defaults to **'groupName'**.
    */
    groupNameKey?: string;
    /**
    * Name of the key for the id of the item in `items`.
    *
    * Defaults to **'id'**.
    */
    itemIdKey?: string;
    /**
    * An array of objects to be rendered as `ListItems`. If `items` is set children will be ignored.
    *
    * Defaults to **null**.
    */
    items?: Array<object> | Array<string>;
    /**
    * Name of the key for `items` in list schema.
    *
    * Defaults to **'items'**.
    */
    itemsKey?: string;
    /**
    * The type of media that will render in the leading block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **undefined**.
    */
    leadingBlockType?: string;
    /**
    * Enables support for lists of navigation links. Each list item will be rendered as an anchor element by default unless overridden via the `component` prop on each list item.
    *
    * Defaults to **false**.
    */
    navigation?: boolean;
    /**
    * Use for a list that does not require interaction.
    *
    * Defaults to **false**.
    */
    nonInteractive?: boolean;
    /**
    * Name of the key for `overlineText` in `items`.
    *
    * Defaults to **'overlineText'**.
    */
    overlineTextKey?: string;
    /**
    * Name of the key for `primaryText` in `items`.
    *
    * Defaults to **'primaryText'**.
    */
    primaryTextKey?: string;
    /**
    * The aria role of the list. For selection list use  `listbox`. For menu list use `menu`. For radio list use `radiogroup`. For checkbox list use `group`. For non-interactive list do not set.
    *
    * Defaults to **'listbox'**.
    */
    role?: string;
    /**
    * Name of the key for `secondaryText` in `items`.
    *
    * Defaults to **'secondaryText'**.
    */
    secondaryTextKey?: string;
    /**
    * Item or array of selected `ListItems`.
    *
    * Defaults to **null**.
    */
    selected?: string | number | object | Array<string> | Array<number> | Array<object>;
    /**
    * Whether or not to show a divider between list items, groups, or categories.
    *
    * Defaults to **true**.
    */
    showDivider?: boolean;
    /**
    * When true group and category lists will be treated like one list for single selection type lists.
    *
    * Defaults to **true**.
    */
    singleList?: boolean;
    /**
    * Customized background color.
    *
    * Defaults to **empty string**.
    */
    themeColor?: string;
    /**
    * The type of media that will render in the trailing block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **undefined**.
    */
    trailingBlockType?: string;
    /**
    * Allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation.
    *
    * Defaults to **true**.
    */
    wrapFocus?: boolean;
    /**
    * Fired when a List Item is activated.
    */
    onAction?: Function;
}

/**
* A list is a continuous column of rows containing text and images. List rows are composed of items containing primary and supplemental actions, which are represented by text and icons. Lists are optimized for reading comprehension and should be easy to scan quickly. Lists in Element are comprised of the following components: List and ListItem - as well as optional components such as ListDivider, ListGroup, ListGroupDivider, ListGroupSubheader.
 * @prop {string} categoryIdKey - Name of the key for category ID in `items`. Defaults to _'id'_.
 * @prop {string} categoryNameKey - Name of the key for category name in `items`. Defaults to _'categoryName'_.
 * @prop {React.ReactNode} children - List content. Expects a 'ListItem'. Defaults to _null_.
 * @prop {string} componentPropsKey - Name of the key for group ID in `items`. custom props to apply to each list item. Defaults to _'componentProps'_.
 * @prop {boolean} dense - Reduced height of list items. Defaults to _false_.
 * @prop {string} dividerVariant - Variant of divider padding. Defaults to _'full'_.
 * @prop {string} groupIdKey - Name of the key for group ID in `items`. Defaults to _'id'_.
 * @prop {string} groupNameKey - Name of the key for group name in `items`. Defaults to _'groupName'_.
 * @prop {string} itemIdKey - Name of the key for the id of the item in `items`. Defaults to _'id'_.
 * @prop {[object]|[string]} items - An array of objects to be rendered as `ListItems`. If `items` is set children will be ignored. Defaults to _null_.
 * @prop {string} itemsKey - Name of the key for `items` in list schema. Defaults to _'items'_.
 * @prop {string} leadingBlockType - The type of media that will render in the leading block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _undefined_.
 * @prop {boolean} navigation - Enables support for lists of navigation links. Each list item will be rendered as an anchor element by default unless overridden via the `component` prop on each list item. Defaults to _false_.
 * @prop {boolean} nonInteractive - Use for a list that does not require interaction. Defaults to _false_.
 * @prop {string} overlineTextKey - Name of the key for `overlineText` in `items`. Defaults to _'overlineText'_.
 * @prop {string} primaryTextKey - Name of the key for `primaryText` in `items`. Defaults to _'primaryText'_.
 * @prop {string} role - The aria role of the list. For selection list use  `listbox`. For menu list use `menu`. For radio list use `radiogroup`. For checkbox list use `group`. For non-interactive list do not set. Defaults to _'listbox'_.
 * @prop {string} secondaryTextKey - Name of the key for `secondaryText` in `items`. Defaults to _'secondaryText'_.
 * @prop {string|number|object|[string]|[number]|[object]} selected - Item or array of selected `ListItems`. Defaults to _null_.
 * @prop {boolean} showDivider - Whether or not to show a divider between list items, groups, or categories. Defaults to _true_.
 * @prop {boolean} singleList - When true group and category lists will be treated like one list for single selection type lists. Defaults to _true_.
 * @prop {string} themeColor - Customized background color. Defaults to _empty string_.
 * @prop {string} trailingBlockType - The type of media that will render in the trailing block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _undefined_.
 * @prop {boolean} wrapFocus - Allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation. Defaults to _true_.
 *  @event onAction - Fired when a List Item is activated.
*/
export const List: React.FunctionComponent<ListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListDividerProps {
    /**
    * Variant of the divider padding.
    *
    * Defaults to **'full'**.
    */
    variant?: string;
}

/**
* A line that can be used to divide list items, list groups or list categories.
 * @prop {string} variant - Variant of the divider padding. Defaults to _'full'_.
*/
export const ListDivider: React.FunctionComponent<ListDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListGroupProps {
    /**
    * Expects one or more List or ListGroupSubHeader.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* The List Group component is used to organize multiple lists.
 * @prop {React.ReactNode} children - Expects one or more List or ListGroupSubHeader. Defaults to _null_.
*/
export const ListGroup: React.FunctionComponent<ListGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListGroupDividerProps {
}

/**
* A line that can be used to divide lists in a ListGroup.
*/
export const ListGroupDivider: React.FunctionComponent<ListGroupDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListGroupSubheaderProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A List Group Sub Header provides a header/title section when used with a ListGroup.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListGroupSubheader: React.FunctionComponent<ListGroupSubheaderProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemProps {
    /**
    * Alternate styling for selected interactive items without a control. Activation represents a status with more permanence (e.g., current page in a navigation list).
    *
    * Defaults to **false**.
    */
    activated?: boolean;
    /**
    * Whether or not the list item's radio or checkbox is selected for radio or checkbox lists.
    *
    * Defaults to **false**.
    */
    ariaChecked?: boolean;
    /**
    * Content to be rendered inside the list item content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Tells list item not to put selected class to add background to the list item.
    *
    * Defaults to **false**.
    */
    disableHighlight?: boolean;
    /**
    * Disable interaction for the ListItem within an interactive List.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Used with Select.
    *
    * Defaults to **false**.
    */
    isChildOption?: boolean;
    /**
    * Content to be displayed in the leading block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item.
    *
    * Defaults to **null**.
    */
    leadingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the leading block. See README for size constraints. If `leadingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **empty string**.
    */
    leadingBlockType?: string;
    /**
    * A hover style will not be applied.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * Used within a list that does not require interaction. See `disabled` for disabling an item within an interactive list.
    *
    * Defaults to **false**.
    */
    nonInteractive?: React.ReactNode;
    /**
    * Text that will appear above the standard text.
    *
    * Defaults to **null**.
    */
    overlineText?: React.ReactNode;
    /**
    * Standard list text.
    *
    * Defaults to **null**.
    */
    primaryText?: React.ReactNode;
    /**
    * Text that will appear below the standard text.
    *
    * Defaults to **null**.
    */
    secondaryText?: React.ReactNode;
    /**
    * A selected style will be applied. Selection represents a choice that might change frequently (e.g., option in a list). Required by selected interactive items without a control.
    *
    * Defaults to **false**.
    */
    selected?: boolean;
    /**
    * Component to be rendered as each list item. Normal lists use `li` elements, nav lists use `a` elements. You would use this for example if you want to use a router link component as each list item.
    *
    * Defaults to **null**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Customized background color.
    *
    * Defaults to **empty string**.
    */
    themeColor?: string;
    /**
    * Content to be displayed in the trailing block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item.
    *
    * Defaults to **null**.
    */
    trailingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the trailing block. See README for size constraints. If `trailingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **undefined**.
    */
    trailingBlockType?: string;
    /**
    * A custom value to be returned as the second onClick argument.
    *
    * Defaults to **null**.
    */
    value?: React.ReactNode;
    /**
    * Used to adjust the padding of the `ListItem` when used as a category or group header.
    *
    * Defaults to **'standard'**.
    */
    variant?: string;
    /**
    * Determines the text wrapping mode of the list item: `wrap` will wrap text like normal, `truncate` will truncate text with an ellipsis and `noWrap` will truncate the text by clipping.
    *
    * Defaults to **'wrap'**.
    */
    wrapMode?: string;
    /**
    * Fired when the user clicks the ListItem. Returns the event as the first argument and any specified value as the second argument.
    */
    onClick?: Function;
    /**
    * Fired when the user presses a key down.
    */
    onKeyPress?: Function;
}

/**
* A List Item is a single item in a list.
 * @prop {boolean} activated - Alternate styling for selected interactive items without a control. Activation represents a status with more permanence (e.g., current page in a navigation list). Defaults to _false_.
 * @prop {boolean} ariaChecked - Whether or not the list item's radio or checkbox is selected for radio or checkbox lists. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered inside the list item content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored. Defaults to _null_.
 * @prop {boolean} disableHighlight - Tells list item not to put selected class to add background to the list item. Defaults to _false_.
 * @prop {boolean} disabled - Disable interaction for the ListItem within an interactive List. Defaults to _false_.
 * @prop {boolean} isChildOption - Used with Select. Defaults to _false_.
 * @prop {React.ReactNode} leadingBlock - Content to be displayed in the leading block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item. Defaults to _null_.
 * @prop {string} leadingBlockType - The type of media that will render in the leading block. See README for size constraints. If `leadingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _empty string_.
 * @prop {boolean} noHover - A hover style will not be applied. Defaults to _false_.
 * @prop {React.ReactNode} nonInteractive - Used within a list that does not require interaction. See `disabled` for disabling an item within an interactive list. Defaults to _false_.
 * @prop {React.ReactNode} overlineText - Text that will appear above the standard text. Defaults to _null_.
 * @prop {React.ReactNode} primaryText - Standard list text. Defaults to _null_.
 * @prop {React.ReactNode} secondaryText - Text that will appear below the standard text. Defaults to _null_.
 * @prop {boolean} selected - A selected style will be applied. Selection represents a choice that might change frequently (e.g., option in a list). Required by selected interactive items without a control. Defaults to _false_.
 * @prop {string|React.ElementType|React.Component} tag - Component to be rendered as each list item. Normal lists use `li` elements, nav lists use `a` elements. You would use this for example if you want to use a router link component as each list item. Defaults to _null_.
 * @prop {string} themeColor - Customized background color. Defaults to _empty string_.
 * @prop {React.ReactNode} trailingBlock - Content to be displayed in the trailing block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item. Defaults to _null_.
 * @prop {string} trailingBlockType - The type of media that will render in the trailing block. See README for size constraints. If `trailingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _undefined_.
 * @prop {React.ReactNode} value - A custom value to be returned as the second onClick argument. Defaults to _null_.
 * @prop {string} variant - Used to adjust the padding of the `ListItem` when used as a category or group header. Defaults to _'standard'_.
 * @prop {string} wrapMode - Determines the text wrapping mode of the list item: `wrap` will wrap text like normal, `truncate` will truncate text with an ellipsis and `noWrap` will truncate the text by clipping. Defaults to _'wrap'_.
 *  @event onClick - Fired when the user clicks the ListItem. Returns the event as the first argument and any specified value as the second argument.
 *  @event onKeyPress - Fired when the user presses a key down.
*/
export const ListItem: React.FunctionComponent<ListItemProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemContentProps {
    /**
    * Content to be rendered inside the list item primary text content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Text that will appear above the standard text.
    *
    * Defaults to **null**.
    */
    overlineText?: React.ReactNode;
    /**
    * Standard list text. `children` may also be used but will require additional styling. Use `primaryText` instead of `children` when using overline or secondary text.
    *
    * Defaults to **null**.
    */
    primaryText?: React.ReactNode;
    /**
    * Text that will appear below the standard text.
    *
    * Defaults to **null**.
    */
    secondaryText?: React.ReactNode;
}

/**
* Formats text for a list item and optionally includes overline and secondary text. Used internally by ListItem.
 * @prop {React.ReactNode} children - Content to be rendered inside the list item primary text content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored. Defaults to _null_.
 * @prop {React.ReactNode} overlineText - Text that will appear above the standard text. Defaults to _null_.
 * @prop {React.ReactNode} primaryText - Standard list text. `children` may also be used but will require additional styling. Use `primaryText` instead of `children` when using overline or secondary text. Defaults to _null_.
 * @prop {React.ReactNode} secondaryText - Text that will appear below the standard text. Defaults to _null_.
*/
export const ListItemContent: React.FunctionComponent<ListItemContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemLeadingBlockProps {
    /**
    * Media or control to be rendered in the List Item's Leading Block
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats media or control to the left of the List Item content. Used internally by ListItem.
 * @prop {React.ReactNode} children - Media or control to be rendered in the List Item's Leading Block Defaults to _null_.
*/
export const ListItemLeadingBlock: React.FunctionComponent<ListItemLeadingBlockProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemOverlineProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats text for use as the overline in a list item. Used internally by ListItemText.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListItemOverline: React.FunctionComponent<ListItemOverlineProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemPrimaryTextProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A List Item is a single item in a list. Used internally by ListItemText.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListItemPrimaryText: React.FunctionComponent<ListItemPrimaryTextProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemSecondaryTextProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats text for use as the second line in a list item. Used internally by ListItemText.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListItemSecondaryText: React.FunctionComponent<ListItemSecondaryTextProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemTrailingBlockProps {
    /**
    * Media, control or text to be rendered in the List Item's Trailing Block
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats media, control or caption text to the right of the List Item content. Used internally by ListItem.
 * @prop {React.ReactNode} children - Media, control or text to be rendered in the List Item's Trailing Block Defaults to _null_.
*/
export const ListItemTrailingBlock: React.FunctionComponent<ListItemTrailingBlockProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemsListProps {
    /**
    * The List Items to be rendered in the Lists. If `items` is set children will be ignored.
    *
    * Defaults to **null**.
    */
    items?: Array<object> | Array<string>;
}

/**
* The list items rendered in a List
 * @prop {[object]|[string]} items - The List Items to be rendered in the Lists. If `items` is set children will be ignored. Defaults to _null_.
*/
export const ListItemsList: React.FunctionComponent<ListItemsListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListWrapperProps {
}

/**
* Wrapper for List
*/
export const ListWrapper: React.FunctionComponent<ListWrapperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
