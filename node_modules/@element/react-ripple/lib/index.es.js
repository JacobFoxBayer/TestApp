import { forwardRef, useRef, useImperativeHandle, useEffect } from 'react';
import { MDCRipple } from '@material/ripple';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const RipplePropTypes = {
  /**
   * Content to be rendered inside the component.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * A reference to the component to apply the ripple to.
   *
   * Defaults to **undefined**.
   */
  componentRef: PropTypes.object,
  /**
   * Allows the ripple to extend beyond the component boundaries.
   *
   * Defaults to **undefined**.
   */
  unbounded: PropTypes.bool
};
const RippleDefaultProps = {
  children: null,
  componentRef: undefined,
  unbounded: undefined
};

/* eslint-disable react/forbid-prop-types */
const Ripple = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    componentRef,
    unbounded,
    children
  } = props;
  const mdcRippleRef = useRef();
  useImperativeHandle(externalRef, () => mdcRippleRef.current, []);
  useEffect(() => {
    const ref = componentRef.current;
    if (ref) {
      mdcRippleRef.current = MDCRipple.attachTo(componentRef.current);
      if (unbounded) {
        mdcRippleRef.current.unbounded = true;
      }
    }
    return () => {
      if (ref) {
        mdcRippleRef.current.destroy();
      }
    };
  }, [componentRef, unbounded]);
  return children;
});
Ripple.displayName = 'Ripple';
Ripple.propTypes = RipplePropTypes;
Ripple.defaultProps = RippleDefaultProps;

export { Ripple };
//# sourceMappingURL=index.es.js.map
