'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var radio = require('@material/radio');
var reactFormField = require('@element/react-form-field');
var clsx = require('clsx');
var reactInputLabel = require('@element/react-input-label');
var reactCommon = require('@element/react-common');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const RadioPropTypes = {
  /**
   * Aligns radio to the right of the label.
   *
   * Defaults to **false**.
   */
  alignEnd: PropTypes__default["default"].bool,
  /**
   * Applies selected state when `checked` equals `value` or when `checked` is set to true.
   *
   * Defaults to **null**.
   */
  checked: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].bool]),
  /**
   * @deprecated _Use `label` instead._
   *
   * Content to be rendered as the radio label. Can be used instead of `label` to provide more flexibility. Accepts any valid markup. _Warning, if `label` is set, it will be used instead of child content._
   *
   * Defaults to **undefined**.
   */
  children: reactCommon.deprecatedProp(PropTypes__default["default"].node, "Radio", "Use `label` instead."),
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Prevents user for interacting with component.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * The label not be displayed, but will still be available to screen readers. This should only be used when the context of the radio button is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action.
   *
   * Defaults to **false**.
   */
  hideLabel: PropTypes__default["default"].bool,
  /**
   * Randomly generated id. May be overwritten.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes__default["default"].string,
  /**
   * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
   *
   * Defaults to **null**.
   */
  label: PropTypes__default["default"].string.isRequired,
  /**
   * Name of the radio button group.
   *
   * Defaults to **null**.
   */
  name: PropTypes__default["default"].string.isRequired,
  /**
   * Fired when value of the radio button is changed.
   *
   * Defaults to **null**.
   */
  onChange: PropTypes__default["default"].func,
  /**
   * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary"]),
  /**
   * A custom value will be returned as the second parameter of the `change` handler.
   *
   * Defaults to **null**.
   */
  value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number])
};
const RadioDefaultProps = {
  alignEnd: false,
  checked: null,
  children: undefined,
  className: undefined,
  disabled: false,
  hideLabel: false,
  id: undefined,
  label: null,
  name: null,
  themeColor: "primary",
  value: null
};

const Radio = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    alignEnd,
    checked,
    children,
    className,
    disabled,
    hideLabel,
    id,
    label,
    name,
    onChange,
    themeColor,
    value,
    ...customProps
  } = props;
  const [idActual] = React.useState(() => id || reactCommon.edsRandomId());
  const radioRef = React.useRef();
  const mdcRadio = React.useRef();
  React.useImperativeHandle(externalRef, () => radioRef.current, []);
  const handleChange = event => {
    if (onChange) {
      onChange(event, value);
      return;
    }
    mdcRadio.current.checked = event.target.checked;
  };
  React.useEffect(() => {
    mdcRadio.current = radio.MDCRadio.attachTo(radioRef.current);
    return () => {
      var _mdcRadio$current;
      (_mdcRadio$current = mdcRadio.current) === null || _mdcRadio$current === void 0 ? void 0 : _mdcRadio$current.destroy();
    };
  }, [mdcRadio]);
  React.useEffect(() => {
    mdcRadio.current.value = value;
  }, [value]);
  React.useEffect(() => {
    mdcRadio.current.checked = checked;
  }, [checked]);
  React.useEffect(() => {
    mdcRadio.current.disabled = disabled;
  }, [disabled]);
  return /*#__PURE__*/React__default["default"].createElement(reactFormField.FormField, {
    alignEnd: alignEnd,
    inputRef: mdcRadio
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    ref: radioRef,
    className: clsx__default["default"]('lmnt mdc-radio lmnt-radio', disabled && 'mdc-radio--disabled', themeColor && `lmnt-radio--${themeColor}`, className, 'mdc-touch-target-wrapper')
  }, /*#__PURE__*/React__default["default"].createElement("input", _extends__default["default"]({
    id: idActual,
    onChange: handleChange,
    disabled: disabled,
    name: name,
    type: "radio",
    className: "mdc-radio__native-control"
  }, customProps)), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-radio__background"
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-radio__outer-circle"
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-radio__inner-circle"
  })), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-radio__ripple"
  })), /*#__PURE__*/React__default["default"].createElement(reactInputLabel.InputLabel, {
    hideLabel: hideLabel,
    targetId: idActual,
    className: clsx__default["default"](disabled && 'lmnt-theme-on-surface-disabled'),
    disabled: disabled
  }, label || children));
});
Radio.displayName = 'Radio';
Radio.propTypes = RadioPropTypes;
Radio.defaultProps = RadioDefaultProps;

exports.Radio = Radio;
//# sourceMappingURL=index.js.map
