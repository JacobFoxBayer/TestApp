import React from 'react';


export interface RadioProps {
    /**
    * Aligns radio to the right of the label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * Applies selected state when `checked` equals `value` or when `checked` is set to true. 
    *
    * Defaults to **null**.
    */
    checked?: string | boolean;
    /**
    * @deprecated _Use `label` instead._
    *
    * Content to be rendered as the radio label. Can be used instead of `label` to provide more flexibility. Accepts any valid markup. _Warning, if `label` is set, it will be used instead of child content._
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevents user for interacting with component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The label not be displayed, but will still be available to screen readers. This should only be used when the context of the radio button is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action.
    *
    * Defaults to **false**.
    */
    hideLabel?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
    *
    * Defaults to **null**.
    */
    label: string;
    /**
    * Name of the radio button group.
    *
    * Defaults to **null**.
    */
    name: string;
    /**
    * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * A custom value will be returned as the second parameter of the `change` handler.
    *
    * Defaults to **null**.
    */
    value?: string | number;
    /**
    * Fired when value of the radio button is changed.
    */
    onChange?: Function;
}

/**
* Radio Buttons are selection controls that enable users to choose a single option from among multiple onscreen options. Selection controls are found where users are asked to make decisions or declare preferences.
 * @prop {boolean} alignEnd - Aligns radio to the right of the label. Defaults to _false_.
 * @prop {string | boolean} checked - Applies selected state when `checked` equals `value` or when `checked` is set to true.  Defaults to _null_.
 * @prop {React.ReactNode} children - Deprecated: Use `label` instead. Content to be rendered as the radio label. Can be used instead of `label` to provide more flexibility. Accepts any valid markup. _Warning, if `label` is set, it will be used instead of child content._ Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevents user for interacting with component. Defaults to _false_.
 * @prop {boolean} hideLabel - The label not be displayed, but will still be available to screen readers. This should only be used when the context of the radio button is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} label - Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers. Defaults to _null_.
 * @prop {string} name - Name of the radio button group. Defaults to _null_.
 * @prop {string} themeColor - Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|number} value - A custom value will be returned as the second parameter of the `change` handler. Defaults to _null_.
 *  @event onChange - Fired when value of the radio button is changed.
*/
export const Radio: React.FunctionComponent<RadioProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
