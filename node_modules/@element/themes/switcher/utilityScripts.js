import { themesArray } from '.';

const RGBAToHexA = rgb => {
    /* eslint-disable-next-line no-param-reassign */
    rgb = rgb.match(
        /^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i
    );
    return rgb && rgb.length === 4
        ? `#${`0${parseInt(rgb[1], 10).toString(16)}`.slice(-2)}${`0${parseInt(
              rgb[2],
              10
          ).toString(16)}`.slice(-2)}${`0${parseInt(rgb[3], 10).toString(
              16
          )}`.slice(-2)}`
        : '';
};

// update BXG color ramps with live background color from CSS
export const getRampChips = () => {
    const hexDisplayElements = document.querySelectorAll(
        '.color-story-color-hero__caption'
    );
    hexDisplayElements.forEach(element => {
        const style = getComputedStyle(element);
        const { backgroundColor } = style;
        const hex = RGBAToHexA(backgroundColor);
        /* eslint-disable-next-line no-param-reassign */
        element.querySelector(
            '.color-story-color-hero__caption-value'
        ).innerHTML = hex;
    });

    const hexDisplayAncillaryElements = document.querySelectorAll(
        '.color-story-color-hero__ancillary-chip-group'
    );
    hexDisplayAncillaryElements.forEach(element => {
        const style = getComputedStyle(
            element.querySelector('.color-story-color-hero__ancillary-chip')
        );
        const { backgroundColor } = style;
        const hex = RGBAToHexA(backgroundColor);
        /* eslint-disable-next-line no-param-reassign */
        element.querySelector(
            '.color-story-color-hero__caption-value'
        ).innerHTML = hex;
    });
    const hexDisplaySurfaceElement = document.querySelectorAll(
        '.color-story-color-hero__surface'
    )[0];
    const style = getComputedStyle(hexDisplaySurfaceElement);
    const { backgroundColor } = style;
    const hex = RGBAToHexA(backgroundColor);
    hexDisplaySurfaceElement.querySelector(
        '.color-story-color-hero__caption-value'
    ).innerHTML = hex;
};

export const getDataVizChips = () => {
    const hexDisplayElements = document.querySelectorAll('.data-viz-ramp-chip');
    hexDisplayElements.forEach(element => {
        const style = getComputedStyle(element);
        const { backgroundColor } = style;
        const hex = RGBAToHexA(backgroundColor);
        /* eslint-disable-next-line no-param-reassign */
        element.querySelector('.data-viz-ramp-chip__caption-value').innerHTML =
            hex;
    });
};

export const getOnUnknownChips = () => {
    const hexDisplayElements = document.querySelectorAll(
        '.onUnknown-chip__wrapper'
    );

    hexDisplayElements.forEach(element => {
        const isStroke = element
            .querySelector('.onUnknown-chip__caption-value')
            .className.includes('stroke');
        const style = !isStroke
            ? getComputedStyle(
                  element.querySelector('.onUnknown-chip__caption-value')
              )
            : getComputedStyle(element.querySelector('.lmnt-divider'));

        const html = isStroke ? style.borderBottomColor : style.color;
        /* eslint-disable-next-line no-param-reassign */
        element.querySelector('.onUnknown-chip__caption-value').innerHTML =
            html;
    });
};

export const getAncillaryColors = theme => {
    const howMany = themesArray.find(t => t.slug === theme).ancillaryTotal;
    const ancillaryArray = [];
    // eslint-disable-next-line no-plusplus
    for (let i = 0; i < howMany; i++) {
        ancillaryArray.push(`${i + 1}00`);
    }
    return ancillaryArray;
};

export const getDangerIndexes = themeName => {
    const theme = themesArray.find(t => t.slug === themeName);
    return {
        dangerPrimaryIndex: theme.dangerPrimaryIndex,
        dangerVariantIndex: theme.dangerVariantIndex
    };
};

export const getSuccessIndexes = themeName => {
    const theme = themesArray.find(t => t.slug === themeName);
    return {
        successPrimaryIndex: theme.successPrimaryIndex,
        successVariantIndex: theme.successVariantIndex
    };
};

export const getUtilityChips = () => {
    const hexDisplayElements = document.querySelectorAll('.data-viz-ramp-chip');
    hexDisplayElements.forEach(element => {
        const style = getComputedStyle(element);
        const { backgroundColor, color } = style;
        const hex = RGBAToHexA(backgroundColor);
        const onColor = RGBAToHexA(color);
        /* eslint-disable-next-line no-param-reassign */
        element.querySelector('.chip-surface-value').innerHTML = hex;
        // eslint-disable-next-line no-param-reassign
        element.querySelector('.chip-on-surface-value').innerHTML = onColor;
    });
};

export const setFontFamilyDisplay = element => {
    const style = getComputedStyle(element);
    const { fontFamily } = style;
    /* eslint-disable-next-line no-param-reassign */
    element.innerHTML = `<br>font-family: ${fontFamily};`;
};
