// NOTE: Color Ramps only require SCSS color values for contrast calculations
@use 'sass:map';
@use 'sass-hex-rgb' as rgb;
@use '../common/mixins' as mixins;
@use '../common/element.core' as element;
@use '../common/functions' as functions;

//////////////////////
//////  Colors  //////
//////////////////////

$lmnt-theme-primary: #fcb514;
$lmnt-theme-primary-variant: #d88c02;
$lmnt-theme-secondary: #009e49;
$lmnt-theme-secondary-variant: #003a1a;

$primaryMap: (
    primary-50: #fef8e9,
    primary-100: #feeabe,
    primary-200: #fde4a9,
    primary-300: #fdd67e,
    primary-400: #fcc854,
    primary-500: #fcb514,
    primary-600: #eba015,
    primary-700: #d88c02,
    primary-800: #935f01,
    primary-900: #161102
);

$secondaryMap: (
    secondary-50: #e7f6ee,
    secondary-100: #a2dbbc,
    secondary-200: #73ca9b,
    secondary-300: #2eaf6a,
    secondary-400: #16a65a,
    secondary-500: #009e49,
    secondary-600: #009043,
    secondary-700: #037437,
    secondary-800: #003a1a,
    secondary-900: #161102
);

@include mixins.colorRamp($primaryMap);
@include mixins.colorRamp($secondaryMap);

/////////////////////
//////  Theme  //////
/////////////////////

$onClassesMap: map.merge(
    element.$onClassesMap,
    (
        on-background: functions.color-contrast-value-check(#fff),
        on-surface: functions.color-contrast-value-check(#fff),
        on-primary: functions.color-contrast-value-check($lmnt-theme-primary),
        on-primary-variant:
            functions.color-contrast-value-check($lmnt-theme-primary-variant),
        primary-on-surface: #161102,
        on-secondary: functions.color-contrast-value-check($lmnt-theme-secondary),
        on-secondary-variant:
            functions.color-contrast-value-check($lmnt-theme-secondary-variant),
        secondary-on-surface: #037437
    )
);

@each $color, $value in $onClassesMap {
    @include mixins.onBackgroundColorClasses($color: $color, $value: $value);
}

//////////////////
/// GRADIENTS ///
/////////////////

$gradient-colors: (
    'primary-to-bottom': $lmnt-theme-primary,
    'primary-dark-to-bottom': map.get($primaryMap, 'primary-900'),
    'primary-darker-to-bottom': darken(map.get($primaryMap, 'primary-900'), 10),
    'secondary-to-bottom': $lmnt-theme-secondary,
    'secondary-dark-to-bottom': map.get($secondaryMap, 'secondary-900'),
    'secondary-darker-to-bottom': darken(map.get($secondaryMap, 'secondary-900'), 10),
    'primary-to-top': $lmnt-theme-primary,
    'primary-dark-to-top': map.get($primaryMap, 'primary-900'),
    'primary-darker-to-top': darken(map.get($primaryMap, 'primary-900'), 10),
    'secondary-to-top': $lmnt-theme-secondary,
    'secondary-dark-to-top': map.get($secondaryMap, 'secondary-900'),
    'secondary-darker-to-top': darken(map.get($secondaryMap, 'secondary-900'), 10),
    'black-to-bottom': element.$black,
    'black-to-top': element.$black,
    'white-to-bottom': element.$white,
    'white-to-top': element.$white
);

@include mixins.gradientRamp($gradient-colors);

:root,
.lmnt,
.lmnt-theme-goldcountry {
    --lmnt-theme-on-surface: #{map.get($onClassesMap, 'on-surface')};
    --lmnt-theme-on-background: #{map.get($onClassesMap, 'on-background')};
    // Element Theme Defaults - Surface
    --lmnt-theme-surface: #{#fff};
}

.lmnt,
.lmnt-theme-goldcountry {
    //////////////////////////////////
    ////// BASE LEVEL OVERRIDES //////
    //////////////////////////////////

    // Element Theme Defaults - Primary
    --lmnt-theme-primary: #{$lmnt-theme-primary};
    --lmnt-theme-on-primary: #{map.get($onClassesMap, 'on-primary')};
    --lmnt-theme-primary-variant: #{$lmnt-theme-primary-variant};
    --lmnt-theme-on-primary-variant: #{map.get($onClassesMap, 'on-primary-variant')};

    --lmnt-theme-primary-on-surface: #{map.get($onClassesMap, 'primary-on-surface')};
    $lmnt-primary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'primary-on-surface')
    );

    --lmnt-primary-on-surface-rgb: #{$lmnt-primary-on-surface-rgb};

    // Element Theme Defaults - Secondary
    --lmnt-theme-secondary: #{$lmnt-theme-secondary};
    --lmnt-theme-on-secondary: #{map.get($onClassesMap, 'on-secondary')};
    --lmnt-theme-secondary-variant: #{$lmnt-theme-secondary-variant};
    --lmnt-theme-on-secondary-variant: #{map.get($onClassesMap, 'on-secondary-variant')};
    --lmnt-theme-secondary-on-surface: #{map.get($onClassesMap, 'secondary-on-surface')};

    // On surface rgb
    $lmnt-primary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'primary-on-surface')
    );
    --lmnt-primary-on-surface-rgb: #{$lmnt-primary-on-surface-rgb};

    $lmnt-secondary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'secondary-on-surface')
    );
    --lmnt-secondary-on-surface-rgb: #{$lmnt-secondary-on-surface-rgb};

    $lmnt-danger-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'danger-on-surface')
    );
    --lmnt-danger-on-surface-rgb: #{$lmnt-danger-on-surface-rgb};

    $lmnt-success-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'danger-on-surface')
    );
    --lmnt-success-on-surface-rgb: #{$lmnt-success-on-surface-rgb};

    // On color rgb
    $lmnt-on-primary-rgb: rgb.toValues(map.get($onClassesMap, 'on-primary'));
    --lmnt-on-primary-rgb: #{$lmnt-on-primary-rgb};

    $lmnt-on-secondary-rgb: rgb.toValues(map.get($onClassesMap, 'on-secondary'));
    --lmnt-on-secondary-rgb: #{$lmnt-on-secondary-rgb};

    $lmnt-on-danger-rgb: rgb.toValues(map.get($onClassesMap, 'on-danger'));
    --lmnt-on-danger-rgb: #{$lmnt-on-danger-rgb};

    $lmnt-on-success-rgb: rgb.toValues(map.get($onClassesMap, 'on-success'));
    --lmnt-on-success-rgb: #{$lmnt-on-success-rgb};

    // Element Primary Color Ramp
    @each $name, $color in $primaryMap {
        --lmnt-theme-#{$name}: #{$color};
    }
    // Element Secondary Color Ramp
    @each $name, $color in $secondaryMap {
        --lmnt-theme-#{$name}: #{$color};
    }
    ///////////////////////////////////////
    ////// COMPONENT LEVEL OVERRIDES //////
    ///////////////////////////////////////

    // Button
    --lmnt-button-shape-radius: 0;
    --lmnt-button-outlined-text-color: var(--lmnt-theme-primary-on-surface);
    --lmnt-button-outlined-border-color: var(--lmnt-theme-primary-on-surface);
    --lmnt-button-text-color: var(--lmnt-theme-primary-on-surface);

    // Snackbar
    --lmnt-theme-on-snackbar: #fde4a9;
    --lmnt-theme-on-snackbar-variant: #73ca9b;

    // Typography

    --lmnt-typography-link-color: #eba015;

    // Display 1
    --mdc-typography-headline1-letter-spacing: -0.016em; // -1.5px
    --mdc-typography-headline1-line-height: 1.2083333;

    // Display 2
    --mdc-typography-headline2-line-height: 1.2;

    // Display 3
    --mdc-typography-headline3-line-height: 1.166666667;

    // Display 4
    --mdc-typography-headline4-letter-spacing: 0.007em; // 0.25px
    --mdc-typography-headline4-line-height: 1.17647058;

    // Display 5
    --mdc-typography-headline5-line-height: 1.166666667;

    // Display 6
    --mdc-typography-headline6-line-height: 1.2;

    // Subtitle 1
    --mdc-typography-subtitle1-line-height: 1.5;

    // Subtitle 2
    --mdc-typography-subtitle2-line-height: 1.428572;

    // Body 1
    --mdc-typography-body1-line-height: 1.75;

    // Body 2
    --mdc-typography-body2-line-height: 1.428572;

    // Caption
    --mdc-typography-caption-line-height: 1.3333333;

    // Button
    --mdc-typography-button-line-height: 1.142857;

    // Overline
    --mdc-typography-overline-line-height: 1.3333333;
}

/////////////////////////
////////  FONTS  ////////
/////////////////////////
$assetsPath: '..' !default;

/* stylelint-disable scale-unlimited/declaration-strict-value, font-weight-notation, indentation, font-family-name-quotes */

// Roboto: light, medium, regular, and bold (with italic variants)
@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: normal;
    font-weight: 300;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-Light.ttf') format('truetype');
}

@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: italic;
    font-weight: 300;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-LightItalic.ttf')
        format('truetype');
}

@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: normal;
    font-weight: 400;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-Regular.ttf') format('truetype');
}

@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: italic;
    font-weight: 400;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-RegularItalic.ttf')
        format('truetype');
}

@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: normal;
    font-weight: 500;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-Medium.ttf') format('truetype');
}

@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: italic;
    font-weight: 500;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-MediumItalic.ttf')
        format('truetype');
}

@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: normal;
    font-weight: 700;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-Bold.ttf') format('truetype');
}

@font-face {
    font-display: swap;
    font-family: 'Roboto';
    font-style: italic;
    font-weight: 700;
    src: url('#{$assetsPath}/assets/fonts/Roboto/Roboto-BoldItalic.ttf')
        format('truetype');
}

/* stylelint-enable scale-unlimited/declaration-strict-value, font-weight-notation, indentation, font-family-name-quotes */
