// NOTE: Color Ramps only require SCSS color values for contrast calculations\
@use 'sass:map';
@use 'sass-hex-rgb' as rgb;
@use '../hcp.theme' as hcp;
@use '../../../common/mixins' as mixins;
@use '../../../common/element.core' as element;
@use '../../../common/functions' as functions;

////////////////////////
//////  Colors   ///////
////////////////////////

$lmnt-theme-surface: #fff;
$lmnt-theme-background: $lmnt-theme-surface;
$lmnt-theme-primary: #d93847;
$lmnt-theme-primary-variant: #910144;
$lmnt-theme-secondary: #910144;
$lmnt-theme-secondary-variant: #910144;

$primaryMap: (
    primary-50: #ff6d7b,
    primary-100: #f96573,
    primary-200: #f45d6c,
    primary-300: #ee5664,
    primary-400: #e94e5d,
    primary-500: #e34755,
    primary-600: #de3f4e,
    primary-700: #d93847,
    primary-800: #ae1120,
    primary-900: #7e010d
);

$secondaryMap: (
    secondary-50: #c9005d,
    secondary-100: #c10059,
    secondary-200: #b90056,
    secondary-300: #b10052,
    secondary-400: #a9004e,
    secondary-500: #a1004b,
    secondary-600: #990047,
    secondary-700: #910144,
    secondary-800: #6f0034,
    secondary-900: #580029
);

$ancillaryMap: (
    ancillary-100: #910144
);

@include mixins.colorRamp($primaryMap, $themeBlack: hcp.$black, $themeWhite: hcp.$white);
@include mixins.colorRamp(
    $secondaryMap,
    $themeBlack: hcp.$black,
    $themeWhite: hcp.$white
);
@include mixins.colorRamp(
    $ancillaryMap,
    $themeBlack: hcp.$black,
    $themeWhite: hcp.$white
);

//////////////////
/// GRADIENTS ///
/// ////////////

$gradient-colors: (
    'primary-to-bottom': $lmnt-theme-primary,
    'primary-dark-to-bottom': map.get($primaryMap, 'primary-900'),
    'primary-darker-to-bottom': darken(map.get($primaryMap, 'primary-900'), 10),
    'secondary-to-bottom': $lmnt-theme-secondary,
    'secondary-dark-to-bottom': map.get($secondaryMap, 'secondary-900'),
    'secondary-darker-to-bottom': darken(map.get($secondaryMap, 'secondary-900'), 10),
    'primary-to-top': $lmnt-theme-primary,
    'primary-dark-to-top': map.get($primaryMap, 'primary-900'),
    'primary-darker-to-top': darken(map.get($primaryMap, 'primary-900'), 10),
    'secondary-to-top': $lmnt-theme-secondary,
    'secondary-dark-to-top': map.get($secondaryMap, 'secondary-900'),
    'secondary-darker-to-top': darken(map.get($secondaryMap, 'secondary-900'), 10),
    'black-to-bottom': hcp.$black,
    'black-to-top': hcp.$black,
    'white-to-bottom': hcp.$white,
    'white-to-top': hcp.$white
);

@include mixins.gradientRamp($gradient-colors);

/////////////////////
//////  Theme  //////
/////////////////////

$onClassesMap: map.merge(
    element.$onClassesMap,
    (
        on-primary-variant:
            functions.color-contrast-value-check($lmnt-theme-primary-variant),
        primary-on-surface: $lmnt-theme-primary,
        on-secondary: functions.color-contrast-value-check($lmnt-theme-secondary),
        on-secondary-variant:
            functions.color-contrast-value-check($lmnt-theme-secondary-variant),
        secondary-on-surface: $lmnt-theme-secondary
    )
);

@each $color, $value in $onClassesMap {
    @include mixins.onBackgroundColorClasses($color: $color, $value: $value);
}

$onPrimaryMap: (
    on-primary-active:
        rgba(map.get($onClassesMap, 'on-primary'), element.$emphasis-high-black),
    on-primary-inactive:
        rgba(map.get($onClassesMap, 'on-primary'), element.$emphasis-inactive),
    on-primary-disabled:
        rgba(map.get($onClassesMap, 'on-primary'), element.$emphasis-disabled),
    on-primary-stroke:
        rgba(map.get($onClassesMap, 'on-primary'), element.$emphasis-stroke),
    on-primary-base: rgba(map.get($onClassesMap, 'on-primary'), element.$emphasis-high)
);

$onSecondaryMap: (
    on-secondary-active:
        rgba(map.get($onClassesMap, 'on-secondary'), element.$emphasis-high-black),
    on-secondary-inactive:
        rgba(map.get($onClassesMap, 'on-secondary'), element.$emphasis-inactive),
    on-secondary-disabled:
        rgba(map.get($onClassesMap, 'on-secondary'), element.$emphasis-disabled),
    on-secondary-stroke:
        rgba(map.get($onClassesMap, 'on-secondary'), element.$emphasis-stroke),
    on-secondary-base:
        rgba(map.get($onClassesMap, 'on-secondary'), element.$emphasis-high)
);

@each $color, $value in $onPrimaryMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

@each $color, $value in $onSecondaryMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

.lmnt,
.lmnt-theme-verquvo {
    //////////////////////////////////
    ////// BASE LEVEL OVERRIDES //////
    //////////////////////////////////

    // Element Theme Defaults - Primary
    --lmnt-theme-primary: #{$lmnt-theme-primary};
    --lmnt-theme-on-primary: #{map.get($onClassesMap, 'on-primary')};
    --lmnt-theme-primary-variant: #{$lmnt-theme-primary-variant};
    --lmnt-theme-on-primary-variant: #{map.get($onClassesMap, 'on-primary-variant')};
    --lmnt-theme-primary-on-surface: #{map.get($onClassesMap, 'primary-on-surface')};

    $lmnt-primary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'primary-on-surface')
    );
    --lmnt-primary-on-surface-rgb: #{$lmnt-primary-on-surface-rgb};

    // Element Theme Defaults - Secondary
    --lmnt-theme-secondary: #{$lmnt-theme-secondary};
    --lmnt-theme-on-secondary: #{map.get($onClassesMap, 'on-secondary')};
    --lmnt-theme-secondary-variant: #{$lmnt-theme-secondary-variant};
    --lmnt-theme-on-secondary-variant: #{map.get($onClassesMap, 'on-secondary-variant')};
    --lmnt-theme-secondary-on-surface: #{map.get($onClassesMap, 'secondary-on-surface')};
    --lmnt-theme-success-on-surface: #{map.get($onClassesMap, 'success-on-surface')};

    // On surface rgb
    $lmnt-primary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'primary-on-surface')
    );
    --lmnt-primary-on-surface-rgb: #{$lmnt-primary-on-surface-rgb};

    $lmnt-secondary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'secondary-on-surface')
    );
    --lmnt-secondary-on-surface-rgb: #{$lmnt-secondary-on-surface-rgb};

    $lmnt-danger-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'danger-on-surface')
    );
    --lmnt-danger-on-surface-rgb: #{$lmnt-danger-on-surface-rgb};

    $lmnt-success-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'danger-on-surface')
    );
    --lmnt-success-on-surface-rgb: #{$lmnt-success-on-surface-rgb};

    // On color rgb
    $lmnt-on-primary-rgb: rgb.toValues(map.get($onClassesMap, 'on-primary'));
    --lmnt-on-primary-rgb: #{$lmnt-on-primary-rgb};

    $lmnt-on-secondary-rgb: rgb.toValues(map.get($onClassesMap, 'on-secondary'));
    --lmnt-on-secondary-rgb: #{$lmnt-on-secondary-rgb};

    $lmnt-on-danger-rgb: rgb.toValues(map.get($onClassesMap, 'on-danger'));
    --lmnt-on-danger-rgb: #{$lmnt-on-danger-rgb};

    $lmnt-on-success-rgb: rgb.toValues(map.get($onClassesMap, 'on-success'));
    --lmnt-on-success-rgb: #{$lmnt-on-success-rgb};

    // On surface rgb
    $lmnt-primary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'primary-on-surface')
    );
    --lmnt-primary-on-surface-rgb: #{$lmnt-primary-on-surface-rgb};

    $lmnt-secondary-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'secondary-on-surface')
    );
    --lmnt-secondary-on-surface-rgb: #{$lmnt-secondary-on-surface-rgb};

    $lmnt-danger-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'danger-on-surface')
    );
    --lmnt-danger-on-surface-rgb: #{$lmnt-danger-on-surface-rgb};

    $lmnt-success-on-surface-rgb: rgb.toValues(
        map.get($onClassesMap, 'danger-on-surface')
    );
    --lmnt-success-on-surface-rgb: #{$lmnt-success-on-surface-rgb};

    // On color rgb
    $lmnt-on-primary-rgb: rgb.toValues(map.get($onClassesMap, 'on-primary'));
    --lmnt-on-primary-rgb: #{$lmnt-on-primary-rgb};

    $lmnt-on-secondary-rgb: rgb.toValues(map.get($onClassesMap, 'on-secondary'));
    --lmnt-on-secondary-rgb: #{$lmnt-on-secondary-rgb};

    $lmnt-on-danger-rgb: rgb.toValues(map.get($onClassesMap, 'on-danger'));
    --lmnt-on-danger-rgb: #{$lmnt-on-danger-rgb};

    $lmnt-on-success-rgb: rgb.toValues(map.get($onClassesMap, 'on-success'));
    --lmnt-on-success-rgb: #{$lmnt-on-success-rgb};

    // Element Primary Color Ramp
    @each $name, $color in $primaryMap {
        --lmnt-theme-#{$name}: #{$color};
    }
    // Element Secondary Color Ramp
    @each $name, $color in $secondaryMap {
        --lmnt-theme-#{$name}: #{$color};
    }
    // Element Ancillary Color Ramp
    @each $name, $color in $ancillaryMap {
        --lmnt-theme-#{$name}: #{$color};
    }
}
