@use '../../../common/element.core' as element;
@use '../../../common/mixins' as mixins;
////////////////////////////////////
///////  Utility: Color Ramp ///////
////////////////////////////////////

// Note: utility classes for `background-color` and `color`
// Note: foreground `color` is determined by `color-contrast-value-check`

@each $color, $value in element.$primaryMap {
    @include mixins.onBackgroundColorClasses($color: $color, $value: $value);
}

@each $color, $value in element.$secondaryMap {
    @include mixins.onBackgroundColorClasses($color: $color, $value: $value);
}

@each $color, $value in element.$dangerMap {
    @include mixins.onBackgroundColorClasses($color: $color, $value: $value);
}

@each $color, $value in element.$successMap {
    @include mixins.onBackgroundColorClasses($color: $color, $value: $value);
}

@each $color, $value in element.$ancillaryMap {
    @include mixins.onBackgroundColorClasses($color: $color, $value: $value);
}

@each $color, $value in element.$onSurfaceMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

@each $color, $value in element.$onPrimaryMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

@each $color, $value in element.$onSecondaryMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

@each $color, $value in element.$onUnknownBlackClassesMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

@each $color, $value in element.$onUnknownWhiteClassesMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

@each $color, $value in element.$onDangerMap {
    @include mixins.onClasses($color: $color, $value: $value);
}

@each $color, $value in element.$onSuccessMap {
    @include mixins.onClasses($color: $color, $value: $value);
}
