import React from 'react';


export interface BadgeProps {
}

/**
* Badges are colored text elements that hold small amounts of information. Badges come in two versions, Label which can be used to add context to the UI or other elements and Notification which can indicate that a certain element within the UI can be interacted with to show new or updated information.
*/
export const Badge: React.FunctionComponent<BadgeProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface LabelBadgeProps {
    /**
    *  Label to be displayed in the Badge. Usually a string, but can also be an x-small icon.
    *
    * Defaults to **null**.
    */
    label?: string | Function | React.ReactNode;
    /**
    *  Label type to be displayed in the Badge.
    *
    * Defaults to **'string'**.
    */
    labelType?: string;
    /**
    * Adds the given Icon to the left of the label text. May not be used with `trailingIcon` or if `labelType` is icon - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority.  If `labelType` is set to `icon` label will take priority.  Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.  If a custom icon is used, the icon should not be larger than 9 x 9.
    *
    * Defaults to **undefined**.
    */
    leadingIcon?: string | Function | React.ReactNode;
    /**
    * Color of the badge. It will default according to your theme.  For most themes that is primary.
    *
    * Defaults to **'themeDefault'**.
    */
    themeColor?: string;
    /**
    * Adds the given Icon to the right of the label text. May not be used with `leadingIcon` or if `labelType` is icon - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority.  If `labelType` is set to `icon` label will take priority.  Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
    *
    * Defaults to **undefined**.
    */
    trailingIcon?: string | Function | React.ReactNode;
}

/**
* Badges are colored text elements that hold small amounts of information. Label Badges can be used to add context to the UI or other elements within the experience. They are great for indicating different categories, statuses, and products.
 * @prop {string|function|React.ReactNode} label -  Label to be displayed in the Badge. Usually a string, but can also be an x-small icon. Defaults to _null_.
 * @prop {string} labelType -  Label type to be displayed in the Badge. Defaults to _'string'_.
 * @prop {string|function|React.ReactNode} leadingIcon - Adds the given Icon to the left of the label text. May not be used with `trailingIcon` or if `labelType` is icon - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority.  If `labelType` is set to `icon` label will take priority.  Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.  If a custom icon is used, the icon should not be larger than 9 x 9. Defaults to _undefined_.
 * @prop {string} themeColor - Color of the badge. It will default according to your theme.  For most themes that is primary. Defaults to _'themeDefault'_.
 * @prop {string|function|React.ReactNode} trailingIcon - Adds the given Icon to the right of the label text. May not be used with `leadingIcon` or if `labelType` is icon - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority.  If `labelType` is set to `icon` label will take priority.  Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control. Defaults to _undefined_.
*/
export const LabelBadge: React.FunctionComponent<LabelBadgeProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface NotificationBadgeProps {
    /**
    *  Number to be displayed in badge. Omit for a status light badge.
    *
    * Defaults to **null**.
    */
    counter?: number;
    /**
    * Max number the badge can display.
    *
    * Defaults to **99**.
    */
    max?: number;
    /**
    *  Theme color of the badge.
    *
    * Defaults to **'danger'**.
    */
    themeColor?: string;
}

/**
* Badges are colored text elements that hold small amounts of information. Notification Badges are used for indicating that a certain element within the UI can be interacted with to show new or updated information. They work great for alerting the user of new messages, alerts, or items that need attention.
 * @prop {number} counter -  Number to be displayed in badge. Omit for a status light badge. Defaults to _null_.
 * @prop {number} max - Max number the badge can display. Defaults to _99_.
 * @prop {string} themeColor -  Theme color of the badge. Defaults to _'danger'_.
*/
export const NotificationBadge: React.FunctionComponent<NotificationBadgeProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface BannerProps {
    /**
    * Indicates that the banner should have more white-space padding than default.
    *
    * Defaults to **null**.
    */
    airy?: boolean;
    /**
    * Content to be rendered inside the banner. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * If using a custom top app bar with banner, you will have to send in the height of the custom top app bar so the banner positions correctly, ie 55px. You will be responsible for making sure the page content aligns properly upon opening and closing the Banner.  The Banner Margin Fix component allows you to wrap the content and send in the margin top or you can use a custom component.
    *
    * Defaults to **null**.
    */
    customTopAppBarHeight?: string;
    /**
    * Indicates that the banner will be used with an Element Drawer.
    *
    * Defaults to **null**.
    */
    drawer?: boolean;
    /**
    * Indicates that the banner should have box-shadow and elevation styles. Should be used when banner is fixed. Flat style by default.
    *
    * Defaults to **null**.
    */
    elevated?: boolean;
    /**
    * Indicates that the banner will be in a fixed position.
    *
    * Defaults to **null**.
    */
    fixed?: boolean;
    /**
    * Banner media slot can hold an image, icon, or other media. (40x40).
    *
    * Defaults to **null**.
    */
    media?: React.ReactNode;
    /**
    * Indicates that the banner should be open. Open by default. Animates between states with transition CSS.
    *
    * Defaults to **true**.
    */
    open?: boolean;
    /**
    * If true clicking on the primary button will dismiss the banner. At least one button must dismiss the banner. If both primary and secondary buttons are marked as not dismissive, the primary button will default to dismissive.
    *
    * Defaults to **true**.
    */
    primaryButtonDismissive?: boolean;
    /**
    * Banner primary button label text.
    *
    * Defaults to **'Ok'**.
    */
    primaryButtonLabel?: string;
    /**
    * If true clicking on the secondary button will dismiss the banner. At least one button must dismiss the banner. If both secondary and secondary buttons are marked as not dismissive, the primary button will default to dismissive.
    *
    * Defaults to **true**.
    */
    secondaryButtonDismissive?: boolean;
    /**
    * Banner action button label text.
    *
    * Defaults to **null**.
    */
    secondaryButtonLabel?: string;
    /**
    * Indicates that the banner background-color should use Element's 'surface variant' color. Uses 'surface' by default.
    *
    * Defaults to **null**.
    */
    surfaceVariant?: boolean;
    /**
    * Indicates that the banner will be used with an Element Top App Bar.
    *
    * Defaults to **null**.
    */
    topAppBar?: boolean;
    /**
    * Indicates which type of Element Top App Bar Banner will be used with.
    *
    * Defaults to **'fixed'**.
    */
    topAppBarVariant?: string;
    /**
    * Fired when the banner finishes its closing animation.
    */
    onClosed?: Function;
    /**
    * Fired when the banner begins its closing animation.
    */
    onClosing?: Function;
    /**
    * Fired when the banner finishes its opened animation.
    */
    onOpened?: Function;
    /**
    * Fired when the banner begins its MDCBanner:opening animation.
    */
    onOpening?: Function;
    /**
    * Fired when the Primary Action Button is clicked. Runs after closing animation begins.
    */
    onPrimaryClicked?: Function;
    /**
    * Fired when the Secondary Action Button is clicked. Runs after closing animation begins.
    */
    onSecondaryClicked?: Function;
}

/**
* A banner displays a prominent message and related optional actions.
 * @prop {boolean} airy - Indicates that the banner should have more white-space padding than default. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered inside the banner. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} customTopAppBarHeight - If using a custom top app bar with banner, you will have to send in the height of the custom top app bar so the banner positions correctly, ie 55px. You will be responsible for making sure the page content aligns properly upon opening and closing the Banner.  The Banner Margin Fix component allows you to wrap the content and send in the margin top or you can use a custom component. Defaults to _null_.
 * @prop {boolean} drawer - Indicates that the banner will be used with an Element Drawer. Defaults to _null_.
 * @prop {boolean} elevated - Indicates that the banner should have box-shadow and elevation styles. Should be used when banner is fixed. Flat style by default. Defaults to _null_.
 * @prop {boolean} fixed - Indicates that the banner will be in a fixed position. Defaults to _null_.
 * @prop {React.ReactNode} media - Banner media slot can hold an image, icon, or other media. (40x40). Defaults to _null_.
 * @prop {boolean} open - Indicates that the banner should be open. Open by default. Animates between states with transition CSS. Defaults to _true_.
 * @prop {boolean} primaryButtonDismissive - If true clicking on the primary button will dismiss the banner. At least one button must dismiss the banner. If both primary and secondary buttons are marked as not dismissive, the primary button will default to dismissive. Defaults to _true_.
 * @prop {string} primaryButtonLabel - Banner primary button label text. Defaults to _'Ok'_.
 * @prop {boolean} secondaryButtonDismissive - If true clicking on the secondary button will dismiss the banner. At least one button must dismiss the banner. If both secondary and secondary buttons are marked as not dismissive, the primary button will default to dismissive. Defaults to _true_.
 * @prop {string} secondaryButtonLabel - Banner action button label text. Defaults to _null_.
 * @prop {boolean} surfaceVariant - Indicates that the banner background-color should use Element's 'surface variant' color. Uses 'surface' by default. Defaults to _null_.
 * @prop {boolean} topAppBar - Indicates that the banner will be used with an Element Top App Bar. Defaults to _null_.
 * @prop {string} topAppBarVariant - Indicates which type of Element Top App Bar Banner will be used with. Defaults to _'fixed'_.
 *  @event onClosed - Fired when the banner finishes its closing animation.
 *  @event onClosing - Fired when the banner begins its closing animation.
 *  @event onOpened - Fired when the banner finishes its opened animation.
 *  @event onOpening - Fired when the banner begins its MDCBanner:opening animation.
 *  @event onPrimaryClicked - Fired when the Primary Action Button is clicked. Runs after closing animation begins.
 *  @event onSecondaryClicked - Fired when the Secondary Action Button is clicked. Runs after closing animation begins.
*/
export const Banner: React.FunctionComponent<BannerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface BannerMarginFixProps {
    /**
    * If supplied, the adjusted margin will attempt to be automatically calculated.
    *
    * Defaults to **undefined**.
    */
    bannerId?: string;
    /**
    * Apply the adjusted left margin.
    *
    * Defaults to **false**.
    */
    bannerOpen?: boolean;
    /**
    * Content to be vertically adjusted. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The spacing between the bottom of the banner and the top of the content being adjusted.
    *
    * Defaults to **24**.
    */
    extraMargin?: number;
    /**
    * Custom margin.
    *
    * Defaults to **0**.
    */
    marginTop?: number;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
}

/**
* A container to correctly position content when using a fixed Banner.
 * @prop {string} bannerId - If supplied, the adjusted margin will attempt to be automatically calculated. Defaults to _undefined_.
 * @prop {boolean} bannerOpen - Apply the adjusted left margin. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be vertically adjusted. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} extraMargin - The spacing between the bottom of the banner and the top of the content being adjusted. Defaults to _24_.
 * @prop {number} marginTop - Custom margin. Defaults to _0_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
*/
export const BannerMarginFix: React.FunctionComponent<BannerMarginFixProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


interface ButtonReference { current: object; }

export interface ButtonProps {
    /**
    * @deprecated _Use `themeColor='secondary'` instead._
    *
    * Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme).
    *
    * Defaults to **undefined**.
    */
    altColor?: boolean;
    /**
    * One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme.
    *
    * Defaults to **'themeDefault'**.
    */
    buttonSize?: string;
    /**
    * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _forwardRef has been implemented for Button._
    *
    * Reference to the DOM button. This enables a greater level of integration.
    *
    * Defaults to **undefined**.
    */
    customRef?: Function|ButtonReference;
    /**
    * @deprecated _Use `variant='danger'` instead._
    *
    * Apply danger style to the button.
    *
    * Defaults to **undefined**.
    */
    danger?: boolean;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Sets elevation of the button. Default will be the theme default.
    *
    * Defaults to **'default'**.
    */
    elevation?: string;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply a filled-in style. Previously called `primary`.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Applies a full-width style where the textfield will fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The button will render as an anchor tag. If the tag prop is set, that prop will take precedence.
    *
    * Defaults to **null**.
    */
    href?: string;
    /**
    * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
    *
    * Defaults to **undefined**.
    */
    leadingIcon?: string | Function | React.ReactNode;
    /**
    * @deprecated _Use `variant='outlined'`._
    *
    * Apply outlined style to the button. Previously called `secondary`.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply primary style to the Button.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * @deprecated _Use `'variant=outlined'` instead._
    *
    * Apply secondary style to the Button.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
    *
    * Defaults to **null**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * @deprecated _Use `variant='embedded'` instead._
    *
    * Apply tertiary style to the Button.
    *
    * Defaults to **undefined**.
    */
    tertiary?: boolean;
    /**
    * @deprecated _Use `variant='text'` instead._
    *
    * Apply unfilled, un-outlined style to the Button. Previously called `tertiary`.
    *
    * Defaults to **undefined**.
    */
    text?: boolean;
    /**
    * Sets the theme color for the button. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
    *
    * Defaults to **undefined**.
    */
    trailingIcon?: string | Function | React.ReactNode;
    /**
    * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
    *
    * Defaults to **'button'**.
    */
    type?: string;
    /**
    * @deprecated _Use `elevation='flat' instead._
    *
    * Remove elevation.
    *
    * Defaults to **undefined**.
    */
    unelevated?: boolean;
    /**
    * Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * The primary interaction event for button.
    */
    onClick?: Function;
}

/**
* A button should contain a clear call to action for the user. Action verbs are good text for the button container. The style and size of the button should reflect its hierarchy and importance of the action being called.
 * @prop {boolean} altColor - Deprecated: Use `themeColor='secondary'` instead. Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme). Defaults to _undefined_.
 * @prop {string} buttonSize - One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme. Defaults to _'themeDefault'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._ Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} customRef - Deprecated: forwardRef has been implemented for Button. Reference to the DOM button. This enables a greater level of integration. Defaults to _undefined_.
 * @prop {boolean} danger - Deprecated: Use `variant='danger'` instead. Apply danger style to the button. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {string} elevation - Sets elevation of the button. Default will be the theme default. Defaults to _'default'_.
 * @prop {boolean} filled - Deprecated: Use `variant='filled'` instead. Apply a filled-in style. Previously called `primary`. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Applies a full-width style where the textfield will fill it's container. Defaults to _false_.
 * @prop {string} href - The button will render as an anchor tag. If the tag prop is set, that prop will take precedence. Defaults to _null_.
 * @prop {string} label - The displayed text. Expects a valid string. If label and children are both set, label will take priority. Defaults to _null_.
 * @prop {string|function|React.ReactNode} leadingIcon - Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control, Defaults to _undefined_.
 * @prop {boolean} outlined - Deprecated: Use `variant='outlined'`. Apply outlined style to the button. Previously called `secondary`. Defaults to _undefined_.
 * @prop {boolean} primary - Deprecated: Use `variant='filled'` instead. Apply primary style to the Button. Defaults to _undefined_.
 * @prop {boolean} secondary - Deprecated: Use `'variant=outlined'` instead. Apply secondary style to the Button. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested. Defaults to _null_.
 * @prop {boolean} tertiary - Deprecated: Use `variant='embedded'` instead. Apply tertiary style to the Button. Defaults to _undefined_.
 * @prop {boolean} text - Deprecated: Use `variant='text'` instead. Apply unfilled, un-outlined style to the Button. Previously called `tertiary`. Defaults to _undefined_.
 * @prop {string} themeColor - Sets the theme color for the button. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|function|React.ReactNode} trailingIcon - Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control. Defaults to _undefined_.
 * @prop {string} type - This applies the html button type (button, submit, reset) or the anchor media type when used with the href property. Defaults to _'button'_.
 * @prop {boolean} unelevated - Deprecated: Use `elevation='flat' instead. Remove elevation. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes. Defaults to _'filled'_.
 *  @event onClick - The primary interaction event for button.
*/
export const Button: React.FunctionComponent<ButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ButtonGroupProps {
    /**
    * Children to be rendered. Expects multiple Element Buttons
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * How much spacing between buttons. Dense is 8p, standard is 16px and airy is 24px.
    *
    * Defaults to **'standard'**.
    */
    variant?: string;
}

/**
* 
 *@deprecated Use Group Component instead
A group of buttons.(DEPRECATED)
 * @prop {React.ReactNode} children - Children to be rendered. Expects multiple Element Buttons Defaults to _null_.
 * @prop {string} variant - How much spacing between buttons. Dense is 8p, standard is 16px and airy is 24px. Defaults to _'standard'_.
*/
export const ButtonGroup: React.FunctionComponent<ButtonGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardProps {
    /**
    * Alignment of the Card Body.
    *
    * Defaults to **'left-top'**.
    */
    bodyAlignment?: string;
    /**
    * Content to be rendered inside the Card. Should be one of CardActions, CardBody,  CardContent, CardDivider, CardFilter, CardMedia, or CardTitle.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Height style property of card.
    *
    * Defaults to **'auto'**.
    */
    height?: string;
    /**
    * If true the card will be styled for a loading spinner
    *
    * Defaults to **false**.
    */
    loadingCard?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Background color of the card. It is recommended to set to transparent if setting theme color on the Card Title or Card Body.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Variant options include `default` (set by theme), `flat`, `outlined`, and `raised`. The `flat` variant removes elevation. The `outlined` variant adds border and removes elevation. The `raised` variant adds elevation.
    *
    * Defaults to **'default'**.
    */
    variant?: string;
}

/**
* Cards contain content and actions related to a single subject. They help to organize content and increase scannability.
 * @prop {string} bodyAlignment - Alignment of the Card Body. Defaults to _'left-top'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the Card. Should be one of CardActions, CardBody,  CardContent, CardDivider, CardFilter, CardMedia, or CardTitle. Defaults to _null_.
 * @prop {string} height - Height style property of card. Defaults to _'auto'_.
 * @prop {boolean} loadingCard - If true the card will be styled for a loading spinner Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {string} themeColor - Background color of the card. It is recommended to set to transparent if setting theme color on the Card Title or Card Body. Defaults to _'surface'_.
 * @prop {string} variant - Variant options include `default` (set by theme), `flat`, `outlined`, and `raised`. The `flat` variant removes elevation. The `outlined` variant adds border and removes elevation. The `raised` variant adds elevation. Defaults to _'default'_.
*/
export const Card: React.FunctionComponent<CardProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


interface CardActionButtonReference { current: object; }

export interface CardActionButtonProps {
    /**
    * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    actionButtonThemeColor?: string;
    /**
    * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Reference to the DOM button. This enables a greater level of integration.
    *
    * Defaults to **undefined**.
    */
    customRef?: Function|CardActionButtonReference;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Applies a full-width style where the button will fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The button will render as an anchor tag.
    *
    * Defaults to **null**.
    */
    href?: string;
    /**
    * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
    *
    * Defaults to **null**.
    */
    leadingIcon?: string | React.ReactNode;
    /**
    * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
    *
    * Defaults to **null**.
    */
    trailingIcon?: string | React.ReactNode;
    /**
    * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
    *
    * Defaults to **'button'**.
    */
    type?: string;
    /**
    * The primary interaction event for button.
    */
    onClick?: Function;
}

/**
* Button specially formatted for Element Card.
 * @prop {string} actionButtonThemeColor - Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._ Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} customRef - Reference to the DOM button. This enables a greater level of integration. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {boolean} fullWidth - Applies a full-width style where the button will fill it's container. Defaults to _false_.
 * @prop {string} href - The button will render as an anchor tag. Defaults to _null_.
 * @prop {string} label - The displayed text. Expects a valid string. If label and children are both set, label will take priority. Defaults to _null_.
 * @prop {string|React.ReactNode} leadingIcon - Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control, Defaults to _null_.
 * @prop {string|React.ReactNode} trailingIcon - Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control. Defaults to _null_.
 * @prop {string} type - This applies the html button type (button, submit, reset) or the anchor media type when used with the href property. Defaults to _'button'_.
 *  @event onClick - The primary interaction event for button.
*/
export const CardActionButton: React.FunctionComponent<CardActionButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardActionIconProps {
    /**
    * Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally.
    *
    * Defaults to **false**.
    */
    active?: boolean;
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of the component being labeled for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * The content when when using the Card Action Icon Button normally. Expects a string, but a valid custom icon is accepted. For toggle button functionality, use `toggleOn` and `toggleOff` instead.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Disables the icon button.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The content to be rendered when the Card Action Icon Button is toggled off. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOff?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabelledBy?: string;
    /**
    * The content to be rendered when the Card Action Icon Button is toggled on. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOn?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabelledBy?: string;
    /**
    * Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
    *
    * Defaults to **empty string**.
    */
    variant?: string;
    /**
    * Fired when the user clicks the Card Action Icon Button, will return toggle state, if applicable.
    */
    onClick?: Function;
}

/**
* Icon button specially formatted for Element Card.
 * @prop {boolean} active - Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally. Defaults to _false_.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of the component being labeled for assistive technologies. Defaults to _null_.
 * @prop {React.ReactNode} children - The content when when using the Card Action Icon Button normally. Expects a string, but a valid custom icon is accepted. For toggle button functionality, use `toggleOn` and `toggleOff` instead. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Disables the icon button. Defaults to _false_.
 * @prop {React.ReactNode} toggleOff - The content to be rendered when the Card Action Icon Button is toggled off. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOffAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOffAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {React.ReactNode} toggleOn - The content to be rendered when the Card Action Icon Button is toggled on. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOnAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOnAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {string} variant - Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme. Defaults to _empty string_.
 *  @event onClick - Fired when the user clicks the Card Action Icon Button, will return toggle state, if applicable.
*/
export const CardActionIcon: React.FunctionComponent<CardActionIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardActionsProps {
    /**
    * Add buttons to card actions.
    *
    * Defaults to **null**.
    */
    actionButtons?: React.ReactNode;
    /**
    * Add icons to card actions.
    *
    * Defaults to **null**.
    */
    actionIcons?: React.ReactNode;
    /**
    * Aligns action buttons and icon buttons. 'center' and 'trailing' only allow buttons.
    *
    * Defaults to **'leading'**.
    */
    alignment?: string;
}

/**
* Card Actions is meant to contain interactive controls, most commonly buttons and icon buttons.
 * @prop {React.ReactNode} actionButtons - Add buttons to card actions. Defaults to _null_.
 * @prop {React.ReactNode} actionIcons - Add icons to card actions. Defaults to _null_.
 * @prop {string} alignment - Aligns action buttons and icon buttons. 'center' and 'trailing' only allow buttons. Defaults to _'leading'_.
*/
export const CardActions: React.FunctionComponent<CardActionsProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardBodyProps {
    /**
    * Content to be rendered inside the title block. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Background color of the card body. It is recommended to set to the Card themeColor to transparent if setting the Card Body color.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Sets typography class for Card Body. This can be overwritten by the children markup
    *
    * Defaults to **'body2'**.
    */
    typographyType?: string;
}

/**
* Card Body lives inside of CardContent (along with CardTitle, CardDivider, etc) and contains the main body content.
 * @prop {React.ReactNode} children - Content to be rendered inside the title block. Accepts any valid markup. Defaults to _null_.
 * @prop {string} themeColor - Background color of the card body. It is recommended to set to the Card themeColor to transparent if setting the Card Body color. Defaults to _'surface'_.
 * @prop {string} typographyType - Sets typography class for Card Body. This can be overwritten by the children markup Defaults to _'body2'_.
*/
export const CardBody: React.FunctionComponent<CardBodyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardContentProps {
    /**
    * Content to be rendered inside the content block. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Card Content contains the semantic content of the card. Non-semantic elements, ie an overlay layer, to a card should live outside this div.
 * @prop {React.ReactNode} children - Content to be rendered inside the content block. Accepts any valid markup. Defaults to _null_.
*/
export const CardContent: React.FunctionComponent<CardContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardDividerProps {
    /**
    * Theme color for the Card Divider. Leave empty for gray.
    *
    * Defaults to **'on-surface-stroke'**.
    */
    dividerThemeColor?: string;
    /**
    * Choose between dense and tall variants.
    *
    * Defaults to **'dense'**.
    */
    dividerVariant?: string;
}

/**
* Divider used to separate components of card. Can add a color variant for additional brand expression.
 * @prop {string} dividerThemeColor - Theme color for the Card Divider. Leave empty for gray. Defaults to _'on-surface-stroke'_.
 * @prop {string} dividerVariant - Choose between dense and tall variants. Defaults to _'dense'_.
*/
export const CardDivider: React.FunctionComponent<CardDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardFilterProps {
    /**
    * Content to be rendered inside the title block. Mostly commonly a Select, Textfield component, however any valid components or markup may be used.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Type of filter being used.
    *
    * Defaults to **'tabs'**.
    */
    filterType?: string;
}

/**
* Card filter is a section where select or other components used in filtering can live.
 * @prop {React.ReactNode} children - Content to be rendered inside the title block. Mostly commonly a Select, Textfield component, however any valid components or markup may be used. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} filterType - Type of filter being used. Defaults to _'tabs'_.
*/
export const CardFilter: React.FunctionComponent<CardFilterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardHorizontalGroupProps {
    /**
    * Most commonly text or a Typography component, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Changes which side of content the Card side media renders on. Improves layout for right-to-left languages.
    *
    * Defaults to **false**.
    */
    rtl?: boolean;
}

/**
* Card Horizontal Group groups together the media and Card content to be shown correctly in a horizontal Card.
 * @prop {React.ReactNode} children - Most commonly text or a Typography component, but accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} rtl - Changes which side of content the Card side media renders on. Improves layout for right-to-left languages. Defaults to _false_.
*/
export const CardHorizontalGroup: React.FunctionComponent<CardHorizontalGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardLeadingMediaProps {
    /**
    * Child components will be rendered on side of the provided image. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Url for Card media
    *
    * Defaults to **null**.
    */
    mediaUrl?: string;
    /**
    * Applies aspect ratio style to the card media.
    *
    * Defaults to **'square'**.
    */
    ratio?: string;
}

/**
* Card Leading Media is for holding an attention grabbing image that shows to the leading side of the card title.
 * @prop {React.ReactNode} children - Child components will be rendered on side of the provided image. Accepts any valid markup. Defaults to _null_.
 * @prop {string} mediaUrl - Url for Card media Defaults to _null_.
 * @prop {string} ratio - Applies aspect ratio style to the card media. Defaults to _'square'_.
*/
export const CardLeadingMedia: React.FunctionComponent<CardLeadingMediaProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardMediaProps {
    /**
    * Child components will be rendered on top of the provided image. Use `contentBottom` and `contentTop` to control content positioning. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Adjust placement of the media content.
    *
    * Defaults to **'bottom'**.
    */
    contentPlacement?: string;
    /**
    * Image Url for card background image
    *
    * Defaults to **null**.
    */
    imageUrl?: string;
    /**
    * Adds an overlay over to the Card Media.
    *
    * Defaults to **false**.
    */
    overlay?: boolean;
    /**
    * Overlay theme color.
    *
    * Defaults to **'dark'**.
    */
    overlayThemeColor?: string;
    /**
    * Applies aspect ratio style to the card media.
    *
    * Defaults to **'square'**.
    */
    ratio?: string;
}

/**
* Card Media is for holding a larger, attention grabbing image. Optionally, additional child content may be overlaid on the image.
 * @prop {React.ReactNode} children - Child components will be rendered on top of the provided image. Use `contentBottom` and `contentTop` to control content positioning. Accepts any valid markup. Defaults to _null_.
 * @prop {string} contentPlacement - Adjust placement of the media content. Defaults to _'bottom'_.
 * @prop {string} imageUrl - Image Url for card background image Defaults to _null_.
 * @prop {boolean} overlay - Adds an overlay over to the Card Media. Defaults to _false_.
 * @prop {string} overlayThemeColor - Overlay theme color. Defaults to _'dark'_.
 * @prop {string} ratio - Applies aspect ratio style to the card media. Defaults to _'square'_.
*/
export const CardMedia: React.FunctionComponent<CardMediaProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardOverlayProps {
    /**
    * Content to be rendered inside the Card Overlay.  Useful for angles or other non semantic elements displayed in the Card.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Overlay theme color.
    *
    * Defaults to **'dark'**.
    */
    overlayThemeColor?: string;
    /**
    * Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Card accordingly to have Card Content over the overlay.
    *
    * Defaults to **'full'**.
    */
    position?: string;
}

/**
* Card Overlay is an optional overlay that goes over the Card Banner.  You can send in children as angles or other non semantic elements displayed in the Card.
 * @prop {React.ReactNode} children - Content to be rendered inside the Card Overlay.  Useful for angles or other non semantic elements displayed in the Card. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} overlayThemeColor - Overlay theme color. Defaults to _'dark'_.
 * @prop {string} position - Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Card accordingly to have Card Content over the overlay. Defaults to _'full'_.
*/
export const CardOverlay: React.FunctionComponent<CardOverlayProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardPrimaryActionProps {
    /**
    * Content to be rendered as the primary action.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * By default a div will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * The primary interaction event for card.
    */
    onClick?: Function;
}

/**
* Card Primary Action is a wrapper component to make all of its children a clickable surface.
 * @prop {React.ReactNode} children - Content to be rendered as the primary action. Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - By default a div will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested. Defaults to _'div'_.
 *  @event onClick - The primary interaction event for card.
*/
export const CardPrimaryAction: React.FunctionComponent<CardPrimaryActionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardTitleProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Content to be displayed in the leading block container. See README for types supported. 
    *
    * Defaults to **null**.
    */
    leadingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the leading block. See README for size constraints.
    *
    * Defaults to **empty string**.
    */
    leadingBlockType?: string;
    /**
    * Content to be displayed in the Overline text of the title. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    overlineText?: React.ReactNode;
    /**
    * Where title appears in card.
    *
    * Defaults to **'top'**.
    */
    placement?: string;
    /**
    * Content to be displayed in the Primary text of the title. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    primaryText?: React.ReactNode;
    /**
    * Content to be displayed in the Secondary text of the title. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    secondaryText?: React.ReactNode;
    /**
    * Prop that makes card title stackable.
    *
    * Defaults to **false**.
    */
    stacked?: boolean;
    /**
    * Content to be displayed in the Secondary text of the title and could be used to make Card title stackable. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    stackedSecondaryText?: React.ReactNode;
    /**
    * Background color of the `CardTitle`.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Content to be displayed in the trailing block container. See README for types supported. 
    *
    * Defaults to **null**.
    */
    trailingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the trailing block. See README for size constraints.
    *
    * Defaults to **empty string**.
    */
    trailingBlockType?: string;
}

/**
* Container for headings and other larger typography, typically placed at the top of the card, but can be placed anywhere, ie, as an overlay in Card Media.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} leadingBlock - Content to be displayed in the leading block container. See README for types supported.  Defaults to _null_.
 * @prop {string} leadingBlockType - The type of media that will render in the leading block. See README for size constraints. Defaults to _empty string_.
 * @prop {React.ReactNode} overlineText - Content to be displayed in the Overline text of the title. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {string} placement - Where title appears in card. Defaults to _'top'_.
 * @prop {React.ReactNode} primaryText - Content to be displayed in the Primary text of the title. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {React.ReactNode} secondaryText - Content to be displayed in the Secondary text of the title. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {boolean} stacked - Prop that makes card title stackable. Defaults to _false_.
 * @prop {React.ReactNode} stackedSecondaryText - Content to be displayed in the Secondary text of the title and could be used to make Card title stackable. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {string} themeColor - Background color of the `CardTitle`. Defaults to _'surface'_.
 * @prop {React.ReactNode} trailingBlock - Content to be displayed in the trailing block container. See README for types supported.  Defaults to _null_.
 * @prop {string} trailingBlockType - The type of media that will render in the trailing block. See README for size constraints. Defaults to _empty string_.
*/
export const CardTitle: React.FunctionComponent<CardTitleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CheckboxProps {
    /**
    * Aligns checkbox to the right of the label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * The current state of the checkbox.
    *
    * Defaults to **null**.
    */
    checked?: boolean;
    /**
    * @deprecated _Use `label` instead._
    *
    * Alternative to `label`, if both `label` and `children` are set, `label` will take priority. Expects a string, but will accept any valid markup.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The label not be displayed, but will still be available to screen readers. This should only be used when the context of the checkbox is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action.
    *
    * Defaults to **false**.
    */
    hideLabel?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The checkbox will show an indicator if no value (true or false) is set.
    *
    * Defaults to **false**.
    */
    indeterminate?: boolean;
    /**
    * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Any additional value information to be included with the event.
    *
    * Defaults to **null**.
    */
    value?: string | number | boolean | object;
    /**
    * Fired when checkbox value is changed
    */
    onChange?: Function;
}

/**
* A checkbox allows a single value (true/false) choice for the user.
 * @prop {boolean} alignEnd - Aligns checkbox to the right of the label. Defaults to _false_.
 * @prop {boolean} checked - The current state of the checkbox. Defaults to _null_.
 * @prop {React.ReactNode} children - Deprecated: Use `label` instead. Alternative to `label`, if both `label` and `children` are set, `label` will take priority. Expects a string, but will accept any valid markup. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {boolean} hideLabel - The label not be displayed, but will still be available to screen readers. This should only be used when the context of the checkbox is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {boolean} indeterminate - The checkbox will show an indicator if no value (true or false) is set. Defaults to _false_.
 * @prop {string} label - Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers. Defaults to _null_.
 * @prop {string} themeColor - Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|number|boolean|object} value - Any additional value information to be included with the event. Defaults to _null_.
 *  @event onChange - Fired when checkbox value is changed
*/
export const Checkbox: React.FunctionComponent<CheckboxProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ChipProps {
    /**
    * Chip data to be rendered. If no `label` is passed in, `chipData` will be used. If using an object, use the `chipLabelField` to set property to be rendered as the label. You may also set `leadingIconField` and `trailingIconField`, as well as labelRenderer for additional control. 
    *
    * Defaults to **null**.
    */
    chipData: any;
    /**
    * The property on the chip that represents the id. If one is not provided material will generate an automatic ID.
    *
    * Defaults to **empty string**.
    */
    chipIdField?: string;
    /**
    * The property on the chip that is the label. The default slot overrides the rendering of the label.
    *
    * Defaults to **empty string**.
    */
    chipLabelField: string;
    /**
    * Prevent the user from interacting with the chip.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Custom id.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * If the chip is selected on mount.
    *
    * Defaults to **null**.
    */
    initiallySelected: boolean;
    /**
    * Allows chip to be dynamically added and removed upon trailing icon interaction.
    *
    * Defaults to **null**.
    */
    input: boolean;
    /**
    * The label to be rendered on each chip. Optionally `chipData` and `chipLabelField` may be used instead of `label`.
    *
    * Defaults to **null**.
    */
    label?: React.ReactNode;
    /**
    * Returns the label to be rendered on each chip. Receives the chipData.
    *
    * Defaults to **null**.
    */
    labelRenderer?: React.ReactNode | Function;
    /**
    * Slot for leading icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no leading icon, a material icon rendering the `leadingIconPropName` of each chip is used.
    *
    * Defaults to **null**.
    */
    leadingIcon?: Function;
    /**
    * Leading icon property name for the chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **empty string**.
    */
    leadingIconField: string;
    /**
    * The type`filter` enables selection of multiple chips and will add a check mark to selected chips. The type`choice` allows only one selected chip.
    *
    * Defaults to **'default'**.
    */
    selectionType?: string;
    /**
    * Slot for trailing icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no trailing icon, a material icon rendering the `trailingIconPropName` of each chip is used.
    *
    * Defaults to **null**.
    */
    trailingIcon?: Function;
    /**
    * Trailing icon property name for the chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **empty string**.
    */
    trailingIconField: string;
    /**
    * Applies the selected style.
    *
    * Defaults to **'filled'**.
    */
    variant: string;
    /**
    * Called when chip is clicked.
    */
    onClick?: Function;
    /**
    * Fired when the chip is destroyed.
    */
    onDestroy?: Function;
    /**
    * Called when Enter is pressed.
    */
    onEnter?: Function;
    /**
    * Fired when the chip is mounted.
    */
    onMounted?: Function;
}

/**
* Chips are used to represent small blocks of information that the user has entered or selected. They can be one of the types Choice, Filter, or Input.
 * @prop {any} chipData - Chip data to be rendered. If no `label` is passed in, `chipData` will be used. If using an object, use the `chipLabelField` to set property to be rendered as the label. You may also set `leadingIconField` and `trailingIconField`, as well as labelRenderer for additional control.  Defaults to _null_.
 * @prop {string} chipIdField - The property on the chip that represents the id. If one is not provided material will generate an automatic ID. Defaults to _empty string_.
 * @prop {string} chipLabelField - The property on the chip that is the label. The default slot overrides the rendering of the label. Defaults to _empty string_.
 * @prop {boolean} disabled - Prevent the user from interacting with the chip. Defaults to _false_.
 * @prop {string} id - Custom id. Defaults to _undefined_.
 * @prop {boolean} initiallySelected - If the chip is selected on mount. Defaults to _null_.
 * @prop {boolean} input - Allows chip to be dynamically added and removed upon trailing icon interaction. Defaults to _null_.
 * @prop {React.ReactNode} label - The label to be rendered on each chip. Optionally `chipData` and `chipLabelField` may be used instead of `label`. Defaults to _null_.
 * @prop {React.ReactNode|function} labelRenderer - Returns the label to be rendered on each chip. Receives the chipData. Defaults to _null_.
 * @prop {Function} leadingIcon - Slot for leading icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no leading icon, a material icon rendering the `leadingIconPropName` of each chip is used. Defaults to _null_.
 * @prop {string} leadingIconField - Leading icon property name for the chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _empty string_.
 * @prop {string} selectionType - The type`filter` enables selection of multiple chips and will add a check mark to selected chips. The type`choice` allows only one selected chip. Defaults to _'default'_.
 * @prop {Function} trailingIcon - Slot for trailing icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no trailing icon, a material icon rendering the `trailingIconPropName` of each chip is used. Defaults to _null_.
 * @prop {string} trailingIconField - Trailing icon property name for the chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _empty string_.
 * @prop {string} variant - Applies the selected style. Defaults to _'filled'_.
 *  @event onClick - Called when chip is clicked.
 *  @event onDestroy - Fired when the chip is destroyed.
 *  @event onEnter - Called when Enter is pressed.
 *  @event onMounted - Fired when the chip is mounted.
*/
export const Chip: React.FunctionComponent<ChipProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ChipsProps {
    /**
    * The property on each chip  that represents the id. If one is not provided material will generate an automatic ID.
    *
    * Defaults to **empty string**.
    */
    chipIdField?: string;
    /**
    * The property on each chip that is used as a unique key.
    *
    * Defaults to **'id'**.
    */
    chipKeyField?: string;
    /**
    * The property for the label on each chip. The `labelRenderer` overrides the rendering of the label field
    *
    * Defaults to **'label'**.
    */
    chipLabelField?: string;
    /**
    * Array of chips to manager and render.
    *
    * Defaults to **[]**.
    */
    chips: Array<object>;
    /**
    * Prevent the user from interacting with the chips.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Allows chips to be dynamically added and removed upon trailing icon interaction.
    *
    * Defaults to **false**.
    */
    input?: boolean;
    /**
    * Returns the label to be rendered on each chip. Receives the chipData.
    *
    * Defaults to **null**.
    */
    labelRenderer?: React.ReactNode | Function;
    /**
    * Leading icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `leadingIconField` of each chip is used
    *
    * Defaults to **null**.
    */
    leadingIcon?: Function;
    /**
    * Leading icon property name for each chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **'leadingIcon'**.
    */
    leadingIconField?: string;
    /**
    * Prevents choice chips from being deselected upon interaction.
    *
    * Defaults to **false**.
    */
    preventChoiceDeselection?: boolean;
    /**
    * Chips do not break on a newline. The user must scroll horizontally if there is any overflow.
    *
    * Defaults to **false**.
    */
    scrollable?: boolean;
    /**
    * Array of currently selected chips.
    *
    * Defaults to **[]**.
    */
    selectedChips?: Array<object>;
    /**
    * Filter enables selection of multiple chips and will add a check mark to selected chips. Choice allows only one selected chip.
    *
    * Defaults to **'default'**.
    */
    selectionType?: string;
    /**
    * Trailing icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `trailingIconField` of each chip is used
    *
    * Defaults to **null**.
    */
    trailingIcon?: Function;
    /**
    * Trailing icon property name for each chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **'trailingIcon'**.
    */
    trailingIconField?: string;
    /**
    * Shows chips as `filled` or `outlined`.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when the chip is interacted with (via click/tap or Enter key).
    */
    onInteraction?: Function;
    /**
    * Fired when a chip is removed.
    */
    onRemoval?: Function;
    /**
    * Fired when the chips are removed (*input chips* only).
    */
    onUpdateChips?: Function;
    /**
    * Fired when the selected chips are updated (choice and filter chips only).
    */
    onUpdateSelectedChips?: Function;
}

/**
* Chips are used to represent small blocks of information that the user has entered or selected. They can be one of the types Choice, Filter, or Input
 * @prop {string} chipIdField - The property on each chip  that represents the id. If one is not provided material will generate an automatic ID. Defaults to _empty string_.
 * @prop {string} chipKeyField - The property on each chip that is used as a unique key. Defaults to _'id'_.
 * @prop {string} chipLabelField - The property for the label on each chip. The `labelRenderer` overrides the rendering of the label field Defaults to _'label'_.
 * @prop {[]} chips - Array of chips to manager and render. Defaults to _[]_.
 * @prop {boolean} disabled - Prevent the user from interacting with the chips. Defaults to _false_.
 * @prop {boolean} input - Allows chips to be dynamically added and removed upon trailing icon interaction. Defaults to _false_.
 * @prop {React.ReactNode|function} labelRenderer - Returns the label to be rendered on each chip. Receives the chipData. Defaults to _null_.
 * @prop {Function} leadingIcon - Leading icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `leadingIconField` of each chip is used Defaults to _null_.
 * @prop {string} leadingIconField - Leading icon property name for each chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _'leadingIcon'_.
 * @prop {boolean} preventChoiceDeselection - Prevents choice chips from being deselected upon interaction. Defaults to _false_.
 * @prop {boolean} scrollable - Chips do not break on a newline. The user must scroll horizontally if there is any overflow. Defaults to _false_.
 * @prop {[]} selectedChips - Array of currently selected chips. Defaults to _[]_.
 * @prop {string} selectionType - Filter enables selection of multiple chips and will add a check mark to selected chips. Choice allows only one selected chip. Defaults to _'default'_.
 * @prop {Function} trailingIcon - Trailing icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `trailingIconField` of each chip is used Defaults to _null_.
 * @prop {string} trailingIconField - Trailing icon property name for each chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _'trailingIcon'_.
 * @prop {string} variant - Shows chips as `filled` or `outlined`. Defaults to _'filled'_.
 *  @event onInteraction - Fired when the chip is interacted with (via click/tap or Enter key).
 *  @event onRemoval - Fired when a chip is removed.
 *  @event onUpdateChips - Fired when the chips are removed (*input chips* only).
 *  @event onUpdateSelectedChips - Fired when the selected chips are updated (choice and filter chips only).
*/
export const Chips: React.FunctionComponent<ChipsProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CircularProgressProps {
    /**
    * Accessibility label.
    *
    * Defaults to **'Progress Indicator'**.
    */
    ariaLabel?: string;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The size of the progress indicator.
    *
    * Defaults to **'lg'**.
    */
    indicatorSize?: string;
    /**
    * Sets the visibility of the progress indicator.
    *
    * Defaults to **true**.
    */
    open?: boolean;
    /**
    * The current progress of a determinate progress indicator. Must be between 0 and 1.
    *
    * Defaults to **0**.
    */
    progress?: number;
    /**
    * @deprecated _Renamed, see indicatorSize instead._
    *
    * The size of the progress indicator.
    *
    * Defaults to **undefined**.
    */
    size?: string;
    /**
    * Color of the indicator stroke with 'primary' or 'secondary' theme color.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * An indeterminate CircularProgress indicator will continue spinning until closed. A determinate CircularProgress indicator will display the current progress.
    *
    * Defaults to **'indeterminate'**.
    */
    variant?: string;
}

/**
* Circular progress displays a specified or unspecified wait time as an animated ring.
 * @prop {string} ariaLabel - Accessibility label. Defaults to _'Progress Indicator'_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} indicatorSize - The size of the progress indicator. Defaults to _'lg'_.
 * @prop {boolean} open - Sets the visibility of the progress indicator. Defaults to _true_.
 * @prop {number} progress - The current progress of a determinate progress indicator. Must be between 0 and 1. Defaults to _0_.
 * @prop {string} size - Deprecated: Renamed, see indicatorSize instead. The size of the progress indicator. Defaults to _undefined_.
 * @prop {string} themeColor - Color of the indicator stroke with 'primary' or 'secondary' theme color. Defaults to _'primary'_.
 * @prop {string} variant - An indeterminate CircularProgress indicator will continue spinning until closed. A determinate CircularProgress indicator will display the current progress. Defaults to _'indeterminate'_.
*/
export const CircularProgress: React.FunctionComponent<CircularProgressProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CommonProps {
}

/**
* Collection of utilities and components that are shared throughout the Element React Components.
*/
export const Common: React.FunctionComponent<CommonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CalendarProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * A function for formatting the individual days of the calendar. It takes the date being rendered and returns content.
    *
    * Defaults to **day => day.date**.
    */
    dayCellTemplate?: Function;
    /**
    * Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month. An alternative to disabled dates.
    *
    * Defaults to **false**.
    */
    disableChangeMonth?: boolean;
    /**
    * Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current year. An alternative to disabled dates.
    *
    * Defaults to **false**.
    */
    disableChangeYear?: boolean;
    /**
    * One or more date ranges that are not selectable. Must be in the format: `{ranges: [{ from, to }]}` where from/to are valid javascript date objects.
    *
    * Defaults to **undefined**.
    */
    disabledDates?: object;
    /**
    * Make the calendar float using absolute positioning.
    *
    * Defaults to **true**.
    */
    floating?: boolean;
    /**
    * To show the full month name.
    *
    * Defaults to **true**.
    */
    fullMonthName?: boolean;
    /**
    * Content to appear immediately after the header.
    *
    * Defaults to **undefined**.
    */
    headerContent?: React.ReactNode;
    /**
    * An object describing pre-highlighted dates of the currently visible month. The object can include the following fields: `includeDisabled` = include dates that are outside of the current month in the highlighting. `dates` = an array of valid date objects to highlight, most useful for scattered highlighted dates. `from` and `to` = a valid start and end date range to highlight, most useful for a contiguous block of highlighted dates.
    *
    * Defaults to **undefined**.
    */
    highlightedDates?: object;
    /**
    * Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-Element) component with a parent that has `overflow: hidden`.
    *
    * Defaults to **undefined**.
    */
    hoisted?: boolean;
    /**
    * The current language is right-to-left.
    *
    * Defaults to **false**.
    */
    isRtl?: boolean;
    /**
    * Content to appear before the header.
    *
    * Defaults to **undefined**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`.
    *
    * Defaults to **enUS**.
    */
    locale?: object;
    /**
    * The maximum date selectable. Dates later than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    maxDate?: Date;
    /**
    * Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10.
    *
    * Defaults to **undefined**.
    */
    maxQuickSelectYear?: number;
    /**
    * The minimum date selectable. Dates earlier than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    minDate?: Date;
    /**
    * Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10.
    *
    * Defaults to **undefined**.
    */
    minQuickSelectYear?: number;
    /**
    * Overrides the first day of the week to start on Monday.
    *
    * Defaults to **false**.
    */
    mondayFirst?: boolean;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * The currently selected date.
    *
    * Defaults to **undefined**.
    */
    selectedDate?: Date;
    /**
    * Content to appear to the side of the calendar. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar.
    *
    * Defaults to **undefined**.
    */
    sideContent?: object | string | Function;
    /**
    * Content to appear after the header.
    *
    * Defaults to **undefined**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Use UTC for time calculations.
    *
    * Defaults to **false**.
    */
    useUtc?: boolean;
    /**
    * The date currently displayed on the calendar.
    *
    * Defaults to **new Date()**.
    */
    visibleDate?: Date;
    /**
    * @deprecated _Renamed for consistency. See `visibleDate` instead._
    *
    * The date of the month and year currently displayed on the calendar.
    *
    * Defaults to **undefined**.
    */
    visibleMonthYear?: Date;
    /**
    * Fired when the user selects a date.
    */
    onSelectDate?: Function;
    /**
    * Fired when a disabled date is selected.
    */
    onSelectDisabled?: Function;
    /**
    * Fired when the user selects a month.
    */
    onSelectMonth?: Function;
}

/**
* The calendar popup for Datepicker.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {function} dayCellTemplate - A function for formatting the individual days of the calendar. It takes the date being rendered and returns content. Defaults to _day => day.date_.
 * @prop {boolean} disableChangeMonth - Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month. An alternative to disabled dates. Defaults to _false_.
 * @prop {boolean} disableChangeYear - Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current year. An alternative to disabled dates. Defaults to _false_.
 * @prop {Object} disabledDates - One or more date ranges that are not selectable. Must be in the format: `{ranges: [{ from, to }]}` where from/to are valid javascript date objects. Defaults to _undefined_.
 * @prop {boolean} floating - Make the calendar float using absolute positioning. Defaults to _true_.
 * @prop {boolean} fullMonthName - To show the full month name. Defaults to _true_.
 * @prop {React.ReactNode} headerContent - Content to appear immediately after the header. Defaults to _undefined_.
 * @prop {Object} highlightedDates - An object describing pre-highlighted dates of the currently visible month. The object can include the following fields: `includeDisabled` = include dates that are outside of the current month in the highlighting. `dates` = an array of valid date objects to highlight, most useful for scattered highlighted dates. `from` and `to` = a valid start and end date range to highlight, most useful for a contiguous block of highlighted dates. Defaults to _undefined_.
 * @prop {boolean} hoisted - Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-Element) component with a parent that has `overflow: hidden`. Defaults to _undefined_.
 * @prop {boolean} isRtl - The current language is right-to-left. Defaults to _false_.
 * @prop {React.ReactNode} leadingContent - Content to appear before the header. Defaults to _undefined_.
 * @prop {object} locale - Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`. Defaults to _enUS_.
 * @prop {Date} maxDate - The maximum date selectable. Dates later than this will be disabled. Defaults to _undefined_.
 * @prop {number} maxQuickSelectYear - Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10. Defaults to _undefined_.
 * @prop {Date} minDate - The minimum date selectable. Dates earlier than this will be disabled. Defaults to _undefined_.
 * @prop {number} minQuickSelectYear - Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10. Defaults to _undefined_.
 * @prop {boolean} mondayFirst - Overrides the first day of the week to start on Monday. Defaults to _false_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {date} selectedDate - The currently selected date. Defaults to _undefined_.
 * @prop {object|string|function} sideContent - Content to appear to the side of the calendar. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar. Defaults to _undefined_.
 * @prop {React.ReactNode} trailingContent - Content to appear after the header. Defaults to _undefined_.
 * @prop {boolean} useUtc - Use UTC for time calculations. Defaults to _false_.
 * @prop {date} visibleDate - The date currently displayed on the calendar. Defaults to _new Date()_.
 * @prop {date} visibleMonthYear - Deprecated: Renamed for consistency. See `visibleDate` instead. The date of the month and year currently displayed on the calendar. Defaults to _undefined_.
 *  @event onSelectDate - Fired when the user selects a date.
 *  @event onSelectDisabled - Fired when a disabled date is selected.
 *  @event onSelectMonth - Fired when the user selects a month.
*/
export const Calendar: React.FunctionComponent<CalendarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DateInputProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the datePicker from being cleared.
    *
    * Defaults to **false**.
    */
    disableClearing?: boolean;
    /**
    * If true, disable datePicker on screen.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Date formatting string or function. For string formatting, valid placeholders include: `D` = day name. `dd` = day of month as 2 digits (leading zero). `d` = day of the month. `MMMM` = month name. `MMM` = abbreviated month name. `MM` month number as 2 digits (leading zero). `M` number of the month. `su` = day of month with ordinal suffix (1st, 2nd, 3rd, 10th). `yyyy` 4 digit year. `yy` 2 digit year. A function may also be used. It will receive the date as the only parameter and must return a valid string.
    *
    * Defaults to **'dd MMM yyyy'**.
    */
    format?: string | Function;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The input label.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`.
    *
    * Defaults to **enUS**.
    */
    locale?: object;
    /**
    * Placeholder text for the input.
    *
    * Defaults to **null**.
    */
    placeholder?: string;
    /**
    * If true, the use will not be allowed to type the date and must select it from the calendar.
    *
    * Defaults to **false**.
    */
    readOnly?: boolean;
    /**
    * Sets html required attribute on input
    *
    * Defaults to **false**.
    */
    required?: boolean;
    /**
    * The currently selected date.
    *
    * Defaults to **undefined**.
    */
    selectedDate?: Date;
    /**
    * Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props.
    *
    * Defaults to **null**.
    */
    textfieldProps?: object;
    /**
    * The value typed into the date input. Note: state management for this field has been elevated outside of date input for the time being.
    *
    * Defaults to **empty string**.
    */
    typedDate?: string;
    /**
    * Use UTC for time calculations.
    *
    * Defaults to **false**.
    */
    useUtc?: boolean;
    /**
    * Applies the selected style to the internal textfield.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when character is entered into text field and on select.
    */
    onChange?: Function;
    /**
    * Fired when input is cleared with the 'x' button.
    */
    onClear?: Function;
    /**
    * Fired when calendar is closed.
    */
    onClose?: Function;
    /**
    * Fired when calendar is opened.
    */
    onOpen?: Function;
    /**
    * Fired when date is selected.
    */
    onSelect?: Function;
    /**
    * Fired when disabled date is clicked
    */
    onSelectDisable?: Function;
    /**
    * Fired when month is selected
    */
    onSelectMonth?: Function;
    /**
    * Fired when calendar is opened.
    */
    onShowCalendar?: Function;
    /**
    * Fired when user types a date.
    */
    onTypedDate?: Function;
}

/**
* The input sub-component of Datepicker.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disableClearing - Prevent the datePicker from being cleared. Defaults to _false_.
 * @prop {boolean} disabled - If true, disable datePicker on screen. Defaults to _false_.
 * @prop {string|function} format - Date formatting string or function. For string formatting, valid placeholders include: `D` = day name. `dd` = day of month as 2 digits (leading zero). `d` = day of the month. `MMMM` = month name. `MMM` = abbreviated month name. `MM` month number as 2 digits (leading zero). `M` number of the month. `su` = day of month with ordinal suffix (1st, 2nd, 3rd, 10th). `yyyy` 4 digit year. `yy` 2 digit year. A function may also be used. It will receive the date as the only parameter and must return a valid string. Defaults to _'dd MMM yyyy'_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} label - The input label. Defaults to _null_.
 * @prop {object} locale - Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`. Defaults to _enUS_.
 * @prop {string} placeholder - Placeholder text for the input. Defaults to _null_.
 * @prop {boolean} readOnly - If true, the use will not be allowed to type the date and must select it from the calendar. Defaults to _false_.
 * @prop {boolean} required - Sets html required attribute on input Defaults to _false_.
 * @prop {date} selectedDate - The currently selected date. Defaults to _undefined_.
 * @prop {object} textfieldProps - Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props. Defaults to _null_.
 * @prop {string} typedDate - The value typed into the date input. Note: state management for this field has been elevated outside of date input for the time being. Defaults to _empty string_.
 * @prop {boolean} useUtc - Use UTC for time calculations. Defaults to _false_.
 * @prop {string} variant - Applies the selected style to the internal textfield. Defaults to _'filled'_.
 *  @event onChange - Fired when character is entered into text field and on select.
 *  @event onClear - Fired when input is cleared with the 'x' button.
 *  @event onClose - Fired when calendar is closed.
 *  @event onOpen - Fired when calendar is opened.
 *  @event onSelect - Fired when date is selected.
 *  @event onSelectDisable - Fired when disabled date is clicked
 *  @event onSelectMonth - Fired when month is selected
 *  @event onShowCalendar - Fired when calendar is opened.
 *  @event onTypedDate - Fired when user types a date.
*/
export const DateInput: React.FunctionComponent<DateInputProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DatepickerProps {
    /**
    * Keep the calendar visible at all times.
    *
    * Defaults to **false**.
    */
    alwaysOpen?: boolean;
    /**
    * @deprecated _Use `leadingContent` instead._
    *
    * Content to appear before the header.
    *
    * Defaults to **undefined**.
    */
    beforeCalendarHeader?: React.ReactNode;
    /**
    * Custom props to be passed to the calendar.
    *
    * Defaults to **undefined**.
    */
    calendarProps?: object;
    /**
    * When typing a date, this will determine 2-digit year parsing behavior. A value of `forward-only` will always use current century, so `02/08/02` will parse to `02/08/2002`. A value of `age`, on the other hand is meant to assist age entry. It will use the current century until a certain point (see `centurySlidingOffset`), and then will revert to the previous century. For example `05/25/01` will parse to `05/25/2001`, while `02/08/76` will parse to `02/08/1976`.
    *
    * Defaults to **'age'**.
    */
    centuryBehavior?: string;
    /**
    * Only used when `centuryBehavior` is set to `age`. This will adjust the cutoff point where 2 digit dates will revert to the previous century to aid in typed age entry. The formula for the cutoff is `last 2 digits of the result of current year minus centuryCutoffOffset`. For example, using the year 2022 and the default value of 76 we would have `lastTwoDigits(2022 - 76) = 46`. So any 2 digit year of `45` or less will become `20XX` and any 2 digit year of `46` or more will become `19XX`. A value of `0` will disable the behavior, regardless of `centuryBehavior`. In 2023, the cutoff will be `47`, and so forth.
    *
    * Defaults to **76**.
    */
    centurySlidingOffset?: number;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * A function for formatting the individual days of the calendar. It takes the date being rendered and returns content.
    *
    * Defaults to **day => day.date**.
    */
    dayCellTemplate?: Function;
    /**
    * Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month.
    *
    * Defaults to **false**.
    */
    disableChangeMonth?: boolean;
    /**
    * Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current month.
    *
    * Defaults to **false**.
    */
    disableChangeYear?: boolean;
    /**
    * Prevent the datePicker from being cleared. It is suggested to use `readOnly` in conjunction with `disableClearing`.
    *
    * Defaults to **false**.
    */
    disableClearing?: boolean;
    /**
    * If true, disable datePicker completely.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * An object describing dates to be disabled and non-interactive. The schema includes the following: `{ dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time.
    *
    * Defaults to **undefined**.
    */
    disabledDates?: object;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply filled style to the date picker input. Previously called primary.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Date formatting string or function. For format strings we use `date-fns.format()`. See https://date-fns.org/v2.23.0/docs/format for more details.
    *
    * Defaults to **'dd MMM yyyy'**.
    */
    format?: string | Function;
    /**
    * Display the full month name in the calendar interface. Note, this does not effect the date format.
    *
    * Defaults to **true**.
    */
    fullMonthName?: boolean;
    /**
    * Content to appear immediately after the `Calendar` header.
    *
    * Defaults to **undefined**.
    */
    headerContent?: React.ReactNode;
    /**
    * An object describing dates to be highlighted. The schema includes the following: `{ includeDisabled, dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time.
    *
    * Defaults to **undefined**.
    */
    highlightedDates?: object;
    /**
    * Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-element) components with a parent that has `overflow: hidden`.
    *
    * Defaults to **undefined**.
    */
    hoisted?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The timezone that the input date is provided in (see `value`). If `outputTimeZone` is not set, the date will be returned as UTC. Supports international timezones. See https://www.iana.org/time-zones.
    *
    * Defaults to **undefined**.
    */
    inputTimeZone?: string;
    /**
    * The input label.
    *
    * Defaults to **undefined**.
    */
    label?: string;
    /**
    * Content to appear before the `Calendar` header.
    *
    * Defaults to **undefined**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`.
    *
    * Defaults to **enUS**.
    */
    locale?: object;
    /**
    * The maximum date selectable. Dates later than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    maxDate?: Date;
    /**
    * The maximum year that will be visible in the year select dropdown. Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10.
    *
    * Defaults to **undefined**.
    */
    maxQuickSelectYear?: number;
    /**
    * The minimum date selectable. Dates earlier than this will be disabled.
    *
    * Defaults to **undefined**.
    */
    minDate?: Date;
    /**
    * The minimum year visible in the year select dropdown. Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10.
    *
    * Defaults to **undefined**.
    */
    minQuickSelectYear?: number;
    /**
    * Overrides the first day of the week to start on Monday.
    *
    * Defaults to **false**.
    */
    mondayFirst?: boolean;
    /**
    * If set, open on that date. Must be either a valid date object or a string that can be parsed by the date constructor.
    *
    * Defaults to **undefined**.
    */
    openDate?: Date;
    /**
    * @deprecated _Replaced by `variant='outlined'`_
    *
    * Apply outlined style to the date picker input. Previously called secondary.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * The timezone the date will be converted to and formatted as when using `useUtc`. If `inputTimeZone` is not set, the date is assumed to already be in UTC time. Supports international timezones. See https://www.iana.org/time-zones.
    *
    * Defaults to **undefined**.
    */
    outputTimeZone?: string;
    /**
    * One or more acceptable formats for typed input. The default value 'P' will accept a short locale formatted date. See https://date-fns.org/v2.28.0/docs/parse for parsing options. Note, the value of the `format` prop will automatically be accepted.
    *
    * Defaults to **["P"]**.
    */
    parseFormats?: Array<string>;
    /**
    * Placeholder text for the input.
    *
    * Defaults to **undefined**.
    */
    placeholder?: string;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * @deprecated _Replaced by `variant='outlined'`_
    *
    * Applies a filled style.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * User will not be allowed to type the date and must select it from the calendar.
    *
    * Defaults to **false**.
    */
    readOnly?: boolean;
    /**
    * Sets html required attribute on input
    *
    * Defaults to **false**.
    */
    required?: boolean;
    /**
    * This will reset the `Calendar` view to the selected date (or today's date when no date has been selected). By default the calendar will remember the last visible date shown until the page is refreshed.
    *
    * Defaults to **false**.
    */
    resetCalendarOnClose?: boolean;
    /**
    * @deprecated _Replaced by `variant='outlined'`_
    *
    * Applies outlined style.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * Content to appear to the side of the `Calendar`. Can be used to display details for a selected date. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar.
    *
    * Defaults to **undefined**.
    */
    sideContent?: object | string | Function;
    /**
    * Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props.
    *
    * Defaults to **undefined**.
    */
    textfieldProps?: object;
    /**
    * Content to appear after the `Calendar`.
    *
    * Defaults to **undefined**.
    */
    trailingContent?: React.ReactNode;
    /**
    * @deprecated _Please use `readOnly` instead._
    *
    * The user will not be allowed to type the date and must select it from the calendar.
    *
    * Defaults to **undefined**.
    */
    typeable?: boolean;
    /**
    * Use UTC for time calculations.
    *
    * Defaults to **false**.
    */
    useUtc?: boolean;
    /**
    * Current value of the datePicker.
    *
    * Defaults to **undefined**.
    */
    value?: Date;
    /**
    * Applies the selected style to the internal textfield.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when character is entered into text field and on select.
    */
    onChange?: Function;
    /**
    * Fired when input is cleared with the 'x' button.
    */
    onClear?: Function;
    /**
    * Fired when calendar is closed.
    */
    onClose?: Function;
    /**
    * Fired when calendar is opened.
    */
    onOpen?: Function;
    /**
    * Fired when date is selected.
    */
    onSelect?: Function;
    /**
    * Fired when disabled date is clicked
    */
    onSelectDisable?: Function;
    /**
    * Fired when disabled date is clicked
    */
    onSelectDisabled?: Function;
    /**
    * Fired when month is selected
    */
    onSelectMonth?: Function;
    /**
    * Fired when year is selected
    */
    onSelectYear?: Function;
}

/**
* Datepicker provides a way for users to select a specific date or range of dates from a dialog or dropdown.
 * @prop {boolean} alwaysOpen - Keep the calendar visible at all times. Defaults to _false_.
 * @prop {React.ReactNode} beforeCalendarHeader - Deprecated: Use `leadingContent` instead. Content to appear before the header. Defaults to _undefined_.
 * @prop {object} calendarProps - Custom props to be passed to the calendar. Defaults to _undefined_.
 * @prop {string} centuryBehavior - When typing a date, this will determine 2-digit year parsing behavior. A value of `forward-only` will always use current century, so `02/08/02` will parse to `02/08/2002`. A value of `age`, on the other hand is meant to assist age entry. It will use the current century until a certain point (see `centurySlidingOffset`), and then will revert to the previous century. For example `05/25/01` will parse to `05/25/2001`, while `02/08/76` will parse to `02/08/1976`. Defaults to _'age'_.
 * @prop {number} centurySlidingOffset - Only used when `centuryBehavior` is set to `age`. This will adjust the cutoff point where 2 digit dates will revert to the previous century to aid in typed age entry. The formula for the cutoff is `last 2 digits of the result of current year minus centuryCutoffOffset`. For example, using the year 2022 and the default value of 76 we would have `lastTwoDigits(2022 - 76) = 46`. So any 2 digit year of `45` or less will become `20XX` and any 2 digit year of `46` or more will become `19XX`. A value of `0` will disable the behavior, regardless of `centuryBehavior`. In 2023, the cutoff will be `47`, and so forth. Defaults to _76_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {function} dayCellTemplate - A function for formatting the individual days of the calendar. It takes the date being rendered and returns content. Defaults to _day => day.date_.
 * @prop {boolean} disableChangeMonth - Prevents the user from changing the month. Often used in conjunction with `disableChangeYear` to allow the user to only choose a date within the current month. Defaults to _false_.
 * @prop {boolean} disableChangeYear - Prevents the user from changing the year. Often used in conjunction with `disableChangeMonth` to allow the user to only choose a date within the current month. Defaults to _false_.
 * @prop {boolean} disableClearing - Prevent the datePicker from being cleared. It is suggested to use `readOnly` in conjunction with `disableClearing`. Defaults to _false_.
 * @prop {boolean} disabled - If true, disable datePicker completely. Defaults to _false_.
 * @prop {Object} disabledDates - An object describing dates to be disabled and non-interactive. The schema includes the following: `{ dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time. Defaults to _undefined_.
 * @prop {boolean} filled - Deprecated: Use `variant='filled'` instead. Apply filled style to the date picker input. Previously called primary. Defaults to _undefined_.
 * @prop {string|function} format - Date formatting string or function. For format strings we use `date-fns.format()`. See https://date-fns.org/v2.23.0/docs/format for more details. Defaults to _'dd MMM yyyy'_.
 * @prop {boolean} fullMonthName - Display the full month name in the calendar interface. Note, this does not effect the date format. Defaults to _true_.
 * @prop {React.ReactNode} headerContent - Content to appear immediately after the `Calendar` header. Defaults to _undefined_.
 * @prop {Object} highlightedDates - An object describing dates to be highlighted. The schema includes the following: `{ includeDisabled, dates, days, daysOfMonth, from, to, ranges, customPredictor }`. Please see README for full schema description and examples. Note: All dates are _inclusive_ and date comparisons ignore time. Defaults to _undefined_.
 * @prop {boolean} hoisted - Controls if the component is rendered outside of the parent element (aka hoisted). This is now managed automatically and no longer needs to be explicitly set unless using a custom (non-element) components with a parent that has `overflow: hidden`. Defaults to _undefined_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} inputTimeZone - The timezone that the input date is provided in (see `value`). If `outputTimeZone` is not set, the date will be returned as UTC. Supports international timezones. See https://www.iana.org/time-zones. Defaults to _undefined_.
 * @prop {string} label - The input label. Defaults to _undefined_.
 * @prop {React.ReactNode} leadingContent - Content to appear before the `Calendar` header. Defaults to _undefined_.
 * @prop {object} locale - Language support object in the `i18n` format. A number of pre-built languages can be imported from the npm package `date-fns`. Defaults to _enUS_.
 * @prop {Date} maxDate - The maximum date selectable. Dates later than this will be disabled. Defaults to _undefined_.
 * @prop {number} maxQuickSelectYear - The maximum year that will be visible in the year select dropdown. Note, This *does not* disable dates later than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year + 10. Defaults to _undefined_.
 * @prop {Date} minDate - The minimum date selectable. Dates earlier than this will be disabled. Defaults to _undefined_.
 * @prop {number} minQuickSelectYear - The minimum year visible in the year select dropdown. Note, This *does not* disable dates earlier than this from being able to be selected (see `minDate`), it only affects what years are visible in the Select. Defaults to current year - 10. Defaults to _undefined_.
 * @prop {boolean} mondayFirst - Overrides the first day of the week to start on Monday. Defaults to _false_.
 * @prop {date} openDate - If set, open on that date. Must be either a valid date object or a string that can be parsed by the date constructor. Defaults to _undefined_.
 * @prop {boolean} outlined - Deprecated: Replaced by `variant='outlined'` Apply outlined style to the date picker input. Previously called secondary. Defaults to _undefined_.
 * @prop {string} outputTimeZone - The timezone the date will be converted to and formatted as when using `useUtc`. If `inputTimeZone` is not set, the date is assumed to already be in UTC time. Supports international timezones. See https://www.iana.org/time-zones. Defaults to _undefined_.
 * @prop {[string]} parseFormats - One or more acceptable formats for typed input. The default value 'P' will accept a short locale formatted date. See https://date-fns.org/v2.28.0/docs/parse for parsing options. Note, the value of the `format` prop will automatically be accepted. Defaults to _["P"]_.
 * @prop {string} placeholder - Placeholder text for the input. Defaults to _undefined_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {boolean} primary - Deprecated: Replaced by `variant='outlined'` Applies a filled style. Defaults to _undefined_.
 * @prop {boolean} readOnly - User will not be allowed to type the date and must select it from the calendar. Defaults to _false_.
 * @prop {boolean} required - Sets html required attribute on input Defaults to _false_.
 * @prop {boolean} resetCalendarOnClose - This will reset the `Calendar` view to the selected date (or today's date when no date has been selected). By default the calendar will remember the last visible date shown until the page is refreshed. Defaults to _false_.
 * @prop {boolean} secondary - Deprecated: Replaced by `variant='outlined'` Applies outlined style. Defaults to _undefined_.
 * @prop {object|string|function} sideContent - Content to appear to the side of the `Calendar`. Can be used to display details for a selected date. Normally will appear to the right of the calendar, except when `rtl` is true, where it will appear to the left of the calendar. Defaults to _undefined_.
 * @prop {object} textfieldProps - Props to be passed to the `Textfield` component. Accepts any valid `Textfield` props. Defaults to _undefined_.
 * @prop {React.ReactNode} trailingContent - Content to appear after the `Calendar`. Defaults to _undefined_.
 * @prop {boolean} typeable - Deprecated: Please use `readOnly` instead. The user will not be allowed to type the date and must select it from the calendar. Defaults to _undefined_.
 * @prop {boolean} useUtc - Use UTC for time calculations. Defaults to _false_.
 * @prop {date} value - Current value of the datePicker. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected style to the internal textfield. Defaults to _'filled'_.
 *  @event onChange - Fired when character is entered into text field and on select.
 *  @event onClear - Fired when input is cleared with the 'x' button.
 *  @event onClose - Fired when calendar is closed.
 *  @event onOpen - Fired when calendar is opened.
 *  @event onSelect - Fired when date is selected.
 *  @event onSelectDisable - Fired when disabled date is clicked
 *  @event onSelectDisabled - Fired when disabled date is clicked
 *  @event onSelectMonth - Fired when month is selected
 *  @event onSelectYear - Fired when year is selected
*/
export const Datepicker: React.FunctionComponent<DatepickerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DialogProps {
    /**
    * Button for the approving action of the dialog. When pressed, the dialog will close.
    *
    * Defaults to **null**.
    */
    acceptButton?: React.ReactNode;
    /**
    * slot/element for adding action buttons
    *
    * Defaults to **null**.
    */
    actions?: React.ReactNode;
    /**
    * Button for the cancel/close action of the dialog. When pressed, the dialog will close.
    *
    * Defaults to **null**.
    */
    cancelButton?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Primary content of the dialog. Optional, children may be used instead.
    *
    * Defaults to **null**.
    */
    content?: React.ReactNode;
    /**
    * Custom id for the content container. If one is not specified a random id will be generated.
    *
    * Defaults to **empty string**.
    */
    contentId?: string;
    /**
    * Title information displayed at the top of the dialog.
    *
    * Defaults to **null**.
    */
    header?: React.ReactNode;
    /**
    * Custom id for the header container. If one is not specified a random id will be generated.
    *
    * Defaults to **empty string**.
    */
    headerId?: string;
    /**
    * If true, the dialog will be visible on screen.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Prevents the user from closing the dialog by hitting escape or clicking the scrim.
    *
    * Defaults to **false**.
    */
    preventClose?: boolean;
    /**
    * DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing.
    *
    * Defaults to **null**.
    */
    returnFocusSelector?: string;
    /**
    * If true, the cancel button will be rendered beneath the accept button instead of side-by-side. Stacking of buttons happens automatically in cases where the button text is too long for all buttons to fit on a single line. Setting this prop to true is only required if you want to override this behavior.
    *
    * Defaults to **false**.
    */
    stackedButtons?: boolean;
    /**
    * Fired only when the closing action was triggered via dialog interaction.
    */
    onAction?: Function;
    /**
    * Fired when the Dialog finishes its closing animation. Where `action` is the action which closed the dialog.
    */
    onClosed?: Function;
    /**
    * Fired when the dialog begins its closing animation. action represents the action which closed the dialog.
    */
    onClosing?: Function;
    /**
    * Fired when the dialog finishes its opening animation.
    */
    onOpened?: Function;
    /**
    * Fired when the dialog begins its opening animation.
    */
    onOpening?: Function;
}

/**
* Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks. A dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken.
 * @prop {React.ReactNode} acceptButton - Button for the approving action of the dialog. When pressed, the dialog will close. Defaults to _null_.
 * @prop {React.ReactNode} actions - slot/element for adding action buttons Defaults to _null_.
 * @prop {React.ReactNode} cancelButton - Button for the cancel/close action of the dialog. When pressed, the dialog will close. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} content - Primary content of the dialog. Optional, children may be used instead. Defaults to _null_.
 * @prop {string} contentId - Custom id for the content container. If one is not specified a random id will be generated. Defaults to _empty string_.
 * @prop {React.ReactNode} header - Title information displayed at the top of the dialog. Defaults to _null_.
 * @prop {string} headerId - Custom id for the header container. If one is not specified a random id will be generated. Defaults to _empty string_.
 * @prop {boolean} open - If true, the dialog will be visible on screen. Defaults to _false_.
 * @prop {boolean} preventClose - Prevents the user from closing the dialog by hitting escape or clicking the scrim. Defaults to _false_.
 * @prop {string} returnFocusSelector - DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing. Defaults to _null_.
 * @prop {boolean} stackedButtons - If true, the cancel button will be rendered beneath the accept button instead of side-by-side. Stacking of buttons happens automatically in cases where the button text is too long for all buttons to fit on a single line. Setting this prop to true is only required if you want to override this behavior. Defaults to _false_.
 *  @event onAction - Fired only when the closing action was triggered via dialog interaction.
 *  @event onClosed - Fired when the Dialog finishes its closing animation. Where `action` is the action which closed the dialog.
 *  @event onClosing - Fired when the dialog begins its closing animation. action represents the action which closed the dialog.
 *  @event onOpened - Fired when the dialog finishes its opening animation.
 *  @event onOpening - Fired when the dialog begins its opening animation.
*/
export const Dialog: React.FunctionComponent<DialogProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DialogActionProps {
    /**
    * Dialog action
    *
    * Defaults to **empty string**.
    */
    action?: string;
    /**
    * children
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Focus element on dialog upon open
    *
    * Defaults to **null**.
    */
    focused?: boolean;
    /**
    * Base component that will be rendered
    *
    * Defaults to **'div'**.
    */
    tag: string | React.ElementType | React.Component;
}

/**
* A container for a button or similar component. The Dialog will automatically close on interaction if an action is defined.
 * @prop {string} action - Dialog action Defaults to _empty string_.
 * @prop {React.ReactNode} children - children Defaults to _null_.
 * @prop {boolean} focused - Focus element on dialog upon open Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - Base component that will be rendered Defaults to _'div'_.
*/
export const DialogAction: React.FunctionComponent<DialogActionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


interface DialogButtonReference { current: object; }

export interface DialogButtonProps {
    /**
    * @deprecated _Use `themeColor='secondary'` instead._
    *
    * Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme).
    *
    * Defaults to **undefined**.
    */
    altColor?: boolean;
    /**
    * One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme.
    *
    * Defaults to **'themeDefault'**.
    */
    buttonSize?: string;
    /**
    * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _forwardRef has been implemented for Button._
    *
    * Reference to the DOM button. This enables a greater level of integration.
    *
    * Defaults to **undefined**.
    */
    customRef?: Function|DialogButtonReference;
    /**
    * @deprecated _Use `variant='danger'` instead._
    *
    * Apply danger style to the button.
    *
    * Defaults to **undefined**.
    */
    danger?: boolean;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Sets elevation of the button. Default will be the theme default.
    *
    * Defaults to **'default'**.
    */
    elevation?: string;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply a filled-in style. Previously called `primary`.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Applies a full-width style where the textfield will fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The button will render as an anchor tag. If the tag prop is set, that prop will take precedence.
    *
    * Defaults to **null**.
    */
    href?: string;
    /**
    * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
    *
    * Defaults to **undefined**.
    */
    leadingIcon?: string | Function | React.ReactNode;
    /**
    * @deprecated _Use `variant='outlined'`._
    *
    * Apply outlined style to the button. Previously called `secondary`.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply primary style to the Button.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * @deprecated _Use `'variant=outlined'` instead._
    *
    * Apply secondary style to the Button.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
    *
    * Defaults to **null**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * @deprecated _Use `variant='embedded'` instead._
    *
    * Apply tertiary style to the Button.
    *
    * Defaults to **undefined**.
    */
    tertiary?: boolean;
    /**
    * @deprecated _Use `variant='text'` instead._
    *
    * Apply unfilled, un-outlined style to the Button. Previously called `tertiary`.
    *
    * Defaults to **undefined**.
    */
    text?: boolean;
    /**
    * Sets the theme color for the button. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
    *
    * Defaults to **undefined**.
    */
    trailingIcon?: string | Function | React.ReactNode;
    /**
    * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
    *
    * Defaults to **'button'**.
    */
    type?: string;
    /**
    * @deprecated _Use `elevation='flat' instead._
    *
    * Remove elevation.
    *
    * Defaults to **undefined**.
    */
    unelevated?: boolean;
    /**
    * Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * The primary interaction event for button.
    */
    onClick?: Function;
}

/**
* Button to be used as an action within a dialog. The Dialog will automatically close on interaction if an action is defined. All props from the Button and DialogAction components are accepted on this component
 * @prop {boolean} altColor - Deprecated: Use `themeColor='secondary'` instead. Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme). Defaults to _undefined_.
 * @prop {string} buttonSize - One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme. Defaults to _'themeDefault'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._ Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} customRef - Deprecated: forwardRef has been implemented for Button. Reference to the DOM button. This enables a greater level of integration. Defaults to _undefined_.
 * @prop {boolean} danger - Deprecated: Use `variant='danger'` instead. Apply danger style to the button. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {string} elevation - Sets elevation of the button. Default will be the theme default. Defaults to _'default'_.
 * @prop {boolean} filled - Deprecated: Use `variant='filled'` instead. Apply a filled-in style. Previously called `primary`. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Applies a full-width style where the textfield will fill it's container. Defaults to _false_.
 * @prop {string} href - The button will render as an anchor tag. If the tag prop is set, that prop will take precedence. Defaults to _null_.
 * @prop {string} label - The displayed text. Expects a valid string. If label and children are both set, label will take priority. Defaults to _null_.
 * @prop {string|function|React.ReactNode} leadingIcon - Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control, Defaults to _undefined_.
 * @prop {boolean} outlined - Deprecated: Use `variant='outlined'`. Apply outlined style to the button. Previously called `secondary`. Defaults to _undefined_.
 * @prop {boolean} primary - Deprecated: Use `variant='filled'` instead. Apply primary style to the Button. Defaults to _undefined_.
 * @prop {boolean} secondary - Deprecated: Use `'variant=outlined'` instead. Apply secondary style to the Button. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested. Defaults to _null_.
 * @prop {boolean} tertiary - Deprecated: Use `variant='embedded'` instead. Apply tertiary style to the Button. Defaults to _undefined_.
 * @prop {boolean} text - Deprecated: Use `variant='text'` instead. Apply unfilled, un-outlined style to the Button. Previously called `tertiary`. Defaults to _undefined_.
 * @prop {string} themeColor - Sets the theme color for the button. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|function|React.ReactNode} trailingIcon - Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control. Defaults to _undefined_.
 * @prop {string} type - This applies the html button type (button, submit, reset) or the anchor media type when used with the href property. Defaults to _'button'_.
 * @prop {boolean} unelevated - Deprecated: Use `elevation='flat' instead. Remove elevation. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes. Defaults to _'filled'_.
 *  @event onClick - The primary interaction event for button.
*/
export const DialogButton: React.FunctionComponent<DialogButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DividerProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _Use `themeColor` instead._
    *
    * The name of the desired Element color like 'primary'
    *
    * Defaults to **undefined**.
    */
    dividerColor?: string;
    /**
    * @deprecated _Use `themeColorImportant` instead._
    *
    * If the border-color should be set with !important
    *
    * Defaults to **undefined**.
    */
    dividerColorImportant?: boolean;
    /**
    * @deprecated _Use `variant` instead._
    *
    * Choose between dense and tall variants.
    *
    * Defaults to **undefined**.
    */
    dividerHeight?: string;
    /**
    * Set the border-style with default browser styles. In general, avoid using.
    *
    * Defaults to **empty string**.
    */
    dividerStyle?: string;
    /**
    * The name of the desired Element color like 'primary'
    *
    * Defaults to **'on-surface-stroke'**.
    */
    themeColor?: string;
    /**
    * @deprecated _No longer needed._
    *
    * In some cases `themeColor` may be inadvertently overridden by another style, this will ensure the selected color is applied.
    *
    * Defaults to **undefined**.
    */
    themeColorImportant?: boolean;
    /**
    * Choose between dense and tall variants.
    *
    * Defaults to **'dense'**.
    */
    variant?: string;
    /**
    * Adds top and bottom margin.
    *
    * Defaults to **undefined**.
    */
    verticalMargin?: string;
}

/**
* Dividers are horizontal lines. Add them to divide sections of content and splash in some color.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} dividerColor - Deprecated: Use `themeColor` instead. The name of the desired Element color like 'primary' Defaults to _undefined_.
 * @prop {boolean} dividerColorImportant - Deprecated: Use `themeColorImportant` instead. If the border-color should be set with !important Defaults to _undefined_.
 * @prop {string} dividerHeight - Deprecated: Use `variant` instead. Choose between dense and tall variants. Defaults to _undefined_.
 * @prop {string} dividerStyle - Set the border-style with default browser styles. In general, avoid using. Defaults to _empty string_.
 * @prop {string} themeColor - The name of the desired Element color like 'primary' Defaults to _'on-surface-stroke'_.
 * @prop {boolean} themeColorImportant - Deprecated: No longer needed. In some cases `themeColor` may be inadvertently overridden by another style, this will ensure the selected color is applied. Defaults to _undefined_.
 * @prop {string} variant - Choose between dense and tall variants. Defaults to _'dense'_.
 * @prop {string} verticalMargin - Adds top and bottom margin. Defaults to _undefined_.
*/
export const Divider: React.FunctionComponent<DividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerProps {
    /**
    * Positions the modal lower, below the TopAppBar.
    *
    * Defaults to **null**.
    */
    belowTopAppBar?: boolean;
    /**
    * Content to be rendered inside the Drawer
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _Use `variant='dismissible'` instead._
    *
    * Enables a dismissible drawer.
    *
    * Defaults to **undefined**.
    */
    dismissible?: boolean;
    /**
    * @deprecated _Use `variant='modal'` instead._
    *
    * Enabled a modal drawer.
    *
    * Defaults to **undefined**.
    */
    modal?: boolean;
    /**
    * Displays the drawer when `variant` is either `dismissible` or modal`
    *
    * Defaults to **null**.
    */
    open?: boolean;
    /**
    * Defines the type of drawer. By default the drawer will be always shown, a permanent drawer. If defined, either `modal` or `dismissible`
    *
    * Defaults to **empty string**.
    */
    variant?: string;
    /**
    * Fired when drawer is closed.
    */
    onClose?: Function;
    /**
    * Fired when drawer is opened.
    */
    onOpen?: Function;
}

/**
* Navigation drawers provide access to destinations and app functionality, such as switching accounts. It can either be permanently on-screen or controlled by a navigation menu icon. A navigation drawer is recommended for: 1. Apps with five or more top-level destinations 2. Apps with two or more levels of navigation hierarchy 3. Quick navigation between unrelated destinations
 * @prop {boolean} belowTopAppBar - Positions the modal lower, below the TopAppBar. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered inside the Drawer Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dismissible - Deprecated: Use `variant='dismissible'` instead. Enables a dismissible drawer. Defaults to _undefined_.
 * @prop {boolean} modal - Deprecated: Use `variant='modal'` instead. Enabled a modal drawer. Defaults to _undefined_.
 * @prop {boolean} open - Displays the drawer when `variant` is either `dismissible` or modal` Defaults to _null_.
 * @prop {string} variant - Defines the type of drawer. By default the drawer will be always shown, a permanent drawer. If defined, either `modal` or `dismissible` Defaults to _empty string_.
 *  @event onClose - Fired when drawer is closed.
 *  @event onOpen - Fired when drawer is opened.
*/
export const Drawer: React.FunctionComponent<DrawerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerAppContentProps {
    /**
    * Positions the modal lower, below the TopAppBar.
    *
    * Defaults to **null**.
    */
    belowTopAppBar?: boolean;
    /**
    * Content to be rendered inside the DrawerAppContent
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* DrawerAppContent is a container for app contents.  Its child is resized when the drawer opens/closes.
 * @prop {boolean} belowTopAppBar - Positions the modal lower, below the TopAppBar. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered inside the DrawerAppContent Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const DrawerAppContent: React.FunctionComponent<DrawerAppContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerContentProps {
    /**
    * Content to be rendered inside the drawer. Most commonly a list, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* DrawerContent is the container for the main body of the drawer.
 * @prop {React.ReactNode} children - Content to be rendered inside the drawer. Most commonly a list, but accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const DrawerContent: React.FunctionComponent<DrawerContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerHeaderProps {
    /**
    * Most commonly an avatar style image, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    avatar?: React.ReactNode;
    /**
    * Most commonly a text or a Typography component, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Subtitle of Drawer Header
    *
    * Defaults to **empty string**.
    */
    subtitle?: string;
    /**
    * Title of Drawer Header
    *
    * Defaults to **empty string**.
    */
    title?: string;
}

/**
* DrawerHeader contains the top title portion of the drawer.
 * @prop {React.ReactNode} avatar - Most commonly an avatar style image, but accepts any valid markup. Defaults to _null_.
 * @prop {React.ReactNode} children - Most commonly a text or a Typography component, but accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} subtitle - Subtitle of Drawer Header Defaults to _empty string_.
 * @prop {string} title - Title of Drawer Header Defaults to _empty string_.
*/
export const DrawerHeader: React.FunctionComponent<DrawerHeaderProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DrawerScrimProps {
}

/**
* DrawerScrim covers the screen behind the drawer component to focus the users attention.
*/
export const DrawerScrim: React.FunctionComponent<DrawerScrimProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ElevationProps {
    /**
    * Content to be rendered inside the elevation.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Adds a custom padding style to the child content. Must be a valid CSS padding declaration. i.e. 38px 30px
    *
    * Defaults to **null**.
    */
    customPadding?: string;
    /**
    * Sets the distance of the elevation. Value must be between 0-24.
    *
    * Defaults to **0**.
    */
    elevation?: number;
    /**
    * Avoids adding an extra element to the DOM and applies proper classes directly to the child element.
    *
    * Defaults to **null**.
    */
    noWrap?: boolean;
    /**
    * The elevation element will have a visible border.
    *
    * Defaults to **false**.
    */
    outlined?: boolean;
    /**
    * Adds a universal padding around the child content. `dense` is 8px, `standard` is 16px, and `airy` is 24px. If `customPadding` is used, this will be ignored.
    *
    * Defaults to **undefined**.
    */
    padding?: string;
    /**
    * The elevation element will have a border radius of 8px.
    *
    * Defaults to **false**.
    */
    rounded?: boolean;
    /**
    * HTML tag to render the contents in.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Adds animation when elevation is changed.
    *
    * Defaults to **null**.
    */
    transition?: boolean;
}

/**
* Elevation provides a shadow and optionally padding to show the relative distance in space between two surfaces.
 * @prop {React.ReactNode} children - Content to be rendered inside the elevation. Defaults to _null_.
 * @prop {string} customPadding - Adds a custom padding style to the child content. Must be a valid CSS padding declaration. i.e. 38px 30px Defaults to _null_.
 * @prop {number} elevation - Sets the distance of the elevation. Value must be between 0-24. Defaults to _0_.
 * @prop {boolean} noWrap - Avoids adding an extra element to the DOM and applies proper classes directly to the child element. Defaults to _null_.
 * @prop {boolean} outlined - The elevation element will have a visible border. Defaults to _false_.
 * @prop {string} padding - Adds a universal padding around the child content. `dense` is 8px, `standard` is 16px, and `airy` is 24px. If `customPadding` is used, this will be ignored. Defaults to _undefined_.
 * @prop {boolean} rounded - The elevation element will have a border radius of 8px. Defaults to _false_.
 * @prop {string|React.ElementType|React.Component} tag - HTML tag to render the contents in. Defaults to _'div'_.
 * @prop {boolean} transition - Adds animation when elevation is changed. Defaults to _null_.
*/
export const Elevation: React.FunctionComponent<ElevationProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ExpansionContentProps {
    /**
    * Content to be rendered inside the banner. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The content will display in the open (visible) state by default. If the ExpansionPanel is set to `accordion`, only the first item will be visible if more than one ExpansionContent is marked as open by default.
    *
    * Defaults to **false**.
    */
    defaultOpen?: boolean;
    /**
    * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
    *
    * Defaults to **null**.
    */
    expansionId: string | number;
    /**
    * Optionally override the automatically calculated content height. Must be specified in px.
    *
    * Defaults to **undefined**.
    */
    maxHeight?: string;
    /**
    * For explicit control of the open state.
    *
    * Defaults to **undefined**.
    */
    open?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * The root content HtmlElement. Expects a block element that can receive a height (spans will not work). If set to null, no HtmlElement will be inserted and the class and style properties will be added to the first child (this is for backwards compatibility.)
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
}

/**
* Expansion panels are containers that can be connected to a larger surface, such as a content block or card, or can live within a list. They contain information and actions that are not essential to exist at the highest level of the user interface of an application.
 * @prop {React.ReactNode} children - Content to be rendered inside the banner. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} defaultOpen - The content will display in the open (visible) state by default. If the ExpansionPanel is set to `accordion`, only the first item will be visible if more than one ExpansionContent is marked as open by default. Defaults to _false_.
 * @prop {string|number} expansionId - The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon. Defaults to _null_.
 * @prop {string} maxHeight - Optionally override the automatically calculated content height. Must be specified in px. Defaults to _undefined_.
 * @prop {boolean} open - For explicit control of the open state. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - The root content HtmlElement. Expects a block element that can receive a height (spans will not work). If set to null, no HtmlElement will be inserted and the class and style properties will be added to the first child (this is for backwards compatibility.) Defaults to _'div'_.
*/
export const ExpansionContent: React.FunctionComponent<ExpansionContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ExpansionIconProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * For explicit control of the icon's toggle state.
    *
    * Defaults to **undefined**.
    */
    expanded?: boolean;
    /**
    * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
    *
    * Defaults to **null**.
    */
    expansionId: string | number;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with moreIcon.
    *
    * Defaults to **'expand_less'**.
    */
    lessIcon?: string | React.ReactNode;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with lessIcon.
    *
    * Defaults to **'expand_more'**.
    */
    moreIcon?: string | React.ReactNode;
}

/**
* The ExpansionIcon is a visual indicator that will toggle between two specified icons as a panel is opened or closed.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} expanded - For explicit control of the icon's toggle state. Defaults to _undefined_.
 * @prop {string|number} expansionId - The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon. Defaults to _null_.
 * @prop {string|React.ReactNode} lessIcon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with moreIcon. Defaults to _'expand_less'_.
 * @prop {string|React.ReactNode} moreIcon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). It will be toggled with lessIcon. Defaults to _'expand_more'_.
*/
export const ExpansionIcon: React.FunctionComponent<ExpansionIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ExpansionPanelProps {
    /**
    * Only one panel will be open at a time
    *
    * Defaults to **false**.
    */
    accordion?: boolean;
    /**
    * Content to be rendered. Expected to be ExpansionTrigger or ExpansionContent, though any other valid components or markup may be used.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Fired when a trigger is clicked and the content is contracted. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
    */
    onContract?: Function;
    /**
    * Fired when a trigger is clicked and the content is expanded. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
    */
    onExpand?: Function;
}

/**
* Expansion panels are containers that can be connected to a larger surface, such as a content block or card, or can live within a list. They contain information and actions that are not essential to exist at the highest level of the user interface of an application. ExpansionPanels require ExpansionTrigger and ExpansionContent sub-component to be used. The ExpansionIcon indicator may optionally be used.
 * @prop {boolean} accordion - Only one panel will be open at a time Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered. Expected to be ExpansionTrigger or ExpansionContent, though any other valid components or markup may be used. Defaults to _null_.
 *  @event onContract - Fired when a trigger is clicked and the content is contracted. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
 *  @event onExpand - Fired when a trigger is clicked and the content is expanded. Note, in the case of an accordion, this will only fire for the panel that was clicked. Returns expansionId
*/
export const ExpansionPanel: React.FunctionComponent<ExpansionPanelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ExpansionTriggerProps {
    /**
    * Most typically a Button, IconButton or similar clickable component.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the trigger from being activated.
    *
    * Defaults to **false**.
    */
    disabled: boolean;
    /**
    * The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon.
    *
    * Defaults to **null**.
    */
    expansionId: string | number;
    /**
    * The trigger container element. If set to null, no HtmlElement will be inserted and the css class will be added to the first child (this is for backwards compatibility.)
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Will be fired when the trigger is clicked. Returns the `expansionId` and open state.
    */
    onClick?: Function;
    /**
    * Will be fired when the content panel is contracted. Returns `expansionId` and open state.
    */
    onContract?: Function;
    /**
    * Will be fired when the content panel is expanded. Returns `expansionId` and open state.
    */
    onExpand?: Function;
}

/**
* ExpansionTrigger is required to open and close an expansion panel. It accepts a button or other clickable components or markup.
 * @prop {React.ReactNode} children - Most typically a Button, IconButton or similar clickable component. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the trigger from being activated. Defaults to _false_.
 * @prop {string|number} expansionId - The unique id of the expansion panel, this must match the expansionId of the ExpansionTrigger and ExpansionIcon. Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - The trigger container element. If set to null, no HtmlElement will be inserted and the css class will be added to the first child (this is for backwards compatibility.) Defaults to _'div'_.
 *  @event onClick - Will be fired when the trigger is clicked. Returns the `expansionId` and open state.
 *  @event onContract - Will be fired when the content panel is contracted. Returns `expansionId` and open state.
 *  @event onExpand - Will be fired when the content panel is expanded. Returns `expansionId` and open state.
*/
export const ExpansionTrigger: React.FunctionComponent<ExpansionTriggerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FileUploadProps {
    /**
    * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Label to be displayed on the button.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Allows for multiple files to be uploaded.
    *
    * Defaults to **false**.
    */
    multiple?: boolean;
    /**
    * Placeholder text for the file name readonly input.
    *
    * Defaults to **'No File Chosen'**.
    */
    placeholder?: string;
    /**
    * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Fired when file input's value is changed
    */
    onChange?: Function;
}

/**
* File uploads are used to browse file(s) for upload from the users system.
 * @prop {React.ReactNode} children - Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._ Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} label - Label to be displayed on the button. Defaults to _null_.
 * @prop {boolean} multiple - Allows for multiple files to be uploaded. Defaults to _false_.
 * @prop {string} placeholder - Placeholder text for the file name readonly input. Defaults to _'No File Chosen'_.
 * @prop {string} themeColor - Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 *  @event onChange - Fired when file input's value is changed
*/
export const FileUpload: React.FunctionComponent<FileUploadProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FloatingLabelProps {
    /**
    * Content to be rendered inside the label. Expects a string, though accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The label will appear in the floating state.
    *
    * Defaults to **false**.
    */
    float?: boolean;
    /**
    * The id of the component to trigger on active
    *
    * Defaults to **empty string**.
    */
    htmlFor?: string;
    /**
    * The label will shake briefly when set.
    *
    * Defaults to **false**.
    */
    shake?: boolean;
}

/**
* Floating Label is used to add an animated label to other components. It is not meant as a stand alone component.
 * @prop {React.ReactNode} children - Content to be rendered inside the label. Expects a string, though accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} float - The label will appear in the floating state. Defaults to _false_.
 * @prop {string} htmlFor - The id of the component to trigger on active Defaults to _empty string_.
 * @prop {boolean} shake - The label will shake briefly when set. Defaults to _false_.
*/
export const FloatingLabel: React.FunctionComponent<FloatingLabelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterProps {
    /**
    * The default container for Footer content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Color of the Footer.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * If true the footer's content will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useContentMaxWidth?: boolean;
}

/**
* The Footer provides a container in which navigation, copyrights, and help can be organized.
 * @prop {React.ReactNode} children - The default container for Footer content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} themeColor - Color of the Footer. Defaults to _'surface'_.
 * @prop {boolean} useContentMaxWidth - If true the footer's content will have a max width according to your theme's breakpoints. Defaults to _false_.
*/
export const Footer: React.FunctionComponent<FooterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomProps {
    /**
    * The default container for Footer content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The center content of the FooterBottom component.
    *
    * Defaults to **null**.
    */
    copyrightContent?: React.ReactNode;
    /**
    * Expects one or more FooterIcons, will accept any valid components or markup.
    *
    * Defaults to **null**.
    */
    footerIcons?: React.ReactNode;
    /**
    * How many columns to create for the large breakpoint.
    *
    * Defaults to **'3'**.
    */
    lgCols?: string | number;
    /**
    * A container for common links.
    *
    * Defaults to **null**.
    */
    links?: React.ReactNode;
    /**
    * How many columns to create for the medium breakpoint.
    *
    * Defaults to **'1'**.
    */
    mdCols?: string | number;
    /**
    * How many columns to create for the small breakpoint.
    *
    * Defaults to **'1'**.
    */
    smCols?: string | number;
    /**
    * Color of the Footer Bottom.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
}

/**
* The Footer component provides its own styles.
 * @prop {React.ReactNode} children - The default container for Footer content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} copyrightContent - The center content of the FooterBottom component. Defaults to _null_.
 * @prop {React.ReactNode} footerIcons - Expects one or more FooterIcons, will accept any valid components or markup. Defaults to _null_.
 * @prop {string|number} lgCols - How many columns to create for the large breakpoint. Defaults to _'3'_.
 * @prop {React.ReactNode} links - A container for common links. Defaults to _null_.
 * @prop {string|number} mdCols - How many columns to create for the medium breakpoint. Defaults to _'1'_.
 * @prop {string|number} smCols - How many columns to create for the small breakpoint. Defaults to _'1'_.
 * @prop {string} themeColor - Color of the Footer Bottom. Defaults to _'surface'_.
*/
export const FooterBottom: React.FunctionComponent<FooterBottomProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomContentProps {
    /**
    * The default container for FooterBottom content.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* 
 *@deprecated This component is no longer needed, it may be removed entirely or replaced with a div.
The FooterBottomContent provides a container in which links, copyrights and help icons can be organized.
 * @prop {React.ReactNode} children - The default container for FooterBottom content. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const FooterBottomContent: React.FunctionComponent<FooterBottomContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomGroupProps {
    /**
    * Content alignment.
    *
    * Defaults to **undefined**.
    */
    alignment?: string;
    /**
    * The default container for FooterBottom content.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The spacing between items.
    *
    * Defaults to **'standard'**.
    */
    gap?: string;
    /**
    * How many columns to span the large breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    lgColSpan?: string | number;
    /**
    * The top and bottom spacing around the group component.
    *
    * Defaults to **'standard'**.
    */
    margin?: string;
    /**
    * How many columns to span the medium breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    mdColSpan?: string | number;
    /**
    * How many columns to span the small breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    smColSpan?: string | number;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
}

/**
* The FooterBottomGroup provides a container to organize items in a FooterBottom, if multiple items are sent in they will be distributed horizontally.
 * @prop {string} alignment - Content alignment. Defaults to _undefined_.
 * @prop {React.ReactNode} children - The default container for FooterBottom content. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} gap - The spacing between items. Defaults to _'standard'_.
 * @prop {string|number} lgColSpan - How many columns to span the large breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string} margin - The top and bottom spacing around the group component. Defaults to _'standard'_.
 * @prop {string|number} mdColSpan - How many columns to span the medium breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} smColSpan - How many columns to span the small breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
*/
export const FooterBottomGroup: React.FunctionComponent<FooterBottomGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomWrapperProps {
    /**
    * Content to be rendered inside the Footer Bottom. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Color of the Footer Bottom.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
}

/**
* Footer Bottom Wrapper is used to wrap the content of the Footer Bottom when `useContentMaxWidth` is true.
 * @prop {React.ReactNode} children - Content to be rendered inside the Footer Bottom. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} themeColor - Color of the Footer Bottom. Defaults to _'surface'_.
*/
export const FooterBottomWrapper: React.FunctionComponent<FooterBottomWrapperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterColProps {
    /**
    * The default container for FooterCol content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * How many columns to span the large breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    lgColSpan?: string | number;
    /**
    * How many columns to span the medium breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    mdColSpan?: string | number;
    /**
    * How many columns to span the small breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    smColSpan?: string | number;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * The header title of the content in footer.
    *
    * Defaults to **undefined**.
    */
    title?: string;
}

/**
* The FooterCol provides a container in which Footer contents can be organized.
 * @prop {React.ReactNode} children - The default container for FooterCol content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|number} lgColSpan - How many columns to span the large breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} mdColSpan - How many columns to span the medium breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} smColSpan - How many columns to span the small breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
 * @prop {string} title - The header title of the content in footer. Defaults to _undefined_.
*/
export const FooterCol: React.FunctionComponent<FooterColProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterContentProps {
    /**
    * The default container for Footer content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Gap between the columns and the pixels.  Must be a valid css gap declaration for css display grid 
    *
    * Defaults to **'64px'**.
    */
    gap?: string;
    /**
    * How many columns to create for the large breakpoint.
    *
    * Defaults to **undefined**.
    */
    lgCols?: string | number;
    /**
    * How many columns to create for the medium breakpoint.
    *
    * Defaults to **undefined**.
    */
    mdCols?: string | number;
    /**
    * How many columns to create for the small breakpoint.
    *
    * Defaults to **'1'**.
    */
    smCols?: string | number;
    /**
    * Color of the Footer.
    *
    * Defaults to **null**.
    */
    themeColor?: string;
}

/**
* The FooterContent provides a container in which navigation and lists can be organized.
 * @prop {React.ReactNode} children - The default container for Footer content Defaults to _null_.
 * @prop {string} gap - Gap between the columns and the pixels.  Must be a valid css gap declaration for css display grid  Defaults to _'64px'_.
 * @prop {string|number} lgCols - How many columns to create for the large breakpoint. Defaults to _undefined_.
 * @prop {string|number} mdCols - How many columns to create for the medium breakpoint. Defaults to _undefined_.
 * @prop {string|number} smCols - How many columns to create for the small breakpoint. Defaults to _'1'_.
 * @prop {string} themeColor - Color of the Footer. Defaults to _null_.
*/
export const FooterContent: React.FunctionComponent<FooterContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterDividerProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* Divides top and bottom of the Footer Component.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const FooterDivider: React.FunctionComponent<FooterDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterIconProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * For simple use-cases, this will automatically create the icon object.
    *
    * Defaults to **null**.
    */
    icon?: string | React.ReactNode;
    /**
    * Color variations. Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
    *
    * Defaults to **'gray'**.
    */
    themeColor?: string;
}

/**
* The FooterIcon provides a container in which help icons can be organized.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ReactNode} icon - For simple use-cases, this will automatically create the icon object. Defaults to _null_.
 * @prop {string} themeColor - Color variations. Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme. Defaults to _'gray'_.
*/
export const FooterIcon: React.FunctionComponent<FooterIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterListProps {
    /**
    * The default container for FooterList content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * How many columns to span the large breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    lgColSpan?: string | number;
    /**
    * How many columns to span the medium breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    mdColSpan?: string | number;
    /**
    * How many columns to span the small breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    smColSpan?: string | number;
    /**
    * The header title of the content in footer.
    *
    * Defaults to **undefined**.
    */
    title?: string;
}

/**
* The FooterList provides a container in which lists can be organized.
 * @prop {React.ReactNode} children - The default container for FooterList content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|number} lgColSpan - How many columns to span the large breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} mdColSpan - How many columns to span the medium breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} smColSpan - How many columns to span the small breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string} title - The header title of the content in footer. Defaults to _undefined_.
*/
export const FooterList: React.FunctionComponent<FooterListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterListItemProps {
    /**
    * The default container for FooterBottom content.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* The FooterListItem provides a container for items to appear in a FooterList.
 * @prop {React.ReactNode} children - The default container for FooterBottom content. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const FooterListItem: React.FunctionComponent<FooterListItemProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterLogoProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Optional logo. Expects an image but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    logo?: string | React.ReactNode;
}

/**
* 
 *@deprecated no longer used
The FooterLogo provides a container in which a logo can be placed.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ReactNode} logo - Optional logo. Expects an image but accepts any valid markup. Defaults to _null_.
*/
export const FooterLogo: React.FunctionComponent<FooterLogoProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


interface FormFieldReference { current: object; }

export interface FormFieldProps {
    /**
    * Reverse the order of the input and label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * Content to be rendered inside the FormField. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The reference of the input the form field will be associated with. It enables a greater level of integration with parent components.
    *
    * Defaults to **null**.
    */
    inputRef?: Function|FormFieldReference;
}

/**
* Form Field is an atomic component most often by other input components such as `Checkbox`, `Radio`, `Switch`, and by another atomic component, `InputLabel`. The typical use-case for this component would be in developing a new input component.
 * @prop {boolean} alignEnd - Reverse the order of the input and label. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered inside the FormField. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} inputRef - The reference of the input the form field will be associated with. It enables a greater level of integration with parent components. Defaults to _null_.
*/
export const FormField: React.FunctionComponent<FormFieldProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface GridProps {
    /**
    * @deprecated _Use `variant`='airy' instead._
    *
    * Applies extra padding to each column.
    *
    * Defaults to **undefined**.
    */
    airy?: boolean;
    /**
    * Accepts GridCol or GridRow.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets the column gap for the grid.
    *
    * Defaults to **'16px'**.
    */
    columnGap?: string | number;
    /**
    * Applies 100% height to the grid and direct children rows. Useful when creating a page layout. Be aware all direct children rows will have a 100% height.
    *
    * Defaults to **null**.
    */
    fullHeight?: boolean;
    /**
    * Applies 100% width to the grid and direct children rows. Useful to maintain full width in a flex container.
    *
    * Defaults to **null**.
    */
    fullWidth?: boolean;
    /**
    * Alignment of entire grid: left and right.
    *
    * Defaults to **'center'**.
    */
    gridAlign?: string;
    /**
    * Sets the row gap for the grid.
    *
    * Defaults to **'16px'**.
    */
    rowGap?: string | number;
    /**
    * Styles for the grid.
    *
    * Defaults to **undefined**.
    */
    style?: object;
    /**
    * If true the grid will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useMaxWidth?: boolean;
    /**
    * Select `airy` or `standard` padding.
    *
    * Defaults to **'standard'**.
    */
    variant?: string;
}

/**
* The Element Design responsive layout grid adapts to screen size and orientation, ensuring consistency across layouts.
 * @prop {boolean} airy - Deprecated: Use `variant`='airy' instead. Applies extra padding to each column. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Accepts GridCol or GridRow. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|number} columnGap - Sets the column gap for the grid. Defaults to _'16px'_.
 * @prop {boolean} fullHeight - Applies 100% height to the grid and direct children rows. Useful when creating a page layout. Be aware all direct children rows will have a 100% height. Defaults to _null_.
 * @prop {boolean} fullWidth - Applies 100% width to the grid and direct children rows. Useful to maintain full width in a flex container. Defaults to _null_.
 * @prop {string} gridAlign - Alignment of entire grid: left and right. Defaults to _'center'_.
 * @prop {string|number} rowGap - Sets the row gap for the grid. Defaults to _'16px'_.
 * @prop {object} style - Styles for the grid. Defaults to _undefined_.
 * @prop {boolean} useMaxWidth - If true the grid will have a max width according to your theme's breakpoints. Defaults to _false_.
 * @prop {string} variant - Select `airy` or `standard` padding. Defaults to _'standard'_.
*/
export const Grid: React.FunctionComponent<GridProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface GridColProps {
    /**
    * Alignment of cell within the row: top, middle, bottom. If omitted the col will stretch to the height of the row.
    *
    * Defaults to **undefined**.
    */
    align?: string;
    /**
    * Content to be rendered inside the GridCol. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Specifies the number of columns the cell spans.
    *
    * Defaults to **null**.
    */
    desktopCol?: number;
    /**
    * Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. Set to any valid `grid-column-start`.
    *
    * Defaults to **null**.
    */
    gridColStart?: string | number;
    /**
    * Horizontal alignment of the cell contents of cell content: top, middle, bottom.
    *
    * Defaults to **'left'**.
    */
    horizontalAlign?: string;
    /**
    * Specifies the order of the cell.
    *
    * Defaults to **null**.
    */
    order?: number;
    /**
    * Specifies the number of columns the cell spans on a phone.
    *
    * Defaults to **null**.
    */
    phoneCol?: number;
    /**
    * Specifies the number of columns the cell spans on a tablet.
    *
    * Defaults to **null**.
    */
    tabletCol?: number;
    /**
    * Vertical alignment of cell content: top, middle, bottom.
    *
    * Defaults to **'top'**.
    */
    verticalAlign?: string;
}

/**
* The column sub-component for Grid.
 * @prop {string} align - Alignment of cell within the row: top, middle, bottom. If omitted the col will stretch to the height of the row. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Content to be rendered inside the GridCol. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} desktopCol - Specifies the number of columns the cell spans. Defaults to _null_.
 * @prop {string|number} gridColStart - Specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. Set to any valid `grid-column-start`. Defaults to _null_.
 * @prop {string} horizontalAlign - Horizontal alignment of the cell contents of cell content: top, middle, bottom. Defaults to _'left'_.
 * @prop {number} order - Specifies the order of the cell. Defaults to _null_.
 * @prop {number} phoneCol - Specifies the number of columns the cell spans on a phone. Defaults to _null_.
 * @prop {number} tabletCol - Specifies the number of columns the cell spans on a tablet. Defaults to _null_.
 * @prop {string} verticalAlign - Vertical alignment of cell content: top, middle, bottom. Defaults to _'top'_.
*/
export const GridCol: React.FunctionComponent<GridColProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface GridRowProps {
    /**
    * Content to be rendered inside the GridRow. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* The row sub-component for Grid.
 * @prop {React.ReactNode} children - Content to be rendered inside the GridRow. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const GridRow: React.FunctionComponent<GridRowProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface GroupProps {
    /**
    * Children to be rendered. Expects multiple components of a similar type.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The grouping direction.
    *
    * Defaults to **'horizontal'**.
    */
    direction?: string;
    /**
    * Sets the Group width to be 100%.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * How much spacing between items. Dense is 8p, standard is 16px and airy is 24px.
    *
    * Defaults to **'standard'**.
    */
    gap?: string;
    /**
    * @deprecated _Renamed for improved clarity. See `gap`._
    *
    * How much spacing between items. Dense is 8p, standard is 16px and airy is 24px.
    *
    * Defaults to **undefined**.
    */
    padding?: string;
    /**
    * Alignment along the primary axis. 'For `horizontal` grouping this means the x-axis positioning, for `vertical`, this means the y-axis positioning.Equivalent to flexbox 'justify-content.
    *
    * Defaults to **'start'**.
    */
    primaryAlign?: string;
    /**
    * Alignment along the secondary axis. For horizontal grouping this means the y-axis positioning, for vertical, this means the x-axis positioning.Equivalent to flexbox 'align-items.
    *
    * Defaults to **'baseline'**.
    */
    secondaryAlign?: string;
}

/**
* Group is a component to group items with padding using css flexbox.
 * @prop {React.ReactNode} children - Children to be rendered. Expects multiple components of a similar type. Defaults to _null_.
 * @prop {string} direction - The grouping direction. Defaults to _'horizontal'_.
 * @prop {boolean} fullWidth - Sets the Group width to be 100%. Defaults to _false_.
 * @prop {string} gap - How much spacing between items. Dense is 8p, standard is 16px and airy is 24px. Defaults to _'standard'_.
 * @prop {string} padding - Deprecated: Renamed for improved clarity. See `gap`. How much spacing between items. Dense is 8p, standard is 16px and airy is 24px. Defaults to _undefined_.
 * @prop {string} primaryAlign - Alignment along the primary axis. 'For `horizontal` grouping this means the x-axis positioning, for `vertical`, this means the y-axis positioning.Equivalent to flexbox 'justify-content. Defaults to _'start'_.
 * @prop {string} secondaryAlign - Alignment along the secondary axis. For horizontal grouping this means the y-axis positioning, for vertical, this means the x-axis positioning.Equivalent to flexbox 'align-items. Defaults to _'baseline'_.
*/
export const Group: React.FunctionComponent<GroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface HeroProps {
    /**
    * Aligns the Hero contents.
    *
    * Defaults to **'centered'**.
    */
    alignment?: string;
    /**
    * Content to be rendered inside the Hero.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Image Url for Hero background image
    *
    * Defaults to **null**.
    */
    imageUrl?: string;
    /**
    * Adds an overlay over the Hero. Use `overlayProps` to send props to the Hero Overlay component.  See Hero Overlay for prop details.
    *
    * Defaults to **false**.
    */
    overlay?: boolean;
    /**
    * Props sent to Hero Overlay. See Hero Overlay for prop details.
    *
    * Defaults to **{}**.
    */
    overlayProps?: object;
    /**
    * Override the default background color. Can only be used if background image is omitted.
    *
    * Defaults to **empty string**.
    */
    themeColor?: string;
}

/**
* Heros are the area of the page between the navigation and the start of your content. They are often images, but they do not have to be. They serve as the starting point for your page and the contents should orient the user to the content on the rest of the page.
 * @prop {string} alignment - Aligns the Hero contents. Defaults to _'centered'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the Hero. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} imageUrl - Image Url for Hero background image Defaults to _null_.
 * @prop {boolean} overlay - Adds an overlay over the Hero. Use `overlayProps` to send props to the Hero Overlay component.  See Hero Overlay for prop details. Defaults to _false_.
 * @prop {object} overlayProps - Props sent to Hero Overlay. See Hero Overlay for prop details. Defaults to _{}_.
 * @prop {string} themeColor - Override the default background color. Can only be used if background image is omitted. Defaults to _empty string_.
*/
export const Hero: React.FunctionComponent<HeroProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface HeroContentProps {
    /**
    * Content to be rendered inside the Hero Content.  Will take precedence over props.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Button to be rendered inside the Hero Content.
    *
    * Defaults to **null**.
    */
    heroBtn?: React.ReactNode;
    /**
    * Logo to be rendered inside the Hero Content.
    *
    * Defaults to **null**.
    */
    logo?: React.ReactNode;
    /**
    * Overline text for the Hero Content. Cannot be used with children.
    *
    * Defaults to **'Overline'**.
    */
    overline?: string;
    /**
    * Adds a padding style to the Hero. Must be a valid CSS padding declaration. i.e. 38px 30px
    *
    * Defaults to **null**.
    */
    padding?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Subtitle text for the Hero Content. Cannot be used with children.
    *
    * Defaults to **'Subtitle'**.
    */
    subtitle?: string;
    /**
    * Set the color of the text.  Make sure to check for accessibility compliance.
    *
    * Defaults to **'on-unknown-black-active'**.
    */
    textColor?: string;
    /**
    * Title text for the Hero Content. Cannot be used with children.
    *
    * Defaults to **'Title'**.
    */
    title?: string;
}

/**
* Hero text is the block for the text in the Hero Banner.  You can either use the props to send in prearranged texts or any valid component you need to render.
 * @prop {React.ReactNode} children - Content to be rendered inside the Hero Content.  Will take precedence over props. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} heroBtn - Button to be rendered inside the Hero Content. Defaults to _null_.
 * @prop {React.ReactNode} logo - Logo to be rendered inside the Hero Content. Defaults to _null_.
 * @prop {string} overline - Overline text for the Hero Content. Cannot be used with children. Defaults to _'Overline'_.
 * @prop {string} padding - Adds a padding style to the Hero. Must be a valid CSS padding declaration. i.e. 38px 30px Defaults to _null_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {string} subtitle - Subtitle text for the Hero Content. Cannot be used with children. Defaults to _'Subtitle'_.
 * @prop {string} textColor - Set the color of the text.  Make sure to check for accessibility compliance. Defaults to _'on-unknown-black-active'_.
 * @prop {string} title - Title text for the Hero Content. Cannot be used with children. Defaults to _'Title'_.
*/
export const HeroContent: React.FunctionComponent<HeroContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface HeroOverlayProps {
    /**
    * Content to be rendered inside the Hero Overlay.  Useful for angles or other non semantic elements displayed in the Hero.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Overlay theme color.
    *
    * Defaults to **'dark'**.
    */
    overlayThemeColor?: string;
    /**
    * Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Hero accordingly to have Hero Content over the overlay.
    *
    * Defaults to **'full'**.
    */
    position?: string;
}

/**
* Hero Overlay is an optional overlay that goes over the Hero Banner.  You can send in children as angles or other non semantic elements displayed in the Hero.
 * @prop {React.ReactNode} children - Content to be rendered inside the Hero Overlay.  Useful for angles or other non semantic elements displayed in the Hero. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} overlayThemeColor - Overlay theme color. Defaults to _'dark'_.
 * @prop {string} position - Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Hero accordingly to have Hero Content over the overlay. Defaults to _'full'_.
*/
export const HeroOverlay: React.FunctionComponent<HeroOverlayProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface IconProps {
    /**
    * Sets the `aria-hidden` attribute for the icon. If set to true, the icon will not be read by screen readers. Should be used if icon is purely decorative (such as when used in a button or textfield) or labeled by rendered text using `aria-labelledBy` or `aria-label`.
    *
    * Defaults to **null**.
    */
    ariaHidden?: boolean;
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of the component being labeled for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * The custom icon notification badge to be rendered. The icon notification badge component prevents `xsmall` and `small` icon size
    *
    * Defaults to **undefined**.
    */
    badge?: React.ReactNode;
    /**
    * The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room.
    *
    * Defaults to **'right-start'**.
    */
    badgePlacement?: string;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Mostly commonly a string but accepts any valid markup or components. If a custom icon is used styles like color and size will need be handled with custom CSS.
    *
    * Defaults to **null**.
    */
    icon?: string | React.ReactNode;
    /**
    * One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium.
    *
    * Defaults to **'medium'**.
    */
    iconSize?: string;
    /**
    * The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons)
    *
    * Defaults to **'filled'**.
    */
    iconType?: string;
    /**
    * Add pointer icon style
    *
    * Defaults to **false**.
    */
    pointer?: boolean;
    /**
    * @deprecated _Renamed, see iconSize instead._
    *
    * One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium.
    *
    * Defaults to **undefined**.
    */
    size?: string;
    /**
    * Color variations. Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
    *
    * Defaults to **empty string**.
    */
    variant?: string;
}

/**
* Icons are small representative images that can be combined with other components such as buttons.
 * @prop {boolean} ariaHidden - Sets the `aria-hidden` attribute for the icon. If set to true, the icon will not be read by screen readers. Should be used if icon is purely decorative (such as when used in a button or textfield) or labeled by rendered text using `aria-labelledBy` or `aria-label`. Defaults to _null_.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of the component being labeled for assistive technologies. Defaults to _null_.
 * @prop {React.ReactNode} badge - The custom icon notification badge to be rendered. The icon notification badge component prevents `xsmall` and `small` icon size Defaults to _undefined_.
 * @prop {string} badgePlacement - The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room. Defaults to _'right-start'_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ReactNode} icon - Mostly commonly a string but accepts any valid markup or components. If a custom icon is used styles like color and size will need be handled with custom CSS. Defaults to _null_.
 * @prop {string} iconSize - One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium. Defaults to _'medium'_.
 * @prop {string} iconType - The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons) Defaults to _'filled'_.
 * @prop {boolean} pointer - Add pointer icon style Defaults to _false_.
 * @prop {string} size - Deprecated: Renamed, see iconSize instead. One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium. Defaults to _undefined_.
 * @prop {string} variant - Color variations. Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme. Defaults to _empty string_.
*/
export const Icon: React.FunctionComponent<IconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface IconButtonProps {
    /**
    * Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally.
    *
    * Defaults to **false**.
    */
    active?: boolean;
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of an element serving as a label for this IconButton instance. Used by assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * The custom icon button notification badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: React.ReactNode;
    /**
    * The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room.
    *
    * Defaults to **'right-start'**.
    */
    badgePlacement?: string;
    /**
    * The content when when using the IconButton normally. Expects an `Icon` component. For toggle button functionality, use `toggleOn` and `toggleOff` instead.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Enables a smaller IconButton.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Disables the icon button.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * For simple use-cases, this will automatically create the icon object. Does not work with `toggle='true'`
    *
    * Defaults to **null**.
    */
    icon?: string | React.ReactNode;
    /**
    * One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium.
    *
    * Defaults to **'medium'**.
    */
    iconSize?: string;
    /**
    * The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons)
    *
    * Defaults to **'filled'**.
    */
    iconType?: string;
    /**
    * TabIndex of the button.
    *
    * Defaults to **0**.
    */
    tabIndex?: number;
    /**
    * The content to be rendered when the `IconButton` is toggled off. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOff?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabelledBy?: string;
    /**
    * The content to be rendered when the `IconButton` is toggled on. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOn?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabelledBy?: string;
    /**
    * Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
    *
    * Defaults to **empty string**.
    */
    variant?: string;
    /**
    * Fired when the user clicks the IconButton, will return toggle state, if applicable.
    */
    onClick?: Function;
}

/**
* The icon button wraps the icon and provides button style interactions. Used when a user needs to interact with an icon.
 * @prop {boolean} active - Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally. Defaults to _false_.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of an element serving as a label for this IconButton instance. Used by assistive technologies. Defaults to _null_.
 * @prop {React.ReactNode} badge - The custom icon button notification badge to be rendered. Defaults to _undefined_.
 * @prop {string} badgePlacement - The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room. Defaults to _'right-start'_.
 * @prop {React.ReactNode} children - The content when when using the IconButton normally. Expects an `Icon` component. For toggle button functionality, use `toggleOn` and `toggleOff` instead. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - Enables a smaller IconButton. Defaults to _false_.
 * @prop {boolean} disabled - Disables the icon button. Defaults to _false_.
 * @prop {string|React.ReactNode} icon - For simple use-cases, this will automatically create the icon object. Does not work with `toggle='true'` Defaults to _null_.
 * @prop {string} iconSize - One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium. Defaults to _'medium'_.
 * @prop {string} iconType - The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons) Defaults to _'filled'_.
 * @prop {number} tabIndex - TabIndex of the button. Defaults to _0_.
 * @prop {React.ReactNode} toggleOff - The content to be rendered when the `IconButton` is toggled off. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOffAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOffAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {React.ReactNode} toggleOn - The content to be rendered when the `IconButton` is toggled on. Expects an `Icon` component. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOnAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOnAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {string} variant - Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme. Defaults to _empty string_.
 *  @event onClick - Fired when the user clicks the IconButton, will return toggle state, if applicable.
*/
export const IconButton: React.FunctionComponent<IconButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface InputChipProps {
    /**
    * If true, a user can add duplicate chips.
    *
    * Defaults to **false**.
    */
    allowDuplicates?: boolean;
    /**
    * Available for Uncontained Input Chip, inputs that are anchored show up before the chip list instead of after.
    *
    * Defaults to **false**.
    */
    anchorInput?: boolean;
    /**
    * Value of the chips array. If the chips array is to be controlled by the parent for two way data binding. this must be defined. If no initial array is needed, set to an empty array
    *
    * Defaults to **[]**.
    */
    chips?: Array<string> | Array<object>;
    /**
    * Custom props to be sent to each `Chip`. Props that will be sent through to `Chips` are 'scrollable', `variant`, `onRemoval`, `chipIdField`, `chipKeyField`, `chipLabelField`. See `Chips` docs for more information.
    *
    * Defaults to **{}**.
    */
    chipsProps?: object;
    /**
    * If true, the chips will be contained in the `Textfield`.
    *
    * Defaults to **false**.
    */
    contained?: boolean;
    /**
    * Custom props to be sent to the container. Notes, this is only used when `contained=true`.
    *
    * Defaults to **undefined**.
    */
    containerProps?: object;
    /**
    * Prevent the user from interacting with the input.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * What the input value will be set to after chip is added.
    *
    * Defaults to **empty string**.
    */
    resetValue?: string;
    /**
    * Custom props to be sent to the `Textfield`. See `Textfield` docs for more information.
    *
    * Defaults to **{}**.
    */
    textfieldProps?: object;
    /**
    * Callback fired when a chip is added.
    */
    onAdd?: Function;
}

/**
* A combination of a Textfield with Chips for entering multiple small pieces of information, such as filter fields.
 * @prop {boolean} allowDuplicates - If true, a user can add duplicate chips. Defaults to _false_.
 * @prop {boolean} anchorInput - Available for Uncontained Input Chip, inputs that are anchored show up before the chip list instead of after. Defaults to _false_.
 * @prop {[string]|[object]} chips - Value of the chips array. If the chips array is to be controlled by the parent for two way data binding. this must be defined. If no initial array is needed, set to an empty array Defaults to _[]_.
 * @prop {object} chipsProps - Custom props to be sent to each `Chip`. Props that will be sent through to `Chips` are 'scrollable', `variant`, `onRemoval`, `chipIdField`, `chipKeyField`, `chipLabelField`. See `Chips` docs for more information. Defaults to _{}_.
 * @prop {boolean} contained - If true, the chips will be contained in the `Textfield`. Defaults to _false_.
 * @prop {object} containerProps - Custom props to be sent to the container. Notes, this is only used when `contained=true`. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the input. Defaults to _false_.
 * @prop {string} resetValue - What the input value will be set to after chip is added. Defaults to _empty string_.
 * @prop {object} textfieldProps - Custom props to be sent to the `Textfield`. See `Textfield` docs for more information. Defaults to _{}_.
 *  @event onAdd - Callback fired when a chip is added.
*/
export const InputChip: React.FunctionComponent<InputChipProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface InputLabelProps {
    /**
    * Content to be rendered inside the FormField. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Applies disabled styling.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Visibly disable the label, though it will still be available to screen readers.
    *
    * Defaults to **false**.
    */
    hideLabel?: boolean;
}

/**
* Input Label is an atomic component most often by other input components such as `Checkbox`, `Radio`, `Switch`. The typical use-case for this component would be in developing a new input component.
 * @prop {React.ReactNode} children - Content to be rendered inside the FormField. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Applies disabled styling. Defaults to _false_.
 * @prop {boolean} hideLabel - Visibly disable the label, though it will still be available to screen readers. Defaults to _false_.
*/
export const InputLabel: React.FunctionComponent<InputLabelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface LineRippleProps {
    /**
    * 
    *
    * Defaults to **null**.
    */
    activated?: boolean;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * 
    *
    * Defaults to **null**.
    */
    rippleCenter?: string;
}

/**
* Implements the MDC line ripple feature, used by other components.
 * @prop {bool} activated -  Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} rippleCenter -  Defaults to _null_.
*/
export const LineRipple: React.FunctionComponent<LineRippleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface LinearProgressProps {
    /**
    * Accessibility label.
    *
    * Defaults to **'Progress Indicator'**.
    */
    ariaLabel?: string;
    /**
    * The buffer bar is a secondary bar to indicate the amount of buffered data (useful for video playback indicators). Buffer bar shows maximum width of linearProgress bar. Buffer is only used for determinate progress bar.
    *
    * Defaults to **1**.
    */
    buffer?: number;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _Use `variant='indeterminate'` instead._
    *
    * Toggles the component between the determinate (when a known percentage has been completed) and indeterminate state (a continuously animated indicator used when there is no known percentage of completion).
    *
    * Defaults to **undefined**.
    */
    indeterminate?: boolean;
    /**
    * Puts the component in the open or closed state.
    *
    * Defaults to **true**.
    */
    open?: boolean;
    /**
    * The current progress of a determinate progress indicator. Must be between 0 and 1. Progress is only used for determinate progress bar.
    *
    * Defaults to **0**.
    */
    progress?: number;
    /**
    * Reverses the direction of the linear progress indicator.
    *
    * Defaults to **false**.
    */
    reversed?: boolean;
    /**
    * Color of the indicator stroke with 'primary' or 'secondary' theme color.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * An indeterminate LinearProgress indicator will continue animating until closed. A determinate LinearProgress indicator will display the current progress.
    *
    * Defaults to **'indeterminate'**.
    */
    variant?: string;
}

/**
* Linear progress displays a specified or unspecified wait time as an animated line.
 * @prop {string} ariaLabel - Accessibility label. Defaults to _'Progress Indicator'_.
 * @prop {number} buffer - The buffer bar is a secondary bar to indicate the amount of buffered data (useful for video playback indicators). Buffer bar shows maximum width of linearProgress bar. Buffer is only used for determinate progress bar. Defaults to _1_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} indeterminate - Deprecated: Use `variant='indeterminate'` instead. Toggles the component between the determinate (when a known percentage has been completed) and indeterminate state (a continuously animated indicator used when there is no known percentage of completion). Defaults to _undefined_.
 * @prop {boolean} open - Puts the component in the open or closed state. Defaults to _true_.
 * @prop {number} progress - The current progress of a determinate progress indicator. Must be between 0 and 1. Progress is only used for determinate progress bar. Defaults to _0_.
 * @prop {boolean} reversed - Reverses the direction of the linear progress indicator. Defaults to _false_.
 * @prop {string} themeColor - Color of the indicator stroke with 'primary' or 'secondary' theme color. Defaults to _'primary'_.
 * @prop {string} variant - An indeterminate LinearProgress indicator will continue animating until closed. A determinate LinearProgress indicator will display the current progress. Defaults to _'indeterminate'_.
*/
export const LinearProgress: React.FunctionComponent<LinearProgressProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListProps {
    /**
    * Name of the key for category ID in `items`.
    *
    * Defaults to **'id'**.
    */
    categoryIdKey?: string;
    /**
    * Name of the key for category name in `items`.
    *
    * Defaults to **'categoryName'**.
    */
    categoryNameKey?: string;
    /**
    * List content. Expects a 'ListItem'.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Name of the key for group ID in `items`. custom props to apply to each list item.
    *
    * Defaults to **'componentProps'**.
    */
    componentPropsKey?: string;
    /**
    * Reduced height of list items.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Variant of divider padding.
    *
    * Defaults to **'full'**.
    */
    dividerVariant?: string;
    /**
    * Name of the key for group ID in `items`.
    *
    * Defaults to **'id'**.
    */
    groupIdKey?: string;
    /**
    * Name of the key for group name in `items`.
    *
    * Defaults to **'groupName'**.
    */
    groupNameKey?: string;
    /**
    * Name of the key for the id of the item in `items`.
    *
    * Defaults to **'id'**.
    */
    itemIdKey?: string;
    /**
    * An array of objects to be rendered as `ListItems`. If `items` is set children will be ignored.
    *
    * Defaults to **null**.
    */
    items?: Array<object> | Array<string>;
    /**
    * Name of the key for `items` in list schema.
    *
    * Defaults to **'items'**.
    */
    itemsKey?: string;
    /**
    * The type of media that will render in the leading block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **undefined**.
    */
    leadingBlockType?: string;
    /**
    * Enables support for lists of navigation links. Each list item will be rendered as an anchor element by default unless overridden via the `component` prop on each list item.
    *
    * Defaults to **false**.
    */
    navigation?: boolean;
    /**
    * Use for a list that does not require interaction.
    *
    * Defaults to **false**.
    */
    nonInteractive?: boolean;
    /**
    * Name of the key for `overlineText` in `items`.
    *
    * Defaults to **'overlineText'**.
    */
    overlineTextKey?: string;
    /**
    * Name of the key for `primaryText` in `items`.
    *
    * Defaults to **'primaryText'**.
    */
    primaryTextKey?: string;
    /**
    * The aria role of the list. For selection list use  `listbox`. For menu list use `menu`. For radio list use `radiogroup`. For checkbox list use `group`. For non-interactive list do not set.
    *
    * Defaults to **'listbox'**.
    */
    role?: string;
    /**
    * Name of the key for `secondaryText` in `items`.
    *
    * Defaults to **'secondaryText'**.
    */
    secondaryTextKey?: string;
    /**
    * Item or array of selected `ListItems`.
    *
    * Defaults to **null**.
    */
    selected?: string | number | object | Array<string> | Array<number> | Array<object>;
    /**
    * Whether or not to show a divider between list items, groups, or categories.
    *
    * Defaults to **true**.
    */
    showDivider?: boolean;
    /**
    * When true group and category lists will be treated like one list for single selection type lists.
    *
    * Defaults to **true**.
    */
    singleList?: boolean;
    /**
    * Customized background color.
    *
    * Defaults to **empty string**.
    */
    themeColor?: string;
    /**
    * The type of media that will render in the trailing block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **undefined**.
    */
    trailingBlockType?: string;
    /**
    * Allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation.
    *
    * Defaults to **true**.
    */
    wrapFocus?: boolean;
    /**
    * Fired when a List Item is activated.
    */
    onAction?: Function;
}

/**
* A list is a continuous column of rows containing text and images. List rows are composed of items containing primary and supplemental actions, which are represented by text and icons. Lists are optimized for reading comprehension and should be easy to scan quickly. Lists in Element are comprised of the following components: List and ListItem - as well as optional components such as ListDivider, ListGroup, ListGroupDivider, ListGroupSubheader.
 * @prop {string} categoryIdKey - Name of the key for category ID in `items`. Defaults to _'id'_.
 * @prop {string} categoryNameKey - Name of the key for category name in `items`. Defaults to _'categoryName'_.
 * @prop {React.ReactNode} children - List content. Expects a 'ListItem'. Defaults to _null_.
 * @prop {string} componentPropsKey - Name of the key for group ID in `items`. custom props to apply to each list item. Defaults to _'componentProps'_.
 * @prop {boolean} dense - Reduced height of list items. Defaults to _false_.
 * @prop {string} dividerVariant - Variant of divider padding. Defaults to _'full'_.
 * @prop {string} groupIdKey - Name of the key for group ID in `items`. Defaults to _'id'_.
 * @prop {string} groupNameKey - Name of the key for group name in `items`. Defaults to _'groupName'_.
 * @prop {string} itemIdKey - Name of the key for the id of the item in `items`. Defaults to _'id'_.
 * @prop {[object]|[string]} items - An array of objects to be rendered as `ListItems`. If `items` is set children will be ignored. Defaults to _null_.
 * @prop {string} itemsKey - Name of the key for `items` in list schema. Defaults to _'items'_.
 * @prop {string} leadingBlockType - The type of media that will render in the leading block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _undefined_.
 * @prop {boolean} navigation - Enables support for lists of navigation links. Each list item will be rendered as an anchor element by default unless overridden via the `component` prop on each list item. Defaults to _false_.
 * @prop {boolean} nonInteractive - Use for a list that does not require interaction. Defaults to _false_.
 * @prop {string} overlineTextKey - Name of the key for `overlineText` in `items`. Defaults to _'overlineText'_.
 * @prop {string} primaryTextKey - Name of the key for `primaryText` in `items`. Defaults to _'primaryText'_.
 * @prop {string} role - The aria role of the list. For selection list use  `listbox`. For menu list use `menu`. For radio list use `radiogroup`. For checkbox list use `group`. For non-interactive list do not set. Defaults to _'listbox'_.
 * @prop {string} secondaryTextKey - Name of the key for `secondaryText` in `items`. Defaults to _'secondaryText'_.
 * @prop {string|number|object|[string]|[number]|[object]} selected - Item or array of selected `ListItems`. Defaults to _null_.
 * @prop {boolean} showDivider - Whether or not to show a divider between list items, groups, or categories. Defaults to _true_.
 * @prop {boolean} singleList - When true group and category lists will be treated like one list for single selection type lists. Defaults to _true_.
 * @prop {string} themeColor - Customized background color. Defaults to _empty string_.
 * @prop {string} trailingBlockType - The type of media that will render in the trailing block of the `ListItems`. See README for size constraints. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _undefined_.
 * @prop {boolean} wrapFocus - Allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation. Defaults to _true_.
 *  @event onAction - Fired when a List Item is activated.
*/
export const List: React.FunctionComponent<ListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListDividerProps {
    /**
    * Variant of the divider padding.
    *
    * Defaults to **'full'**.
    */
    variant?: string;
}

/**
* A line that can be used to divide list items, list groups or list categories.
 * @prop {string} variant - Variant of the divider padding. Defaults to _'full'_.
*/
export const ListDivider: React.FunctionComponent<ListDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListGroupProps {
    /**
    * Expects one or more List or ListGroupSubHeader.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* The List Group component is used to organize multiple lists.
 * @prop {React.ReactNode} children - Expects one or more List or ListGroupSubHeader. Defaults to _null_.
*/
export const ListGroup: React.FunctionComponent<ListGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListGroupDividerProps {
}

/**
* A line that can be used to divide lists in a ListGroup.
*/
export const ListGroupDivider: React.FunctionComponent<ListGroupDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListGroupSubheaderProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A List Group Sub Header provides a header/title section when used with a ListGroup.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListGroupSubheader: React.FunctionComponent<ListGroupSubheaderProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemProps {
    /**
    * Alternate styling for selected interactive items without a control. Activation represents a status with more permanence (e.g., current page in a navigation list).
    *
    * Defaults to **false**.
    */
    activated?: boolean;
    /**
    * Whether or not the list item's radio or checkbox is selected for radio or checkbox lists.
    *
    * Defaults to **false**.
    */
    ariaChecked?: boolean;
    /**
    * Content to be rendered inside the list item content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Tells list item not to put selected class to add background to the list item.
    *
    * Defaults to **false**.
    */
    disableHighlight?: boolean;
    /**
    * Disable interaction for the ListItem within an interactive List.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Used with Select.
    *
    * Defaults to **false**.
    */
    isChildOption?: boolean;
    /**
    * Content to be displayed in the leading block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item.
    *
    * Defaults to **null**.
    */
    leadingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the leading block. See README for size constraints. If `leadingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **empty string**.
    */
    leadingBlockType?: string;
    /**
    * A hover style will not be applied.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * Used within a list that does not require interaction. See `disabled` for disabling an item within an interactive list.
    *
    * Defaults to **false**.
    */
    nonInteractive?: React.ReactNode;
    /**
    * Text that will appear above the standard text.
    *
    * Defaults to **null**.
    */
    overlineText?: React.ReactNode;
    /**
    * Standard list text.
    *
    * Defaults to **null**.
    */
    primaryText?: React.ReactNode;
    /**
    * Text that will appear below the standard text.
    *
    * Defaults to **null**.
    */
    secondaryText?: React.ReactNode;
    /**
    * A selected style will be applied. Selection represents a choice that might change frequently (e.g., option in a list). Required by selected interactive items without a control.
    *
    * Defaults to **false**.
    */
    selected?: boolean;
    /**
    * Component to be rendered as each list item. Normal lists use `li` elements, nav lists use `a` elements. You would use this for example if you want to use a router link component as each list item.
    *
    * Defaults to **null**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Customized background color.
    *
    * Defaults to **empty string**.
    */
    themeColor?: string;
    /**
    * Content to be displayed in the trailing block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item.
    *
    * Defaults to **null**.
    */
    trailingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the trailing block. See README for size constraints. If `trailingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored.
    *
    * Defaults to **undefined**.
    */
    trailingBlockType?: string;
    /**
    * A custom value to be returned as the second onClick argument.
    *
    * Defaults to **null**.
    */
    value?: React.ReactNode;
    /**
    * Used to adjust the padding of the `ListItem` when used as a category or group header.
    *
    * Defaults to **'standard'**.
    */
    variant?: string;
    /**
    * Determines the text wrapping mode of the list item: `wrap` will wrap text like normal, `truncate` will truncate text with an ellipsis and `noWrap` will truncate the text by clipping.
    *
    * Defaults to **'wrap'**.
    */
    wrapMode?: string;
    /**
    * Fired when the user clicks the ListItem. Returns the event as the first argument and any specified value as the second argument.
    */
    onClick?: Function;
    /**
    * Fired when the user presses a key down.
    */
    onKeyPress?: Function;
}

/**
* A List Item is a single item in a list.
 * @prop {boolean} activated - Alternate styling for selected interactive items without a control. Activation represents a status with more permanence (e.g., current page in a navigation list). Defaults to _false_.
 * @prop {boolean} ariaChecked - Whether or not the list item's radio or checkbox is selected for radio or checkbox lists. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered inside the list item content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored. Defaults to _null_.
 * @prop {boolean} disableHighlight - Tells list item not to put selected class to add background to the list item. Defaults to _false_.
 * @prop {boolean} disabled - Disable interaction for the ListItem within an interactive List. Defaults to _false_.
 * @prop {boolean} isChildOption - Used with Select. Defaults to _false_.
 * @prop {React.ReactNode} leadingBlock - Content to be displayed in the leading block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item. Defaults to _null_.
 * @prop {string} leadingBlockType - The type of media that will render in the leading block. See README for size constraints. If `leadingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _empty string_.
 * @prop {boolean} noHover - A hover style will not be applied. Defaults to _false_.
 * @prop {React.ReactNode} nonInteractive - Used within a list that does not require interaction. See `disabled` for disabling an item within an interactive list. Defaults to _false_.
 * @prop {React.ReactNode} overlineText - Text that will appear above the standard text. Defaults to _null_.
 * @prop {React.ReactNode} primaryText - Standard list text. Defaults to _null_.
 * @prop {React.ReactNode} secondaryText - Text that will appear below the standard text. Defaults to _null_.
 * @prop {boolean} selected - A selected style will be applied. Selection represents a choice that might change frequently (e.g., option in a list). Required by selected interactive items without a control. Defaults to _false_.
 * @prop {string|React.ElementType|React.Component} tag - Component to be rendered as each list item. Normal lists use `li` elements, nav lists use `a` elements. You would use this for example if you want to use a router link component as each list item. Defaults to _null_.
 * @prop {string} themeColor - Customized background color. Defaults to _empty string_.
 * @prop {React.ReactNode} trailingBlock - Content to be displayed in the trailing block container. See README for types supported. If a string is sent for a control type, it will used for the `name` attribute on the control. For radio type controls, send the same name for every item. Defaults to _null_.
 * @prop {string} trailingBlockType - The type of media that will render in the trailing block. See README for size constraints. If `trailingBlockType` is set on the parent List, it will take precedence. If `leadingBlockType` and `trailingBlockType` are both set to a control type (checkbox, radio or switch) `trailingBlockType` will be ignored. Defaults to _undefined_.
 * @prop {React.ReactNode} value - A custom value to be returned as the second onClick argument. Defaults to _null_.
 * @prop {string} variant - Used to adjust the padding of the `ListItem` when used as a category or group header. Defaults to _'standard'_.
 * @prop {string} wrapMode - Determines the text wrapping mode of the list item: `wrap` will wrap text like normal, `truncate` will truncate text with an ellipsis and `noWrap` will truncate the text by clipping. Defaults to _'wrap'_.
 *  @event onClick - Fired when the user clicks the ListItem. Returns the event as the first argument and any specified value as the second argument.
 *  @event onKeyPress - Fired when the user presses a key down.
*/
export const ListItem: React.FunctionComponent<ListItemProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemContentProps {
    /**
    * Content to be rendered inside the list item primary text content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Text that will appear above the standard text.
    *
    * Defaults to **null**.
    */
    overlineText?: React.ReactNode;
    /**
    * Standard list text. `children` may also be used but will require additional styling. Use `primaryText` instead of `children` when using overline or secondary text.
    *
    * Defaults to **null**.
    */
    primaryText?: React.ReactNode;
    /**
    * Text that will appear below the standard text.
    *
    * Defaults to **null**.
    */
    secondaryText?: React.ReactNode;
}

/**
* Formats text for a list item and optionally includes overline and secondary text. Used internally by ListItem.
 * @prop {React.ReactNode} children - Content to be rendered inside the list item primary text content block. Most often a string, but accepts any valid markup. When using primaryText, secondaryText or overlineText the children will be ignored. Defaults to _null_.
 * @prop {React.ReactNode} overlineText - Text that will appear above the standard text. Defaults to _null_.
 * @prop {React.ReactNode} primaryText - Standard list text. `children` may also be used but will require additional styling. Use `primaryText` instead of `children` when using overline or secondary text. Defaults to _null_.
 * @prop {React.ReactNode} secondaryText - Text that will appear below the standard text. Defaults to _null_.
*/
export const ListItemContent: React.FunctionComponent<ListItemContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemLeadingBlockProps {
    /**
    * Media or control to be rendered in the List Item's Leading Block
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats media or control to the left of the List Item content. Used internally by ListItem.
 * @prop {React.ReactNode} children - Media or control to be rendered in the List Item's Leading Block Defaults to _null_.
*/
export const ListItemLeadingBlock: React.FunctionComponent<ListItemLeadingBlockProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemOverlineProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats text for use as the overline in a list item. Used internally by ListItemText.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListItemOverline: React.FunctionComponent<ListItemOverlineProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemPrimaryTextProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A List Item is a single item in a list. Used internally by ListItemText.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListItemPrimaryText: React.FunctionComponent<ListItemPrimaryTextProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemSecondaryTextProps {
    /**
    * Expects a string but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats text for use as the second line in a list item. Used internally by ListItemText.
 * @prop {React.ReactNode} children - Expects a string but accepts any valid markup or components. Defaults to _null_.
*/
export const ListItemSecondaryText: React.FunctionComponent<ListItemSecondaryTextProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemTrailingBlockProps {
    /**
    * Media, control or text to be rendered in the List Item's Trailing Block
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Formats media, control or caption text to the right of the List Item content. Used internally by ListItem.
 * @prop {React.ReactNode} children - Media, control or text to be rendered in the List Item's Trailing Block Defaults to _null_.
*/
export const ListItemTrailingBlock: React.FunctionComponent<ListItemTrailingBlockProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListItemsListProps {
    /**
    * The List Items to be rendered in the Lists. If `items` is set children will be ignored.
    *
    * Defaults to **null**.
    */
    items?: Array<object> | Array<string>;
}

/**
* The list items rendered in a List
 * @prop {[object]|[string]} items - The List Items to be rendered in the Lists. If `items` is set children will be ignored. Defaults to _null_.
*/
export const ListItemsList: React.FunctionComponent<ListItemsListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ListWrapperProps {
}

/**
* Wrapper for List
*/
export const ListWrapper: React.FunctionComponent<ListWrapperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface MenuProps {
    /**
    * The horizontal position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor.
    *
    * Defaults to **null**.
    */
    absolutePositionX?: number;
    /**
    * The vertical position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor.
    *
    * Defaults to **null**.
    */
    absolutePositionY?: number;
    /**
    * Sets the display position of the menu relative to the parent element. It must be used with Menu Anchor.
    *
    * Defaults to **'BOTTOM_START'**.
    */
    anchorCorner?: string;
    /**
    * Sets the distance from the anchor point that the menu surface should be shown.  The object properties should include at least one of `top`, `bottom`, `left` or `right`.
    *
    * Defaults to **null**.
    */
    anchorMargin?: object;
    /**
    * Custom props to be sent to the MenuAnchor wrapper of the `trigger`
    *
    * Defaults to **{}**.
    */
    anchorProps?: object;
    /**
    * Expects a List or ListGroup component but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Sets the direction property for the menu. For right to left languages use `rtl`.
    *
    * Defaults to **'ltr'**.
    */
    direction?: string;
    /**
    * Prevents the use of absolute position (x/y) props.
    *
    * Defaults to **false**.
    */
    fixed?: boolean;
    /**
    * Sets the width of the menu to the full width of the body. It is to be used with `hoistToBody`. Useful when creating navigation menus for mobile devices.
    *
    * Defaults to **false**.
    */
    fullScreen?: boolean;
    /**
    * Sets the width of the menu to the full width of the parent. Cannot be used with `hoistToBody` or when `absolutePositionY` or `absolutePositionY` is set.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Enables the menu to be rendered as part of the body, enables higher z-index. Requires `surfaceOnly` to be true. This can improve menu to behavior better inside a table. Use with caution: may cause unintended side-effects.
    *
    * Defaults to **false**.
    */
    hoistToBody?: boolean;
    /**
    * Sets the max height of the menu.
    *
    * Defaults to **275**.
    */
    maxHeight?: number;
    /**
    * Controls the visibility of the menu.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Renders as just the menu surface. While Menu expects a list of items, when surfaceOnly is true any content can go inside the menu.
    *
    * Defaults to **false**.
    */
    surfaceOnly?: boolean;
    /**
    * Background color of the menu.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Node used to trigger open the menu or menu surface. Will also serve as the anchor.
    *
    * Defaults to **null**.
    */
    trigger?: React.ReactNode;
    /**
    * When used with a List component `wrapFocus` allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation.
    *
    * Defaults to **true**.
    */
    wrapFocus?: boolean;
    /**
    * Fired when html body is clicked. Default behavior is to close the menu.
    */
    handleBodyClick?: Function;
    /**
    * Fired after the menu surface is closed. For best performance, this method should be memoized or wrapped with useCallback.
    */
    onClose?: Function;
    /**
    * Fired after the menu surface is opened. For best performance, this method should be memoized or wrapped with useCallback.
    */
    onOpen?: Function;
    /**
    * Fired when a menu item is selected . It is not available if `surfaceOnly` is true. For best performance, this method should be memoized or wrapped with useCallback.
    */
    onSelect?: Function;
}

/**
* A menu displays a list of choices on a temporary surface. They allow users make a selection from multiple options. Menus appear when users interact with a button, action, or other control. Mostly commonly used with the List component.
 * @prop {number} absolutePositionX - The horizontal position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor. Defaults to _null_.
 * @prop {number} absolutePositionY - The vertical position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor. Defaults to _null_.
 * @prop {string} anchorCorner - Sets the display position of the menu relative to the parent element. It must be used with Menu Anchor. Defaults to _'BOTTOM_START'_.
 * @prop {object} anchorMargin - Sets the distance from the anchor point that the menu surface should be shown.  The object properties should include at least one of `top`, `bottom`, `left` or `right`. Defaults to _null_.
 * @prop {object} anchorProps - Custom props to be sent to the MenuAnchor wrapper of the `trigger` Defaults to _{}_.
 * @prop {React.ReactNode} children - Expects a List or ListGroup component but accepts any valid markup or components. Defaults to _null_.
 * @prop {string} direction - Sets the direction property for the menu. For right to left languages use `rtl`. Defaults to _'ltr'_.
 * @prop {boolean} fixed - Prevents the use of absolute position (x/y) props. Defaults to _false_.
 * @prop {boolean} fullScreen - Sets the width of the menu to the full width of the body. It is to be used with `hoistToBody`. Useful when creating navigation menus for mobile devices. Defaults to _false_.
 * @prop {boolean} fullWidth - Sets the width of the menu to the full width of the parent. Cannot be used with `hoistToBody` or when `absolutePositionY` or `absolutePositionY` is set. Defaults to _false_.
 * @prop {boolean} hoistToBody - Enables the menu to be rendered as part of the body, enables higher z-index. Requires `surfaceOnly` to be true. This can improve menu to behavior better inside a table. Use with caution: may cause unintended side-effects. Defaults to _false_.
 * @prop {number} maxHeight - Sets the max height of the menu. Defaults to _275_.
 * @prop {boolean} open - Controls the visibility of the menu. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {boolean} surfaceOnly - Renders as just the menu surface. While Menu expects a list of items, when surfaceOnly is true any content can go inside the menu. Defaults to _false_.
 * @prop {string} themeColor - Background color of the menu. Defaults to _'surface'_.
 * @prop {React.ReactNode} trigger - Node used to trigger open the menu or menu surface. Will also serve as the anchor. Defaults to _null_.
 * @prop {boolean} wrapFocus - When used with a List component `wrapFocus` allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation. Defaults to _true_.
 *  @event handleBodyClick - Fired when html body is clicked. Default behavior is to close the menu.
 *  @event onClose - Fired after the menu surface is closed. For best performance, this method should be memoized or wrapped with useCallback.
 *  @event onOpen - Fired after the menu surface is opened. For best performance, this method should be memoized or wrapped with useCallback.
 *  @event onSelect - Fired when a menu item is selected . It is not available if `surfaceOnly` is true. For best performance, this method should be memoized or wrapped with useCallback.
*/
export const Menu: React.FunctionComponent<MenuProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface MenuAnchorProps {
    /**
    * Expects a clickable component such as Button or IconButton and the Menu component.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A container for the button and Menu that helps position the Menu correctly.
 * @prop {React.ReactNode} children - Expects a clickable component such as Button or IconButton and the Menu component. Defaults to _null_.
*/
export const MenuAnchor: React.FunctionComponent<MenuAnchorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ModalProps {
    /**
    * An action button that will not automatically trigger a dismiss or accept. It is meant to be used only in certain circumstances where more control of the modal is required such as validating forms. If primaryButton is sent with actionButton, actionButton will be ignored.
    *
    * Defaults to **null**.
    */
    actionButton?: React.ReactNode;
    /**
    * Button for any navigating to the previous page in a Directional modal.
    *
    * Defaults to **null**.
    */
    backButton?: React.ReactNode;
    /**
    * The custom modal label badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: React.ReactNode;
    /**
    * Accepts any valid markup. Optionally, `content` may be used instead. If `content` and `children` are both set, `content` will take priority.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Primary content of the dialog. Accepts any valid markup. Optionally, `children` may be used instead. If content and `children` are both set, content will take priority.
    *
    * Defaults to **null**.
    */
    content?: React.ReactNode;
    /**
    * Button that is the default action, triggered by pressing the Enter key.
    *
    * Defaults to **'primary'**.
    */
    defaultButton?: string;
    /**
    * Button to cancel or close the modal.
    *
    * Defaults to **null**.
    */
    dismissiveButton?: React.ReactNode;
    /**
    * Button to be displayed in left corner of the modal footer. Should be a text button.
    *
    * Defaults to **null**.
    */
    footerSupplemental?: React.ReactNode;
    /**
    * Content to be displayed in right corner of the modal header. Should be a text button or a group of up to 3 icon buttons.
    *
    * Defaults to **null**.
    */
    headerActions?: React.ReactNode;
    /**
    * If true, the close icon in the upper left corner will not be rendered.
    *
    * Defaults to **false**.
    */
    hideCloseIcon?: boolean;
    /**
    * A slot for StepperIndicator.
    *
    * Defaults to **null**.
    */
    indicator?: React.ReactNode;
    /**
    * Button to initially focus on after the dialog has opened. If left null, the initial focus will be on the first focusable element in the modal. As an alternative you can add `data-mdc-dialog-initial-focus` to any element within the modal to make that element the initial focus. If it is a directional modal, the initial focus will be on the nextButton.
    *
    * Defaults to **null**.
    */
    initialFocus?: string;
    /**
    * If true, the buttons in the footer will be full width and stacked on mobile.
    *
    * Defaults to **false**.
    */
    mobileStackedButtons?: boolean;
    /**
    * String to determine the size of the modal.
    *
    * Defaults to **'max'**.
    */
    modalSize?: string;
    /**
    * Button for navigating to the next page in a Directional modal or closing on the last page.
    *
    * Defaults to **null**.
    */
    nextButton?: React.ReactNode;
    /**
    * Set to true if the modal will not have any actions. Should be used sparingly and the modal should be closed programmatically. For example, can be used to stop the user from interacting or navigating away while a payment is processing.
    *
    * Defaults to **null**.
    */
    noActions?: boolean;
    /**
    * If true, the Modal will be visible on screen.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Prevents the user from closing the dialog by hitting escape or clicking the scrim. Use caution when using this as the modal should always have a way for the user to close it.
    *
    * Defaults to **false**.
    */
    preventClose?: boolean;
    /**
    * Button for the primary action of the modal.
    *
    * Defaults to **null**.
    */
    primaryButton?: React.ReactNode;
    /**
    * DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing.
    *
    * Defaults to **null**.
    */
    returnFocusSelector?: string;
    /**
    * If true, wrapping will be disabled and a scrollable area will be created.
    *
    * Defaults to **false**.
    */
    scrollable?: boolean;
    /**
    * String for the modal title.
    *
    * Defaults to **null**.
    */
    title?: string;
    /**
    * Fired when the Dialog begins its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
    */
    onClose?: Function;
    /**
    * Fired when the Dialog finishes its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
    */
    onClosed?: Function;
    /**
    * Fired when the Dialog begins its opening animation.
    */
    onOpen?: Function;
    /**
    * Fired when the Dialog finishes its opening animation.
    */
    onOpened?: Function;
}

/**
* Modals are a window that appears in front of application or page content. They can contain longer content or forms than Dialog. All page functionality ceases until the modal is closed.
 * @prop {React.ReactNode} actionButton - An action button that will not automatically trigger a dismiss or accept. It is meant to be used only in certain circumstances where more control of the modal is required such as validating forms. If primaryButton is sent with actionButton, actionButton will be ignored. Defaults to _null_.
 * @prop {React.ReactNode} backButton - Button for any navigating to the previous page in a Directional modal. Defaults to _null_.
 * @prop {React.ReactNode} badge - The custom modal label badge to be rendered. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Accepts any valid markup. Optionally, `content` may be used instead. If `content` and `children` are both set, `content` will take priority. Defaults to _null_.
 * @prop {React.ReactNode} content - Primary content of the dialog. Accepts any valid markup. Optionally, `children` may be used instead. If content and `children` are both set, content will take priority. Defaults to _null_.
 * @prop {string} defaultButton - Button that is the default action, triggered by pressing the Enter key. Defaults to _'primary'_.
 * @prop {React.ReactNode} dismissiveButton - Button to cancel or close the modal. Defaults to _null_.
 * @prop {React.ReactNode} footerSupplemental - Button to be displayed in left corner of the modal footer. Should be a text button. Defaults to _null_.
 * @prop {React.ReactNode} headerActions - Content to be displayed in right corner of the modal header. Should be a text button or a group of up to 3 icon buttons. Defaults to _null_.
 * @prop {boolean} hideCloseIcon - If true, the close icon in the upper left corner will not be rendered. Defaults to _false_.
 * @prop {React.ReactNode} indicator - A slot for StepperIndicator. Defaults to _null_.
 * @prop {string} initialFocus - Button to initially focus on after the dialog has opened. If left null, the initial focus will be on the first focusable element in the modal. As an alternative you can add `data-mdc-dialog-initial-focus` to any element within the modal to make that element the initial focus. If it is a directional modal, the initial focus will be on the nextButton. Defaults to _null_.
 * @prop {boolean} mobileStackedButtons - If true, the buttons in the footer will be full width and stacked on mobile. Defaults to _false_.
 * @prop {string} modalSize - String to determine the size of the modal. Defaults to _'max'_.
 * @prop {React.ReactNode} nextButton - Button for navigating to the next page in a Directional modal or closing on the last page. Defaults to _null_.
 * @prop {boolean} noActions - Set to true if the modal will not have any actions. Should be used sparingly and the modal should be closed programmatically. For example, can be used to stop the user from interacting or navigating away while a payment is processing. Defaults to _null_.
 * @prop {boolean} open - If true, the Modal will be visible on screen. Defaults to _false_.
 * @prop {boolean} preventClose - Prevents the user from closing the dialog by hitting escape or clicking the scrim. Use caution when using this as the modal should always have a way for the user to close it. Defaults to _false_.
 * @prop {React.ReactNode} primaryButton - Button for the primary action of the modal. Defaults to _null_.
 * @prop {string} returnFocusSelector - DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing. Defaults to _null_.
 * @prop {boolean} scrollable - If true, wrapping will be disabled and a scrollable area will be created. Defaults to _false_.
 * @prop {string} title - String for the modal title. Defaults to _null_.
 *  @event onClose - Fired when the Dialog begins its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
 *  @event onClosed - Fired when the Dialog finishes its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
 *  @event onOpen - Fired when the Dialog begins its opening animation.
 *  @event onOpened - Fired when the Dialog finishes its opening animation.
*/
export const Modal: React.FunctionComponent<ModalProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface NotchedOutlineProps {
    /**
    * Content to be rendered inside the notched outline. Accepts a string.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Determines if the notch is opened or closed.
    *
    * Defaults to **undefined**.
    */
    closed?: boolean;
    /**
    * 
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* Implements MDC notched outline feature.
 * @prop {React.ReactNode} children - Content to be rendered inside the notched outline. Accepts a string. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {bool} closed - Determines if the notch is opened or closed. Defaults to _undefined_.
 * @prop {number} width -  Defaults to _null_.
*/
export const NotchedOutline: React.FunctionComponent<NotchedOutlineProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface PaddingProps {
    /**
    * Content to be rendered inside the padding component. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Adds a custom padding style to the child content. Must be a valid CSS padding declaration. i.e. 38px 30px
    *
    * Defaults to **null**.
    */
    customPadding?: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * Applies the specified padding amount. `dense` is 8px, `standard` is 16px, and `airy` is 24px. If `customPadding` is used, this will be ignored.
    *
    * Defaults to **'standard'**.
    */
    variant?: string;
}

/**
* Padding is used for adding consistent padding to layouts.
 * @prop {React.ReactNode} children - Content to be rendered inside the padding component. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} customPadding - Adds a custom padding style to the child content. Must be a valid CSS padding declaration. i.e. 38px 30px Defaults to _null_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
 * @prop {string} variant - Applies the specified padding amount. `dense` is 8px, `standard` is 16px, and `airy` is 24px. If `customPadding` is used, this will be ignored. Defaults to _'standard'_.
*/
export const Padding: React.FunctionComponent<PaddingProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface PaginationProps {
    /**
    * Disables internal state tracking in favor of programmatic control.
    *
    * Defaults to **false**.
    */
    controlled?: boolean;
    /**
    * When using Pagination in `controlled` mode, this will set the currently selected data page.
    *
    * Defaults to **0**.
    */
    currentPage?: number;
    /**
    * Enables a Select list of pages for direct navigation. If the number of pages is below the `directNavigationThreshold`, numbered buttons will displayed instead.
    *
    * Defaults to **false**.
    */
    directNavigation?: boolean;
    /**
    * When using `directNavigation`, this is number of pages above which a Select list of pages will be presented instead of number buttons.
    *
    * Defaults to **4**.
    */
    directNavigationThreshold?: number;
    /**
    * When using Pagination in `controlled` mode, this controls enabled or disabled the next page button.
    *
    * Defaults to **false**.
    */
    disableNextPage?: boolean;
    /**
    * When using Pagination in `controlled` mode, this controls enabled or disabled the previous page button.
    *
    * Defaults to **false**.
    */
    disablePreviousPage?: boolean;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Hide the first and last buttons.
    *
    * Defaults to **false**.
    */
    hideFirstLast?: boolean;
    /**
    * Hide the next and previous buttons.
    *
    * Defaults to **false**.
    */
    hideNextPrev?: boolean;
    /**
    * Hide the Rows Per Page component.
    *
    * Defaults to **false**.
    */
    hideRowsPerPage?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Sets the current page on mount.
    *
    * Defaults to **0**.
    */
    initialPage?: number;
    /**
    * Sets item per page. Defaults to first index in itemsPerPageOptions array if value is not available array.
    *
    * Defaults to **itemsPerPageOptions[0]**.
    */
    itemsPerPage?: number;
    /**
    * Number of items per page.
    *
    * Defaults to **[10, 25, 50, 100, 200]**.
    */
    itemsPerPageOptions?: Array<number>;
    /**
    * A customizable function to enable text translation services. Possible string values are 'Page', 'of', and 'Rows per page'.
    *
    * Defaults to **null**.
    */
    localize?: Function;
    /**
    * Total count of the total number of items to paginate through.
    *
    * Defaults to **0**.
    */
    totalItems?: number;
    /**
    * When using Pagination in `controlled` mode, this will override the total number of pages.
    *
    * Defaults to **0**.
    */
    totalPages?: number;
    /**
    * Fired with the first page button is clicked.
    */
    onFirstPage?: Function;
    /**
    * Returns item per page selected.
    */
    onItemsPerPageChange?: Function;
    /**
    * Fired with the last page button is clicked. Returns the new page.
    */
    onLastPage?: Function;
    /**
    * Fired with the next page button is clicked. Returns the new page.
    */
    onNextPage?: Function;
    /**
    * Fired when any page change occurs. Returns the new page.
    */
    onPageChange?: Function;
    /**
    * Fired with the previous page button is clicked.
    */
    onPreviousPage?: Function;
}

/**
* Pagination is used for dividing content or data among several pages with control for navigation between pages, both backwards and forwards.
 * @prop {boolean} controlled - Disables internal state tracking in favor of programmatic control. Defaults to _false_.
 * @prop {number} currentPage - When using Pagination in `controlled` mode, this will set the currently selected data page. Defaults to _0_.
 * @prop {boolean} directNavigation - Enables a Select list of pages for direct navigation. If the number of pages is below the `directNavigationThreshold`, numbered buttons will displayed instead. Defaults to _false_.
 * @prop {number} directNavigationThreshold - When using `directNavigation`, this is number of pages above which a Select list of pages will be presented instead of number buttons. Defaults to _4_.
 * @prop {boolean} disableNextPage - When using Pagination in `controlled` mode, this controls enabled or disabled the next page button. Defaults to _false_.
 * @prop {boolean} disablePreviousPage - When using Pagination in `controlled` mode, this controls enabled or disabled the previous page button. Defaults to _false_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {boolean} hideFirstLast - Hide the first and last buttons. Defaults to _false_.
 * @prop {boolean} hideNextPrev - Hide the next and previous buttons. Defaults to _false_.
 * @prop {boolean} hideRowsPerPage - Hide the Rows Per Page component. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {number} initialPage - Sets the current page on mount. Defaults to _0_.
 * @prop {number} itemsPerPage - Sets item per page. Defaults to first index in itemsPerPageOptions array if value is not available array. Defaults to _itemsPerPageOptions[0]_.
 * @prop {[number]} itemsPerPageOptions - Number of items per page. Defaults to _[10, 25, 50, 100, 200]_.
 * @prop {Function} localize - A customizable function to enable text translation services. Possible string values are 'Page', 'of', and 'Rows per page'. Defaults to _null_.
 * @prop {number} totalItems - Total count of the total number of items to paginate through. Defaults to _0_.
 * @prop {number} totalPages - When using Pagination in `controlled` mode, this will override the total number of pages. Defaults to _0_.
 *  @event onFirstPage - Fired with the first page button is clicked.
 *  @event onItemsPerPageChange - Returns item per page selected.
 *  @event onLastPage - Fired with the last page button is clicked. Returns the new page.
 *  @event onNextPage - Fired with the next page button is clicked. Returns the new page.
 *  @event onPageChange - Fired when any page change occurs. Returns the new page.
 *  @event onPreviousPage - Fired with the previous page button is clicked.
*/
export const Pagination: React.FunctionComponent<PaginationProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface PortalProps {
    /**
    * Content to be rendered inside the portal.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Disables the portal to rendering children in the natural flow of the DOM.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
}

/**
* Portal provides an easy way to render a child component outside of its parent component.
 * @prop {React.ReactNode} children - Content to be rendered inside the portal. Defaults to _null_.
 * @prop {boolean} disabled - Disables the portal to rendering children in the natural flow of the DOM. Defaults to _false_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
*/
export const Portal: React.FunctionComponent<PortalProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface RadioProps {
    /**
    * Aligns radio to the right of the label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * Applies selected state when `checked` equals `value` or when `checked` is set to true. 
    *
    * Defaults to **null**.
    */
    checked?: string | boolean;
    /**
    * @deprecated _Use `label` instead._
    *
    * Content to be rendered as the radio label. Can be used instead of `label` to provide more flexibility. Accepts any valid markup. _Warning, if `label` is set, it will be used instead of child content._
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevents user for interacting with component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The label not be displayed, but will still be available to screen readers. This should only be used when the context of the radio button is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action.
    *
    * Defaults to **false**.
    */
    hideLabel?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
    *
    * Defaults to **null**.
    */
    label: string;
    /**
    * Name of the radio button group.
    *
    * Defaults to **null**.
    */
    name: string;
    /**
    * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * A custom value will be returned as the second parameter of the `change` handler.
    *
    * Defaults to **null**.
    */
    value?: string | number;
    /**
    * Fired when value of the radio button is changed.
    */
    onChange?: Function;
}

/**
* Radio Buttons are selection controls that enable users to choose a single option from among multiple onscreen options. Selection controls are found where users are asked to make decisions or declare preferences.
 * @prop {boolean} alignEnd - Aligns radio to the right of the label. Defaults to _false_.
 * @prop {string | boolean} checked - Applies selected state when `checked` equals `value` or when `checked` is set to true.  Defaults to _null_.
 * @prop {React.ReactNode} children - Deprecated: Use `label` instead. Content to be rendered as the radio label. Can be used instead of `label` to provide more flexibility. Accepts any valid markup. _Warning, if `label` is set, it will be used instead of child content._ Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevents user for interacting with component. Defaults to _false_.
 * @prop {boolean} hideLabel - The label not be displayed, but will still be available to screen readers. This should only be used when the context of the radio button is clear and understandable. An example use-case could be as a column in a table where the column header specifies the action. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} label - Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers. Defaults to _null_.
 * @prop {string} name - Name of the radio button group. Defaults to _null_.
 * @prop {string} themeColor - Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|number} value - A custom value will be returned as the second parameter of the `change` handler. Defaults to _null_.
 *  @event onChange - Fired when value of the radio button is changed.
*/
export const Radio: React.FunctionComponent<RadioProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface RippleProps {
    /**
    * Content to be rendered inside the component.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * A reference to the component to apply the ripple to.
    *
    * Defaults to **undefined**.
    */
    componentRef?: object;
    /**
    * Allows the ripple to extend beyond the component boundaries.
    *
    * Defaults to **undefined**.
    */
    unbounded?: boolean;
}

/**
* Interactive effect applied on click or on touch.
 * @prop {React.ReactNode} children - Content to be rendered inside the component. Defaults to _null_.
 * @prop {object} componentRef - A reference to the component to apply the ripple to. Defaults to _undefined_.
 * @prop {boolean} unbounded - Allows the ripple to extend beyond the component boundaries. Defaults to _undefined_.
*/
export const Ripple: React.FunctionComponent<RippleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectProps {
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of the component being labeled for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * Label for the Cancel button on the multi-select label.
    *
    * Defaults to **'Cancel'**.
    */
    cancelLabel?: string;
    /**
    * Name of the key for category name in options.
    *
    * Defaults to **'categoryName'**.
    */
    categoryNameKey?: string;
    /**
    * Name of the key for category value in options.
    *
    * Defaults to **'categoryValue'**.
    */
    categoryValueKey?: string;
    /**
    * Expects one or more SelectOption components. Options should not be used with children. If both are sent children will be ignored.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * If true select is clearable.
    *
    * Defaults to **false**.
    */
    clearable?: boolean;
    /**
    * Label for the Confirm button on the multi-select label.
    *
    * Defaults to **'Confirm'**.
    */
    confirmLabel?: string;
    /**
    * Custom properties to be passed to the react-select instance.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * The menu will be visible by default.
    *
    * Defaults to **false**.
    */
    defaultOpen?: boolean;
    /**
    * Styles the select in a more compact format. When used with filled an external label must be used. Dense is not recommended when using as a multi select and `multiDisplayType` is set to pills.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Prevents the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Custom configuration for the select filter.
    *
    * Defaults to **{ 'ignoreCase': true, 'ignoreAccents': true, 'matchFrom': 'any', 'stringify': option => `${option.label} ${option.value}`, 'trim': true }**.
    */
    filterConfig?: object;
    /**
    * Custom filter function.
    *
    * Defaults to **undefined**.
    */
    filterFunction?: Function;
    /**
    * If true the select input will remain the same height even if rendered selections exceed the max height.
    *
    * Defaults to **false**.
    */
    fixedHeightInput?: boolean;
    /**
    * Name of the key for group name in options.
    *
    * Defaults to **'groupName'**.
    */
    groupNameKey?: string;
    /**
    * Name of the key for group value in options.
    *
    * Defaults to **'groupValue'**.
    */
    groupValueKey?: string;
    /**
    * Helper text to be displayed below Select, by default only visible on focus.
    *
    * Defaults to **null**.
    */
    helperText?: string;
    /**
    * Randomly generated id for the helper text container element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    helperTextId?: string;
    /**
    * Set the helper text to be permanently visible.
    *
    * Defaults to **false**.
    */
    helperTextPersistent?: boolean;
    /**
    * Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear the current theme's danger color when `valid` is set to 'false').
    *
    * Defaults to **false**.
    */
    helperTextValidation?: boolean;
    /**
    * Remove the selection option(s) from the list.
    *
    * Defaults to **false**.
    */
    hideSelectedOptions?: boolean;
    /**
    * Whether or not the menu is hoisted to render outside of the parent element. Useful for when the select needs to render in a parent with `overflow: hidden`.
    *
    * Defaults to **false**.
    */
    hoisted?: boolean;
    /**
    * Overwrite the default, randomly generated id. Each must be unique.
    *
    * Defaults to **null**.
    */
    id?: string;
    /**
    * @deprecated _Renamed to `clearable` for consistency._
    *
    * If true select is clearable.
    *
    * Defaults to **undefined**.
    */
    isClearable?: boolean;
    /**
    * @deprecated _Renamed to `multiSelect` for consistency._
    *
    * If true select is a multi-select.
    *
    * Defaults to **undefined**.
    */
    isMulti?: boolean;
    /**
    * The placeholder/floating display label.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons).
    *
    * Defaults to **null**.
    */
    leadingIcon?: string | React.ReactNode;
    /**
    * Max height the menu may take up. If using groups, we recommend adding a menu max height.
    *
    * Defaults to **undefined**.
    */
    menuMaxHeight?: string;
    /**
    * How value is displayed if select is a multiselect.
    *
    * Defaults to **'pills'**.
    */
    multiDisplayType?: string;
    /**
    * Enable multi-selection mode. Note, row highlighting is disabled when using multi-select.
    *
    * Defaults to **false**.
    */
    multiSelect?: boolean;
    /**
    * Name to be added to hidden html input.
    *
    * Defaults to **null**.
    */
    name?: string;
    /**
    * Message to show if no options are available.
    *
    * Defaults to **'No options'**.
    */
    noOptionsMessage?: string | React.ReactNode;
    /**
    * The menu will always be visible.
    *
    * Defaults to **undefined**.
    */
    open?: boolean;
    /**
    * (??) When using multi-select mode the menu items will show a switch to show all options or only selected.
    *
    * Defaults to **'Show only selected options'**.
    */
    optionFilterLabel?: string;
    /**
    * Options for select. See README for schema architecture. Options should not be used with children. If both are sent children will be ignored.
    *
    * Defaults to **null**.
    */
    options?: Array<object> | Array<string> | Array<number>;
    /**
    * The DOM element the menu should render in if `hoisted` is set to true. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **undefined**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * When in multi-select mode a confirmation will be required before the onChange will be called.
    *
    * Defaults to **false**.
    */
    requireConfirmation?: boolean;
    /**
    * Whether or not the input is required. Can be used for validation purposes.
    *
    * Defaults to **false**.
    */
    required?: boolean;
    /**
    * Enable autocomplete behavior.
    *
    * Defaults to **false**.
    */
    searchable?: boolean;
    /**
    * Label for the Select All checkbox.
    *
    * Defaults to **'Select All Options'**.
    */
    selectAllLabel?: string;
    /**
    * When using a multi-select list the items will have checkboxes to indicate selection. If false, options will not have a checkbox, and selected options will be removed from the list.
    *
    * Defaults to **true**.
    */
    showCheckboxOptions?: boolean;
    /**
    * When using a multi-select mode the menu will include a switch to show all options or only selected.
    *
    * Defaults to **true**.
    */
    showOptionFilter?: boolean;
    /**
    * Shows a checkbox to select all options.
    *
    * Defaults to **true**.
    */
    showSelectAll?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Prevent console warning when value is not found in the options list.
    *
    * Defaults to **false**.
    */
    suppressInvalidOptionWarning?: boolean;
    /**
    * Name of the key for the text in options.
    *
    * Defaults to **'text'**.
    */
    textKey?: string;
    /**
    * Color of the select based on the theme.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * If defined, a Tooltip will appear on the Select input. Useful to show the full value, if selected value is too long for the Select width. The object should be the needed Tooltip properties. Tooltip `text`prop will be set to the current selected value of the Select.  See Tooltip docs for available props.
    *
    * Defaults to **null**.
    */
    tooltip?: object;
    /**
    * Whether or not the selected value is valid. Can be used for validation purposes.
    *
    * Defaults to **null**.
    */
    valid?: boolean;
    /**
    * The value of the select.
    *
    * Defaults to **undefined**.
    */
    value?: Array<object> | object | string | number;
    /**
    * @deprecated _Renamed to `multiDisplayType` for clarity._
    *
    * How value is displayed if select is a multiselect.
    *
    * Defaults to **undefined**.
    */
    valueDisplay?: string;
    /**
    * Name of the key for the value in options.
    *
    * Defaults to **'value'**.
    */
    valueKey?: string;
    /**
    * Applies the selected style to the select input.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when the Select looses focus.
    */
    onBlur?: Function;
    /**
    * Fired when value of the selected option is changed.
    */
    onChange?: Function;
    /**
    * Fired when the Select gains focus.
    */
    onFocus?: Function;
    /**
    * Fired when the select is searchable and a user changes the search term.
    */
    onInputChange?: Function;
}

/**
* Select provides a single-option select menu.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of the component being labeled for assistive technologies. Defaults to _null_.
 * @prop {string} cancelLabel - Label for the Cancel button on the multi-select label. Defaults to _'Cancel'_.
 * @prop {string} categoryNameKey - Name of the key for category name in options. Defaults to _'categoryName'_.
 * @prop {string} categoryValueKey - Name of the key for category value in options. Defaults to _'categoryValue'_.
 * @prop {React.ReactNode} children - Expects one or more SelectOption components. Options should not be used with children. If both are sent children will be ignored. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} clearable - If true select is clearable. Defaults to _false_.
 * @prop {string} confirmLabel - Label for the Confirm button on the multi-select label. Defaults to _'Confirm'_.
 * @prop {object} containerProps - Custom properties to be passed to the react-select instance. Defaults to _null_.
 * @prop {boolean} defaultOpen - The menu will be visible by default. Defaults to _false_.
 * @prop {boolean} dense - Styles the select in a more compact format. When used with filled an external label must be used. Dense is not recommended when using as a multi select and `multiDisplayType` is set to pills. Defaults to _false_.
 * @prop {boolean} disabled - Prevents the user from interacting with the component. Defaults to _false_.
 * @prop {object} filterConfig - Custom configuration for the select filter. Defaults to _{ 'ignoreCase': true, 'ignoreAccents': true, 'matchFrom': 'any', 'stringify': option => `${option.label} ${option.value}`, 'trim': true }_.
 * @prop {function} filterFunction - Custom filter function. Defaults to _undefined_.
 * @prop {boolean} fixedHeightInput - If true the select input will remain the same height even if rendered selections exceed the max height. Defaults to _false_.
 * @prop {string} groupNameKey - Name of the key for group name in options. Defaults to _'groupName'_.
 * @prop {string} groupValueKey - Name of the key for group value in options. Defaults to _'groupValue'_.
 * @prop {string} helperText - Helper text to be displayed below Select, by default only visible on focus. Defaults to _null_.
 * @prop {string} helperTextId - Randomly generated id for the helper text container element. May be overwritten. Defaults to _undefined_.
 * @prop {boolean} helperTextPersistent - Set the helper text to be permanently visible. Defaults to _false_.
 * @prop {boolean} helperTextValidation - Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear the current theme's danger color when `valid` is set to 'false'). Defaults to _false_.
 * @prop {boolean} hideSelectedOptions - Remove the selection option(s) from the list. Defaults to _false_.
 * @prop {boolean} hoisted - Whether or not the menu is hoisted to render outside of the parent element. Useful for when the select needs to render in a parent with `overflow: hidden`. Defaults to _false_.
 * @prop {string} id - Overwrite the default, randomly generated id. Each must be unique. Defaults to _null_.
 * @prop {boolean} isClearable - Deprecated: Renamed to `clearable` for consistency. If true select is clearable. Defaults to _undefined_.
 * @prop {boolean} isMulti - Deprecated: Renamed to `multiSelect` for consistency. If true select is a multi-select. Defaults to _undefined_.
 * @prop {string} label - The placeholder/floating display label. Defaults to _null_.
 * @prop {string|React.ReactNode} leadingIcon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). Defaults to _null_.
 * @prop {string} menuMaxHeight - Max height the menu may take up. If using groups, we recommend adding a menu max height. Defaults to _undefined_.
 * @prop {string} multiDisplayType - How value is displayed if select is a multiselect. Defaults to _'pills'_.
 * @prop {boolean} multiSelect - Enable multi-selection mode. Note, row highlighting is disabled when using multi-select. Defaults to _false_.
 * @prop {string} name - Name to be added to hidden html input. Defaults to _null_.
 * @prop {string|React.ReactNode} noOptionsMessage - Message to show if no options are available. Defaults to _'No options'_.
 * @prop {boolean} open - The menu will always be visible. Defaults to _undefined_.
 * @prop {string} optionFilterLabel - (??) When using multi-select mode the menu items will show a switch to show all options or only selected. Defaults to _'Show only selected options'_.
 * @prop {[object] | [string] | [number]} options - Options for select. See README for schema architecture. Options should not be used with children. If both are sent children will be ignored. Defaults to _null_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the menu should render in if `hoisted` is set to true. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _undefined_.
 * @prop {boolean} requireConfirmation - When in multi-select mode a confirmation will be required before the onChange will be called. Defaults to _false_.
 * @prop {boolean} required - Whether or not the input is required. Can be used for validation purposes. Defaults to _false_.
 * @prop {boolean} searchable - Enable autocomplete behavior. Defaults to _false_.
 * @prop {string} selectAllLabel - Label for the Select All checkbox. Defaults to _'Select All Options'_.
 * @prop {boolean} showCheckboxOptions - When using a multi-select list the items will have checkboxes to indicate selection. If false, options will not have a checkbox, and selected options will be removed from the list. Defaults to _true_.
 * @prop {boolean} showOptionFilter - When using a multi-select mode the menu will include a switch to show all options or only selected. Defaults to _true_.
 * @prop {boolean} showSelectAll - Shows a checkbox to select all options. Defaults to _true_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {boolean} suppressInvalidOptionWarning - Prevent console warning when value is not found in the options list. Defaults to _false_.
 * @prop {string} textKey - Name of the key for the text in options. Defaults to _'text'_.
 * @prop {string} themeColor - Color of the select based on the theme. Defaults to _'primary'_.
 * @prop {object} tooltip - If defined, a Tooltip will appear on the Select input. Useful to show the full value, if selected value is too long for the Select width. The object should be the needed Tooltip properties. Tooltip `text`prop will be set to the current selected value of the Select.  See Tooltip docs for available props. Defaults to _null_.
 * @prop {boolean} valid - Whether or not the selected value is valid. Can be used for validation purposes. Defaults to _null_.
 * @prop {[object]|object|string|number} value - The value of the select. Defaults to _undefined_.
 * @prop {string} valueDisplay - Deprecated: Renamed to `multiDisplayType` for clarity. How value is displayed if select is a multiselect. Defaults to _undefined_.
 * @prop {string} valueKey - Name of the key for the value in options. Defaults to _'value'_.
 * @prop {string} variant - Applies the selected style to the select input. Defaults to _'filled'_.
 *  @event onBlur - Fired when the Select looses focus.
 *  @event onChange - Fired when value of the selected option is changed.
 *  @event onFocus - Fired when the Select gains focus.
 *  @event onInputChange - Fired when the select is searchable and a user changes the search term.
*/
export const Select: React.FunctionComponent<SelectProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectClearIndicatorProps {
    /**
    * Inner props from the react select.
    *
    * Defaults to **undefined**.
    */
    innerProps?: object;
}

/**
* Clear icon for the select.
 * @prop {object} innerProps - Inner props from the react select. Defaults to _undefined_.
*/
export const SelectClearIndicator: React.FunctionComponent<SelectClearIndicatorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectConfirmationProps {
    /**
    * Label for the Cancel button on the multi select label.
    *
    * Defaults to **'Cancel'**.
    */
    cancelLabel?: string;
    /**
    * Label for the Confirm button on the multi select label.
    *
    * Defaults to **'Confirm'**.
    */
    confirmLabel?: string;
    /**
    * Sets the theme color for the option filter switch, confirm/cancel buttons and checkboxes
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Fired when confirmation is clicked.
    */
    onConfirm?: Function;
}

/**
* Select confirmation component.
 * @prop {string} cancelLabel - Label for the Cancel button on the multi select label. Defaults to _'Cancel'_.
 * @prop {string} confirmLabel - Label for the Confirm button on the multi select label. Defaults to _'Confirm'_.
 * @prop {string} themeColor - Sets the theme color for the option filter switch, confirm/cancel buttons and checkboxes Defaults to _'primary'_.
 *  @event onConfirm - Fired when confirmation is clicked.
*/
export const SelectConfirmation: React.FunctionComponent<SelectConfirmationProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectContentProps {
    /**
    * Content to be rendered inside the component. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Indicates the content will appear before the list, otherwise content will assume it is trailing.
    *
    * Defaults to **undefined**.
    */
    leading?: boolean;
}

/**
* A container for adding leading or trailing content to a select menu. For internal and development use only.
 * @prop {React.ReactNode} children - Content to be rendered inside the component. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} leading - Indicates the content will appear before the list, otherwise content will assume it is trailing. Defaults to _undefined_.
*/
export const SelectContent: React.FunctionComponent<SelectContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectControlComponentProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Whether or not the select has a value.
    *
    * Defaults to **null**.
    */
    hasValue?: boolean;
    /**
    * Inner props from the react select.
    *
    * Defaults to **null**.
    */
    innerProps?: object;
    /**
    * Whether or not the select is focused.
    *
    * Defaults to **null**.
    */
    isFocused?: boolean;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Control component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {boolean} hasValue - Whether or not the select has a value. Defaults to _null_.
 * @prop {object} innerProps - Inner props from the react select. Defaults to _null_.
 * @prop {boolean} isFocused - Whether or not the select is focused. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectControlComponent: React.FunctionComponent<SelectControlComponentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectDropdownIconProps {
}

/**
* Control component for the select.
*/
export const SelectDropdownIcon: React.FunctionComponent<SelectDropdownIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectIndicatorsContainerProps {
    /**
    * Expects the indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Indicator component for the select.
 * @prop {React.ReactNode} children - Expects the indicators. Defaults to _null_.
*/
export const SelectIndicatorsContainer: React.FunctionComponent<SelectIndicatorsContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectLabelProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Whether or not the select control has expanded in height.
    *
    * Defaults to **null**.
    */
    extendedHeight?: boolean;
    /**
    * Whether or not the select control has a fixed height.
    *
    * Defaults to **null**.
    */
    fixedHeightInput?: boolean;
    /**
    * Whether or not the label should float.
    *
    * Defaults to **null**.
    */
    float?: boolean;
    /**
    * Whether or not the select is the outlined variant.
    *
    * Defaults to **null**.
    */
    isOutlined?: boolean;
    /**
    * Label for the select.
    *
    * Defaults to **empty string**.
    */
    label?: string;
    /**
    * Id for the select.
    *
    * Defaults to **empty string**.
    */
    selectId?: string;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Label component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {boolean} extendedHeight - Whether or not the select control has expanded in height. Defaults to _null_.
 * @prop {boolean} fixedHeightInput - Whether or not the select control has a fixed height. Defaults to _null_.
 * @prop {boolean} float - Whether or not the label should float. Defaults to _null_.
 * @prop {boolean} isOutlined - Whether or not the select is the outlined variant. Defaults to _null_.
 * @prop {string} label - Label for the select. Defaults to _empty string_.
 * @prop {string} selectId - Id for the select. Defaults to _empty string_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectLabel: React.FunctionComponent<SelectLabelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMenuProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Returns the value of the select.
    *
    * Defaults to **null**.
    */
    getValue?: Function;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
    /**
    * Set the value of the select.
    *
    * Defaults to **null**.
    */
    setValue?: Function;
}

/**
* Menu component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {function} getValue - Returns the value of the select. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
 * @prop {function} setValue - Set the value of the select. Defaults to _null_.
*/
export const SelectMenu: React.FunctionComponent<SelectMenuProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMenuListProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Menu List component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectMenuList: React.FunctionComponent<SelectMenuListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMultiValueProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Menu Multi Value component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
*/
export const SelectMultiValue: React.FunctionComponent<SelectMultiValueProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMultiValueLabelProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Menu Multi Value Label component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
*/
export const SelectMultiValueLabel: React.FunctionComponent<SelectMultiValueLabelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMultiValueRemoveProps {
}

/**
* Menu Multi Value Remove icon component for the select.
*/
export const SelectMultiValueRemove: React.FunctionComponent<SelectMultiValueRemoveProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectOptionProps {
    /**
    * The display value of the SelectOption. If using more than a simple string or number, custom css may be necessary.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * Data for the select option.
    *
    * Defaults to **undefined**.
    */
    data?: object;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **undefined**.
    */
    disabled?: boolean;
    /**
    * Returns the value of the select.
    *
    * Defaults to **undefined**.
    */
    getValue?: Function;
    /**
    * Inner props from the react select.
    *
    * Defaults to **undefined**.
    */
    innerProps?: object;
    /**
    * The option is nested.
    *
    * Defaults to **false**.
    */
    isChildOption?: boolean;
    /**
    * Whether or not the option is focused.
    *
    * Defaults to **undefined**.
    */
    isFocused?: boolean;
    /**
    * Whether or not the select is selected.
    *
    * Defaults to **undefined**.
    */
    isSelected?: boolean;
    /**
    * The display value of the SelectOption.
    *
    * Defaults to **undefined**.
    */
    label?: string | number | React.ReactNode;
    /**
    * Select props sent to react select.
    *
    * Defaults to **undefined**.
    */
    selectProps?: object;
    /**
    * @deprecated _The parent Select component will manage the selected state of child SelectOptions. If this is set, it will only change the appearance of the option to show as highlighted._
    *
    * Whether or not the select is selected.
    *
    * Defaults to **undefined**.
    */
    selected?: boolean;
    /**
    * Sets the value of the select.
    *
    * Defaults to **undefined**.
    */
    setValue?: Function;
    /**
    * The value of the SelectOption.
    *
    * Defaults to **undefined**.
    */
    value?: any;
}

/**
* Select Option component for the select.
 * @prop {React.ReactNode} children - The display value of the SelectOption. If using more than a simple string or number, custom css may be necessary. Defaults to _undefined_.
 * @prop {object} data - Data for the select option. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _undefined_.
 * @prop {function} getValue - Returns the value of the select. Defaults to _undefined_.
 * @prop {object} innerProps - Inner props from the react select. Defaults to _undefined_.
 * @prop {boolean} isChildOption - The option is nested. Defaults to _false_.
 * @prop {boolean} isFocused - Whether or not the option is focused. Defaults to _undefined_.
 * @prop {boolean} isSelected - Whether or not the select is selected. Defaults to _undefined_.
 * @prop {string|number|React.ReactNode} label - The display value of the SelectOption. Defaults to _undefined_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _undefined_.
 * @prop {boolean} selected - Deprecated: The parent Select component will manage the selected state of child SelectOptions. If this is set, it will only change the appearance of the option to show as highlighted. Whether or not the select is selected. Defaults to _undefined_.
 * @prop {function} setValue - Sets the value of the select. Defaults to _undefined_.
 * @prop {any} value - The value of the SelectOption. Defaults to _undefined_.
*/
export const SelectOption: React.FunctionComponent<SelectOptionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectOptionFilterProps {
    /**
    * Label for the option filter switch.
    *
    * Defaults to **empty string**.
    */
    optionFilterLabel?: string;
    /**
    * Theme color for the switch.
    *
    * Defaults to **empty string**.
    */
    optionFilterThemeColor?: string;
    /**
    * Sets the value of the showOnlySelectedItems prop.
    *
    * Defaults to **null**.
    */
    setShowOnlySelectedItems?: Function;
    /**
    * If true only selected items are shown in the menu.
    *
    * Defaults to **null**.
    */
    showOnlySelectedItems?: boolean;
}

/**
* Select Option Filter component for the select.
 * @prop {string} optionFilterLabel - Label for the option filter switch. Defaults to _empty string_.
 * @prop {string} optionFilterThemeColor - Theme color for the switch. Defaults to _empty string_.
 * @prop {function} setShowOnlySelectedItems - Sets the value of the showOnlySelectedItems prop. Defaults to _null_.
 * @prop {boolean} showOnlySelectedItems - If true only selected items are shown in the menu. Defaults to _null_.
*/
export const SelectOptionFilter: React.FunctionComponent<SelectOptionFilterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectPortalProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Returns the styles of the component.
    *
    * Defaults to **null**.
    */
    getStyles?: Function;
    /**
    * Position of the select menu.
    *
    * Defaults to **empty string**.
    */
    menuPosition?: string;
}

/**
* Select Portal component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {function} getStyles - Returns the styles of the component. Defaults to _null_.
 * @prop {string} menuPosition - Position of the select menu. Defaults to _empty string_.
*/
export const SelectPortal: React.FunctionComponent<SelectPortalProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectValueContainerProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Select Option component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectValueContainer: React.FunctionComponent<SelectValueContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SideSheetProps {
    /**
    * Set to false to stop Side Sheet from closing when scrim is clicked when the variant is modal.
    *
    * Defaults to **true**.
    */
    allowOutsideClick?: boolean;
    /**
    * Add classes to body for when side-sheet-container is not present in DOM.
    *
    * Defaults to **true**.
    */
    attachContainerClassesToBody?: boolean;
    /**
    * Primary content. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The text to be displayed along side the dismiss button in SideSheet.
    *
    * Defaults to **null**.
    */
    headlineText?: string;
    /**
    * Make the SideSheet visible using the experience set in variant prop.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Location of the side-sheet anchor point.
    *
    * Defaults to **'right'**.
    */
    position?: string;
    /**
    * DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing.
    *
    * Defaults to **'.lmnt-side-sheet-trigger'**.
    */
    returnFocusSelector?: string;
    /**
    * The behavior styles available to side sheet: one of modal, floating, elevated, or coplanar.
    *
    * Defaults to **'modal'**.
    */
    variant?: string;
    /**
    * A provided function to fire when Side Sheet becomes hidden.
    */
    onClose?: Function;
    /**
    * A provided function to fire when Side Sheet becomes visible.
    */
    onOpen?: Function;
}

/**
* Side sheets are surfaces containing supplementary content that are anchored to the left or right edge of the screen.
 * @prop {boolean} allowOutsideClick - Set to false to stop Side Sheet from closing when scrim is clicked when the variant is modal. Defaults to _true_.
 * @prop {boolean} attachContainerClassesToBody - Add classes to body for when side-sheet-container is not present in DOM. Defaults to _true_.
 * @prop {React.ReactNode} children - Primary content. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} headlineText - The text to be displayed along side the dismiss button in SideSheet. Defaults to _null_.
 * @prop {boolean} open - Make the SideSheet visible using the experience set in variant prop. Defaults to _false_.
 * @prop {string} position - Location of the side-sheet anchor point. Defaults to _'right'_.
 * @prop {string} returnFocusSelector - DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing. Defaults to _'.lmnt-side-sheet-trigger'_.
 * @prop {string} variant - The behavior styles available to side sheet: one of modal, floating, elevated, or coplanar. Defaults to _'modal'_.
 *  @event onClose - A provided function to fire when Side Sheet becomes hidden.
 *  @event onOpen - A provided function to fire when Side Sheet becomes visible.
*/
export const SideSheet: React.FunctionComponent<SideSheetProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SideSheetContainerProps {
    /**
    * Primary content. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * This prop is tied to the state of `SideSheet` and should be managed accordingly.
    *
    * Defaults to **false**.
    */
    isSideSheetVisible?: boolean;
    /**
    * The behavior styles available to side sheet: one of `modal` (with room to grow in the future).
    *
    * Defaults to **null**.
    */
    variant?: string;
}

/**
* SideSheetContainer is used to control SideSheet scrolling when `attachContainerClassesToBody` is set to false. It is intended to wrap the entire content of an application as the outer-most body tag.
 * @prop {React.ReactNode} children - Primary content. Accepts any valid markup. Defaults to _null_.
 * @prop {boolean} isSideSheetVisible - This prop is tied to the state of `SideSheet` and should be managed accordingly. Defaults to _false_.
 * @prop {string} variant - The behavior styles available to side sheet: one of `modal` (with room to grow in the future). Defaults to _null_.
*/
export const SideSheetContainer: React.FunctionComponent<SideSheetContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SideSheetWrapperProps {
    /**
    * Primary content. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The behavior styles available to side sheet: one of `elevated`, or `coplanar`.
    *
    * Defaults to **null**.
    */
    variant?: string;
}

/**
* SideSheetWrapper is required SideSheet elevated and coplaner and variants to work correctly. Wrap it around the main application content.
 * @prop {React.ReactNode} children - Primary content. Accepts any valid markup. Defaults to _null_.
 * @prop {string} variant - The behavior styles available to side sheet: one of `elevated`, or `coplanar`. Defaults to _null_.
*/
export const SideSheetWrapper: React.FunctionComponent<SideSheetWrapperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SliderProps {
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of the component being labeled for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * Set this input attribute to a string that makes the slider value understandable, e.g. 'Monday'.
    *
    * Defaults to **null**.
    */
    ariaValuetext?: string;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent user interaction.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Discrete sliders display a numeric value label when the slider control is focused, which allows a user to input an exact value.
    *
    * Defaults to **false**.
    */
    discrete?: boolean;
    /**
    * Display tracker markers with discrete slider only.
    *
    * Defaults to **false**.
    */
    displayMarkers?: boolean;
    /**
    * ID for html input. May be overwritten.
    *
    * Defaults to **null**.
    */
    id?: string;
    /**
    * Custom content to be displayed in the leading block container. See leadingBlockType for types supported. If a string is sent for a icon an Element Icon will be rendered
    *
    * Defaults to **null**.
    */
    leadingBlock?: React.ReactNode;
    /**
    * Props to be added to the leading block node. For example, if an input is chosen, this is where you should send the input value and you can send in variant: 'filled' to use a filled textfield.
    *
    * Defaults to **null**.
    */
    leadingBlockProps?: object;
    /**
    * Styles to be added to leading block div.
    *
    * Defaults to **null**.
    */
    leadingBlockStyle?: object;
    /**
    * The type of media that will render in the leading block.
    *
    * Defaults to **null**.
    */
    leadingBlockType?: string;
    /**
    * The maximum value a slider can have.
    *
    * Defaults to **100**.
    */
    max?: number;
    /**
    * The minimum value a slider can have.
    *
    * Defaults to **0**.
    */
    min?: number;
    /**
    * When using the range slider, this is the value of the minimum knob of the slider. The maximum value will use the standard value prop.
    *
    * Defaults to **'0'**.
    */
    minValue?: number | string | object;
    /**
    * Allows the slider to have two knobs to select a range value.
    *
    * Defaults to **false**.
    */
    range?: boolean;
    /**
    * Specifies the increments at which a slider value can be set. Can be any positive number.
    *
    * Defaults to **1**.
    */
    step?: number;
    /**
    * Slider color theme.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Custom content to be displayed in the trailing block container. See trailingBlockType for types supported. If a string is sent for icon an Element Icon will be rendered.
    *
    * Defaults to **null**.
    */
    trailingBlock?: React.ReactNode;
    /**
    * Props to be added to the trailing block node. For example, if an input is chosen, this is where you should send the input value and you can send in variant: 'filled' to use a filled textfield.
    *
    * Defaults to **null**.
    */
    trailingBlockProps?: object;
    /**
    * Styles to be added to trailing block div.
    *
    * Defaults to **null**.
    */
    trailingBlockStyle?: object;
    /**
    * The type of media that will render in the trailing block.
    *
    * Defaults to **null**.
    */
    trailingBlockType?: string;
    /**
    * The current value of the slider. If the slider is a range slider, it will be the max value of the slider.
    *
    * Defaults to **null**.
    */
    value?: number | string | object;
    /**
    * Fired when the slider is blurred after the value of slider changes.
    */
    onChange?: Function;
    /**
    * Fired whenever the value of slider changes.
    */
    onInput?: Function;
}

/**
* Sliders allow users to select a value from a range of values.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of the component being labeled for assistive technologies. Defaults to _null_.
 * @prop {string} ariaValuetext - Set this input attribute to a string that makes the slider value understandable, e.g. 'Monday'. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent user interaction. Defaults to _false_.
 * @prop {boolean} discrete - Discrete sliders display a numeric value label when the slider control is focused, which allows a user to input an exact value. Defaults to _false_.
 * @prop {boolean} displayMarkers - Display tracker markers with discrete slider only. Defaults to _false_.
 * @prop {string} id - ID for html input. May be overwritten. Defaults to _null_.
 * @prop {React.ReactNode} leadingBlock - Custom content to be displayed in the leading block container. See leadingBlockType for types supported. If a string is sent for a icon an Element Icon will be rendered Defaults to _null_.
 * @prop {object} leadingBlockProps - Props to be added to the leading block node. For example, if an input is chosen, this is where you should send the input value and you can send in variant: 'filled' to use a filled textfield. Defaults to _null_.
 * @prop {object} leadingBlockStyle - Styles to be added to leading block div. Defaults to _null_.
 * @prop {string} leadingBlockType - The type of media that will render in the leading block. Defaults to _null_.
 * @prop {number} max - The maximum value a slider can have. Defaults to _100_.
 * @prop {number} min - The minimum value a slider can have. Defaults to _0_.
 * @prop {number|string|object} minValue - When using the range slider, this is the value of the minimum knob of the slider. The maximum value will use the standard value prop. Defaults to _'0'_.
 * @prop {boolean} range - Allows the slider to have two knobs to select a range value. Defaults to _false_.
 * @prop {number} step - Specifies the increments at which a slider value can be set. Can be any positive number. Defaults to _1_.
 * @prop {string} themeColor - Slider color theme. Defaults to _'primary'_.
 * @prop {React.ReactNode} trailingBlock - Custom content to be displayed in the trailing block container. See trailingBlockType for types supported. If a string is sent for icon an Element Icon will be rendered. Defaults to _null_.
 * @prop {object} trailingBlockProps - Props to be added to the trailing block node. For example, if an input is chosen, this is where you should send the input value and you can send in variant: 'filled' to use a filled textfield. Defaults to _null_.
 * @prop {object} trailingBlockStyle - Styles to be added to trailing block div. Defaults to _null_.
 * @prop {string} trailingBlockType - The type of media that will render in the trailing block. Defaults to _null_.
 * @prop {number|string|object} value - The current value of the slider. If the slider is a range slider, it will be the max value of the slider. Defaults to _null_.
 *  @event onChange - Fired when the slider is blurred after the value of slider changes.
 *  @event onInput - Fired whenever the value of slider changes.
*/
export const Slider: React.FunctionComponent<SliderProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SnackbarProps {
    /**
    * Optional action button label. If set, an action button will be shown.
    *
    * Defaults to **null**.
    */
    actionLabel?: string;
    /**
    * Most commonly a string, but will accept any valid components or markup. If `label` and `children` are both set, `label` will take priority.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets whether the Snackbar closes when it is focused and the user presses the ESC key.
    *
    * Defaults to **true**.
    */
    closeOnEscape?: boolean;
    /**
    * Optional dismiss button label. If set, an button button will be shown.
    *
    * Defaults to **null**.
    */
    dismissLabel?: string;
    /**
    * The snackbar text. If `label` and `children` are both set, `label` will take priority.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Positions the Snackbar on the leading edge of the screen (left in LTR, right in RTL) instead of centered.
    *
    * Defaults to **false**.
    */
    leading?: boolean;
    /**
    * Indicates that the Snackbar is open and visible.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Positions the action button/icon below the label instead of alongside it.
    *
    * Defaults to **false**.
    */
    stacked?: boolean;
    /**
    * The time the snackbar will remain visible. The value must be between `4000` and `10000` or set to `-1` to disable the timeout.
    *
    * Defaults to **5000**.
    */
    timeout?: number;
    /**
    * Fired when the Snackbar action button is clicked.
    */
    onClick?: Function;
    /**
    * Fired when the Snackbar finishes its closing animation.
    */
    onClose?: Function;
    /**
    * Fired when the Snackbar begins it's closing animation.
    */
    onClosing?: Function;
    /**
    * Fired when the Snackbar finishes its opening animation.
    */
    onOpen?: Function;
    /**
    * Fired when the Snackbar begins it's opening animation.
    */
    onOpening?: Function;
}

/**
* Snackbars provide brief messages about app processes at the bottom of the screen. Snackbar works differently than Modal, the user must press tab to navigate to the Snackbar to focus on it.
 * @prop {string} actionLabel - Optional action button label. If set, an action button will be shown. Defaults to _null_.
 * @prop {React.ReactNode} children - Most commonly a string, but will accept any valid components or markup. If `label` and `children` are both set, `label` will take priority. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} closeOnEscape - Sets whether the Snackbar closes when it is focused and the user presses the ESC key. Defaults to _true_.
 * @prop {string} dismissLabel - Optional dismiss button label. If set, an button button will be shown. Defaults to _null_.
 * @prop {string} label - The snackbar text. If `label` and `children` are both set, `label` will take priority. Defaults to _null_.
 * @prop {boolean} leading - Positions the Snackbar on the leading edge of the screen (left in LTR, right in RTL) instead of centered. Defaults to _false_.
 * @prop {boolean} open - Indicates that the Snackbar is open and visible. Defaults to _false_.
 * @prop {boolean} stacked - Positions the action button/icon below the label instead of alongside it. Defaults to _false_.
 * @prop {number} timeout - The time the snackbar will remain visible. The value must be between `4000` and `10000` or set to `-1` to disable the timeout. Defaults to _5000_.
 *  @event onClick - Fired when the Snackbar action button is clicked.
 *  @event onClose - Fired when the Snackbar finishes its closing animation.
 *  @event onClosing - Fired when the Snackbar begins it's closing animation.
 *  @event onOpen - Fired when the Snackbar finishes its opening animation.
 *  @event onOpening - Fired when the Snackbar begins it's opening animation.
*/
export const Snackbar: React.FunctionComponent<SnackbarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Optionally override the global Stepper density. The step will be smaller with smaller icons.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Set this flag to have a step display incomplete or in error/danger while maintaining internal variant logic. It is commonly useful with form validation. This will only show when a linear Stepper has moved beyond the flagged step. For non-linear Steppers, it will always show if the flag is set except for the active step.
    *
    * Defaults to **undefined**.
    */
    errorState?: string;
    /**
    * A unique id used to associate the step with StepContent when using StepperContainer.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Secondary text for the given step.
    *
    * Defaults to **undefined**.
    */
    secondaryText?: React.ReactNode;
    /**
    * Optionally override the stepIndex. Normally, this is automatically calculated when using Stepper with a StepperContainer.
    *
    * Defaults to **undefined**.
    */
    stepIndex?: number;
    /**
    * Optionally override the default component of `button`. If using a tag other than `button` or `input`, keyboard events (such as onKeyUp) will need to be added for accessability compliance.
    *
    * Defaults to **'button'**.
    */
    tag?: string | React.ElementType;
    /**
    * Optional custom props to be passed to the TextBubble. See the Element TextBubble for more information.
    *
    * Defaults to **undefined**.
    */
    textBubbleProps?: object;
    /**
    * Optionally override the text for the TextBubble. This is normally managed by the parent Stepper.
    *
    * Defaults to **undefined**.
    */
    textBubbleText?: object;
    /**
    * Optionally override the TextBubble themeColor. This is normally managed by the parent Stepper.
    *
    * Defaults to **undefined**.
    */
    textBubbleThemeColor?: object;
    /**
    * Primary text for the given step.
    *
    * Defaults to **undefined**.
    */
    title?: React.ReactNode;
    /**
    * Optionally override the step variant - the step will ignore any internal variant logic. This is normally managed by the parent Stepper except for error/validation cases.
    *
    * Defaults to **undefined**.
    */
    variant?: string;
    /**
    * Fired when the step is clicked. Primarily used in non-linear mode.
    */
    onClick?: Function;
    /**
    * Fired when the step becomes visible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
    */
    onStepEnter?: Function;
    /**
    * Fired when the step becomes invisible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
    */
    onStepLeave?: Function;
}

/**
* An individual step in a multi-part Stepper component. Contains a title, text bubble, and optionally secondary text.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - Optionally override the global Stepper density. The step will be smaller with smaller icons. Defaults to _false_.
 * @prop {string} errorState - Set this flag to have a step display incomplete or in error/danger while maintaining internal variant logic. It is commonly useful with form validation. This will only show when a linear Stepper has moved beyond the flagged step. For non-linear Steppers, it will always show if the flag is set except for the active step. Defaults to _undefined_.
 * @prop {string} id - A unique id used to associate the step with StepContent when using StepperContainer. Defaults to _undefined_.
 * @prop {React.ReactNode} secondaryText - Secondary text for the given step. Defaults to _undefined_.
 * @prop {number} stepIndex - Optionally override the stepIndex. Normally, this is automatically calculated when using Stepper with a StepperContainer. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - Optionally override the default component of `button`. If using a tag other than `button` or `input`, keyboard events (such as onKeyUp) will need to be added for accessability compliance. Defaults to _'button'_.
 * @prop {object} textBubbleProps - Optional custom props to be passed to the TextBubble. See the Element TextBubble for more information. Defaults to _undefined_.
 * @prop {object} textBubbleText - Optionally override the text for the TextBubble. This is normally managed by the parent Stepper. Defaults to _undefined_.
 * @prop {object} textBubbleThemeColor - Optionally override the TextBubble themeColor. This is normally managed by the parent Stepper. Defaults to _undefined_.
 * @prop {React.ReactNode} title - Primary text for the given step. Defaults to _undefined_.
 * @prop {string} variant - Optionally override the step variant - the step will ignore any internal variant logic. This is normally managed by the parent Stepper except for error/validation cases. Defaults to _undefined_.
 *  @event onClick - Fired when the step is clicked. Primarily used in non-linear mode.
 *  @event onStepEnter - Fired when the step becomes visible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
 *  @event onStepLeave - Fired when the step becomes invisible. Note: the order of the parameters follows the Stepper convention of the step being entered followed by the step being left.
*/
export const Step: React.FunctionComponent<StepProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepButtonProps {
    /**
    * Additional props to be passed to the underlying button. See the Element Button documentation for more information.
    *
    * Defaults to **undefined**.
    */
    buttonProps?: object;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent user interaction with the button on the last step*. Can be used with form validation.
    *
    * Defaults to **false**.
    */
    confirmDisabled?: boolean;
    /**
    * Override the default button label of 'next' or 'prev'.
    *
    * Defaults to **undefined**.
    */
    customLabel?: React.ReactNode;
    /**
    * The type of button, next or previous. Will automatically become a confirm button on the last step
    *
    * Defaults to **'next'**.
    */
    direction?: string;
    /**
    * Prevent user interaction with the button. Can be used with form validation.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Hide the button using display:none instead of removing it from the dom. May be useful with animations.
    *
    * Defaults to **false**.
    */
    persistent?: boolean;
    /**
    * Optionally override the default component of Element Button (such as an IconButton).
    *
    * Defaults to **undefined**.
    */
    tag?: string | React.ElementType;
    /**
    * An optional custom event handler to be executed after internal events are complete.
    */
    onClick?: Function;
}

/**
* When used with StepperContainer and StepContent it will automatically update Stepper progress as well as show and hide the active step. A StepButton with a stepType of `next` will become a __Confirm__ label when the last Step is reached.
 * @prop {object} buttonProps - Additional props to be passed to the underlying button. See the Element Button documentation for more information. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} confirmDisabled - Prevent user interaction with the button on the last step*. Can be used with form validation. Defaults to _false_.
 * @prop {React.ReactNode} customLabel - Override the default button label of 'next' or 'prev'. Defaults to _undefined_.
 * @prop {string} direction - The type of button, next or previous. Will automatically become a confirm button on the last step Defaults to _'next'_.
 * @prop {boolean} disabled - Prevent user interaction with the button. Can be used with form validation. Defaults to _false_.
 * @prop {boolean} persistent - Hide the button using display:none instead of removing it from the dom. May be useful with animations. Defaults to _false_.
 * @prop {string|React.ElementType} tag - Optionally override the default component of Element Button (such as an IconButton). Defaults to _undefined_.
 *  @event onClick - An optional custom event handler to be executed after internal events are complete.
*/
export const StepButton: React.FunctionComponent<StepButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepContentProps {
    /**
    * Content to be rendered inside StepContent.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Disable the normal width of `600px` and apply a full-width style to fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Change the default padding. The StepContent will normally use standard padding.
    *
    * Defaults to **'standard'**.
    */
    padding?: string;
    /**
    * Hide the button using display:none instead of removing it from the dom. May be useful with animations.
    *
    * Defaults to **false**.
    */
    persistent?: boolean;
    /**
    * The id of the associated step.
    *
    * Defaults to **undefined**.
    */
    stepId: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
}

/**
* When used with StepperContainer and StepButtons it will automatically show and hide the active step.
 * @prop {React.ReactNode} children - Content to be rendered inside StepContent. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Disable the normal width of `600px` and apply a full-width style to fill it's container. Defaults to _false_.
 * @prop {string} padding - Change the default padding. The StepContent will normally use standard padding. Defaults to _'standard'_.
 * @prop {boolean} persistent - Hide the button using display:none instead of removing it from the dom. May be useful with animations. Defaults to _false_.
 * @prop {string} stepId - The id of the associated step. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
*/
export const StepContent: React.FunctionComponent<StepContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepDividerProps {
    /**
    * Optionally override automatic active tracking - only needed when managing Stepper state in the parent application. Will use the `primary` color when true and the `stroke` color when false. Only used with linear Steppers.
    *
    * Defaults to **undefined**.
    */
    active?: boolean;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Optional props to be passed to the underlying Element Divider component. See Divider documentation for more info.
    *
    * Defaults to **undefined**.
    */
    dividerProps?: object;
    /**
    * The step index immediately preceding the StepDivider. Used for calculating the active state with a linear Stepper.
    *
    * Defaults to **undefined**.
    */
    nearestStepIndex?: number;
}

/**
* A wrapper around Element Divider that customizes behavior for use within Stepper. Will be automatically created when using the `steps` prop with the Stepper component.
 * @prop {boolean} active - Optionally override automatic active tracking - only needed when managing Stepper state in the parent application. Will use the `primary` color when true and the `stroke` color when false. Only used with linear Steppers. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} dividerProps - Optional props to be passed to the underlying Element Divider component. See Divider documentation for more info. Defaults to _undefined_.
 * @prop {number} nearestStepIndex - The step index immediately preceding the StepDivider. Used for calculating the active state with a linear Stepper. Defaults to _undefined_.
*/
export const StepDivider: React.FunctionComponent<StepDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperProps {
    /**
    * Change the default border. The Stepper will normally have a bottom border in horizontal mode and a trailing border in vertical mode.
    *
    * Defaults to **'default'**.
    */
    border?: string;
    /**
    * Steps to be rendered inside the Stepper when managing Stepper state in a parent application. Not needed when using the `steps` prop.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The steps will be closer together with smaller icons.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Non-linear will allow the user to navigate steps in any order by making the individual steps clickable.
    *
    * Defaults to **false**.
    */
    nonLinear?: boolean;
    /**
    * Optionally override the current active step. Only used when tracking Stepper progress in the parent application.
    *
    * Defaults to **undefined**.
    */
    progress?: number;
    /**
    * Improves layout for right-to-left languages.
    *
    * Defaults to **false**.
    */
    rtl?: boolean;
    /**
    * An array of objects describing the steps to show. See readme for full schema.
    *
    * Defaults to **undefined**.
    */
    steps?: Array<object>;
    /**
    * By default StepButton will render a div, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * Stacks steps vertically.
    *
    * Defaults to **false**.
    */
    vertical?: boolean;
}

/**
* A multi-step container. Most commonly used full screen or in a modal.
 * @prop {string} border - Change the default border. The Stepper will normally have a bottom border in horizontal mode and a trailing border in vertical mode. Defaults to _'default'_.
 * @prop {React.ReactNode} children - Steps to be rendered inside the Stepper when managing Stepper state in a parent application. Not needed when using the `steps` prop. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - The steps will be closer together with smaller icons. Defaults to _false_.
 * @prop {boolean} nonLinear - Non-linear will allow the user to navigate steps in any order by making the individual steps clickable. Defaults to _false_.
 * @prop {number} progress - Optionally override the current active step. Only used when tracking Stepper progress in the parent application. Defaults to _undefined_.
 * @prop {boolean} rtl - Improves layout for right-to-left languages. Defaults to _false_.
 * @prop {[object]} steps - An array of objects describing the steps to show. See readme for full schema. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default StepButton will render a div, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
 * @prop {boolean} vertical - Stacks steps vertically. Defaults to _false_.
*/
export const Stepper: React.FunctionComponent<StepperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperButtonContainerProps {
    /**
    * Change the default border. The Stepper Button Container will normally have a top border.
    *
    * Defaults to **'default'**.
    */
    border?: string;
    /**
    * Content to be rendered inside StepContent.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Disable the normal width of `600px` and apply a  100% width style to fill it's container. Note, this is automatically enabled with vertical steppers.
    *
    * Defaults to **undefined**.
    */
    fullWidth?: boolean;
    /**
    * Change the default padding. The Stepper Button Container will normally use standard padding.
    *
    * Defaults to **'standard'**.
    */
    padding?: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
}

/**
* An optional container that adds the appropriate border and padding for button area in a stepper.
 * @prop {string} border - Change the default border. The Stepper Button Container will normally have a top border. Defaults to _'default'_.
 * @prop {React.ReactNode} children - Content to be rendered inside StepContent. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Disable the normal width of `600px` and apply a  100% width style to fill it's container. Note, this is automatically enabled with vertical steppers. Defaults to _undefined_.
 * @prop {string} padding - Change the default padding. The Stepper Button Container will normally use standard padding. Defaults to _'standard'_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
*/
export const StepperButtonContainer: React.FunctionComponent<StepperButtonContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperContainerProps {
    /**
    * The Stepper component to render.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * Fired when the confirm button is clicked.
    */
    onConfirm?: Function;
    /**
    * Using onStepChange is usually preferred as it catches non-linear step clicks. OnNext is fired only when the next button is clicked.
    */
    onNext?: Function;
    /**
    * Using onStepChange is usually preferred as it catches non-linear step clicks. OnPrev is fired only when the prev button is clicked.
    */
    onPrev?: Function;
    /**
    * An alternative to onNext and onPrev, onStepChange will fire when the progress is changed in any way. Note: this *does not* fire when the confirm button is clicked.
    */
    onStepChange?: Function;
}

/**
* An optional container that enables automatic step progress management using StepContent and StepButtons.
 * @prop {React.ReactNode} children - The Stepper component to render. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
 *  @event onConfirm - Fired when the confirm button is clicked.
 *  @event onNext - Using onStepChange is usually preferred as it catches non-linear step clicks. OnNext is fired only when the next button is clicked.
 *  @event onPrev - Using onStepChange is usually preferred as it catches non-linear step clicks. OnPrev is fired only when the prev button is clicked.
 *  @event onStepChange - An alternative to onNext and onPrev, onStepChange will fire when the progress is changed in any way. Note: this *does not* fire when the confirm button is clicked.
*/
export const StepperContainer: React.FunctionComponent<StepperContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperContentContainerProps {
    /**
    * Content to be rendered inside StepContent.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
}

/**
* An optional container used primarily with vertical Steppers.
 * @prop {React.ReactNode} children - Content to be rendered inside StepContent. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
*/
export const StepperContentContainer: React.FunctionComponent<StepperContentContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface StepperIndicatorProps {
    /**
    * The currently active step.
    *
    * Defaults to **1**.
    */
    activeStep?: number;
    /**
    * Total number of steps.
    *
    * Defaults to **1**.
    */
    totalSteps?: number;
}

/**
* StepperIndicator provides a visual indicator for which step is active in a multi-step process.
 * @prop {number} activeStep - The currently active step. Defaults to _1_.
 * @prop {number} totalSteps - Total number of steps. Defaults to _1_.
*/
export const StepperIndicator: React.FunctionComponent<StepperIndicatorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SwitchProps {
    /**
    * Aligns switch to the right of the label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * The current value of the switch.
    *
    * Defaults to **false**.
    */
    checked?: boolean;
    /**
    * @deprecated _Use `label` instead._
    *
    * Primary content of the switch. Expects a valid string. If `children` and `label` are both set, `label` will take priority.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the user from interacting with the control.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The label not be displayed, but will still be available to screen readers.
    *
    * Defaults to **false**.
    */
    hideLabel?: boolean;
    /**
    * The html id for the input.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Props to send to the html input
    *
    * Defaults to **undefined**.
    */
    inputProps?: object;
    /**
    * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
    *
    * Defaults to **'Off|On'**.
    */
    label: string;
    /**
    * Color of the switch according to the theme.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * When a switch button is checked, this value will be returned as the second parameter of the `change` handler.
    *
    * Defaults to **null**.
    */
    value?: string | number | boolean | object;
    /**
    * Fired when the control is clicked.
    */
    onChange?: Function;
}

/**
* The Switch is a simple selection control that can have an on and off state. Selection controls are found where users are asked to make decisions or declare preferences.
 * @prop {boolean} alignEnd - Aligns switch to the right of the label. Defaults to _false_.
 * @prop {boolean} checked - The current value of the switch. Defaults to _false_.
 * @prop {React.ReactNode} children - Deprecated: Use `label` instead. Primary content of the switch. Expects a valid string. If `children` and `label` are both set, `label` will take priority. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the control. Defaults to _false_.
 * @prop {boolean} hideLabel - The label not be displayed, but will still be available to screen readers. Defaults to _false_.
 * @prop {string} id - The html id for the input. Defaults to _undefined_.
 * @prop {object} inputProps - Props to send to the html input Defaults to _undefined_.
 * @prop {string} label - Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers. Defaults to _'Off|On'_.
 * @prop {string} themeColor - Color of the switch according to the theme. Defaults to _'primary'_.
 * @prop {string|number|boolean|object} value - When a switch button is checked, this value will be returned as the second parameter of the `change` handler. Defaults to _null_.
 *  @event onChange - Fired when the control is clicked.
*/
export const Switch: React.FunctionComponent<SwitchProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TabProps {
    /**
    * Indicates that the tab is active.
    *
    * Defaults to **undefined**.
    */
    active?: boolean;
    /**
    * The custom tab notification badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: string | Function | React.ReactNode;
    /**
    * The displayed content. Expects a valid string, though will accept any valid components or markup. If label and `children` are both set, `label` will take priority.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Indicates that the tab should shrink in size to be as narrow as possible without causing text to wrap.
    *
    * Defaults to **false**.
    */
    clustered?: boolean;
    /**
    * Add a leading icon to the tab.
    *
    * Defaults to **undefined**.
    */
    icon?: React.ReactNode;
    /**
    * An icon to be used as the tab indicator. Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). If no icon is provided the tab-indicator will use an underline.
    *
    * Defaults to **null**.
    */
    indicatorIcon?: string;
    /**
    * The tab-indicator will span the entire tab with 'full' or only the content of the tab with 'content'.
    *
    * Defaults to **'full'**.
    */
    indicatorSize?: string;
    /**
    * The tab-indicator will use a 'slide' or 'fade' transition between tabs.
    *
    * Defaults to **'slide'**.
    */
    indicatorTransition?: string;
    /**
    * The displayed text. Expects a valid string. If label and `children` are both set, `label` will take priority.
    *
    * Defaults to **null**.
    */
    label?: React.ReactNode;
    /**
    * Indicates that the tab icon and label should flow vertically instead of horizontally. If stacked is true the tab will not show a badge.  You can place the badge on the leading icon.
    *
    * Defaults to **false**.
    */
    stacked?: boolean;
}

/**
* An individual tab in a TabBar.
 * @prop {boolean} active - Indicates that the tab is active. Defaults to _undefined_.
 * @prop {string|function|React.ReactNode} badge - The custom tab notification badge to be rendered. Defaults to _undefined_.
 * @prop {React.ReactNode} children - The displayed content. Expects a valid string, though will accept any valid components or markup. If label and `children` are both set, `label` will take priority. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} clustered - Indicates that the tab should shrink in size to be as narrow as possible without causing text to wrap. Defaults to _false_.
 * @prop {React.ReactNode} icon - Add a leading icon to the tab. Defaults to _undefined_.
 * @prop {string} indicatorIcon - An icon to be used as the tab indicator. Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). If no icon is provided the tab-indicator will use an underline. Defaults to _null_.
 * @prop {string} indicatorSize - The tab-indicator will span the entire tab with 'full' or only the content of the tab with 'content'. Defaults to _'full'_.
 * @prop {string} indicatorTransition - The tab-indicator will use a 'slide' or 'fade' transition between tabs. Defaults to _'slide'_.
 * @prop {React.ReactNode} label - The displayed text. Expects a valid string. If label and `children` are both set, `label` will take priority. Defaults to _null_.
 * @prop {boolean} stacked - Indicates that the tab icon and label should flow vertically instead of horizontally. If stacked is true the tab will not show a badge.  You can place the badge on the leading icon. Defaults to _false_.
*/
export const Tab: React.FunctionComponent<TabProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TabBarProps {
    /**
    * Index of the currently active tab.
    *
    * Defaults to **0**.
    */
    activeTabIndex?: number;
    /**
    * Accepts one or more Tab components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Clustered tabs can be aligned to 'start', 'center', or 'end'. Requires one or more tabs to have clustered set to true.
    *
    * Defaults to **'start'**.
    */
    clusterAlign?: string;
    /**
    * Indicates that tabs should shrink in size to be as narrow as possible without causing text to wrap.
    *
    * Defaults to **false**.
    */
    clustered?: boolean;
    /**
    * Apply elevated styles to raise the tab-bar above standard content.
    *
    * Defaults to **false**.
    */
    elevated?: boolean;
    /**
    * @deprecated _Please use elevated instead._
    *
    *  Apply a raised style.
    *
    * Defaults to **undefined**.
    */
    raised?: boolean;
    /**
    * @deprecated _Deprecated, containers will scroll when necessary._
    *
    * Create a fixed height scrollable container.
    *
    * Defaults to **undefined**.
    */
    scrollable?: boolean;
    /**
    * Indicates that the tab icon and label should flow vertically instead of horizontally.
    *
    * Defaults to **false**.
    */
    stacked?: boolean;
    /**
    * Background theme color. Accepts one of 'primary', 'secondary', or 'surface'.
    *
    * Defaults to **'surface'**.
    */
    variant?: string;
    /**
    * Fires when switching to a different tab.
    */
    onTabActivated?: Function;
}

/**
* Tabs organize content across different screens, data sets, and other interactions. The Tab Bar contains the Tab Scroller and Tab components.
 * @prop {number} activeTabIndex - Index of the currently active tab. Defaults to _0_.
 * @prop {React.ReactNode} children - Accepts one or more Tab components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} clusterAlign - Clustered tabs can be aligned to 'start', 'center', or 'end'. Requires one or more tabs to have clustered set to true. Defaults to _'start'_.
 * @prop {boolean} clustered - Indicates that tabs should shrink in size to be as narrow as possible without causing text to wrap. Defaults to _false_.
 * @prop {boolean} elevated - Apply elevated styles to raise the tab-bar above standard content. Defaults to _false_.
 * @prop {boolean} raised - Deprecated: Please use elevated instead.  Apply a raised style. Defaults to _undefined_.
 * @prop {boolean} scrollable - Deprecated: Deprecated, containers will scroll when necessary. Create a fixed height scrollable container. Defaults to _undefined_.
 * @prop {boolean} stacked - Indicates that the tab icon and label should flow vertically instead of horizontally. Defaults to _false_.
 * @prop {string} variant - Background theme color. Accepts one of 'primary', 'secondary', or 'surface'. Defaults to _'surface'_.
 *  @event onTabActivated - Fires when switching to a different tab.
*/
export const TabBar: React.FunctionComponent<TabBarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TabIndicatorProps {
    /**
    * Visually activates the indicator.
    *
    * Defaults to **false**.
    */
    active?: boolean;
    /**
    * The tab-indicator will use an underline if no icon is provided.
    *
    * Defaults to **null**.
    */
    icon?: string;
    /**
    * The Tab Indicator will use a 'slide' or 'fade' transition between tabs.
    *
    * Defaults to **'slide'**.
    */
    transition?: string;
}

/**
* A Tab Indicator is a visual guide that shows which Tab is active.
 * @prop {boolean} active - Visually activates the indicator. Defaults to _false_.
 * @prop {string} icon - The tab-indicator will use an underline if no icon is provided. Defaults to _null_.
 * @prop {string} transition - The Tab Indicator will use a 'slide' or 'fade' transition between tabs. Defaults to _'slide'_.
*/
export const TabIndicator: React.FunctionComponent<TabIndicatorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TabScrollerProps {
    /**
    * Clustered tabs can be aligned to 'start', 'center', or 'end'.
    *
    * Defaults to **'start'**.
    */
    align?: string;
    /**
    * Accepts Tab components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A TabScroller allows for smooth native and animated scrolling of tabs. Used internally by TabBar.
 * @prop {string} align - Clustered tabs can be aligned to 'start', 'center', or 'end'. Defaults to _'start'_.
 * @prop {React.ReactNode} children - Accepts Tab components. Defaults to _null_.
*/
export const TabScroller: React.FunctionComponent<TabScrollerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Enable the user to toggle sortable columns between ascending, descending, and unsorted.
    *
    * Defaults to **false**.
    */
    canUnSort?: boolean;
    /**
    * Pass custom props directly to each TableCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(cellData)`.
    *
    * Defaults to **undefined**.
    */
    cellProps?: object | Function;
    /**
    * The composed table elements. Expects one each of TableHeader, TableBody.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Allow columns to be re-ordered using drag and drop headers. Note, this cannot be used with fixed columns.
    *
    * Defaults to **false**.
    */
    columnReordering?: boolean;
    /**
    * Apply a striped effect to columns.
    *
    * Defaults to **false**.
    */
    columnStriped?: boolean;
    /**
    * Array of objects describing the table columns, used in conjunction with `data` prop. **See README for the full column schema.**  **Note:** do not use `children` when using `data` and `columns`.
    *
    * Defaults to **[]**.
    */
    columns?: Array<object>;
    /**
    * Custom properties to be applied to the table container.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * Array of data. Must be used in conjunction with `columns`. **Note:** do not use `children` when using `data` and `columns`.
    *
    * Defaults to **null**.
    */
    data?: Array<object>;
    /**
    * An object to describe the the default column properties if none else are specified via data.
    *
    * Defaults to **null**.
    */
    defaultColumn?: object;
    /**
    * A more compact table with less padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Disable multi-column sorting.
    *
    * Defaults to **false**.
    */
    disableMultiSort?: boolean;
    /**
    * Indicates if the table supports expandable rows. See 'Expandable Rows' in the README for details.
    *
    * Defaults to **undefined**.
    */
    expandable?: boolean;
    /**
    * Used to render secondary content when used with `expandable`. Note: this is only shown when a row is expanded using a button using `row.getToggleRowExpandedProps()` or `row.getToggleAllRowsExpandedProps()`. See 'Expandable Rows' in the README for details.
    *
    * Defaults to **undefined**.
    */
    expandedRowTemplate?: Function;
    /**
    * On by default, setting this to false will remove the additional trailing border added to fixed columns. This should only be used where there is an alternate means of showing which columns are fixed, ie. background color or elevation.
    *
    * Defaults to **true**.
    */
    fixedColumnsBorder?: boolean;
    /**
    * The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Warning, `fixedHeader` requires a layout of `standard`.
    *
    * Defaults to **false**.
    */
    fixedHeader?: boolean;
    /**
    * Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    footerContent?: React.ReactNode;
    /**
    * The table will expand it's width to 100% of it's parent container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Pass custom props directly to each TableHeaderCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(column)`.
    *
    * Defaults to **undefined**.
    */
    headerCellProps?: object | Function;
    /**
    * Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    headerContent?: React.ReactNode;
    /**
    * The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table.
    *
    * Defaults to **false**.
    */
    headerDividerTall?: boolean;
    /**
    * Add a splash of color to the divider between the header and rows.
    *
    * Defaults to **null**.
    */
    headerDividerThemeColor?: string;
    /**
    * Pass custom props directly to each TableHeaderRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`.
    *
    * Defaults to **undefined**.
    */
    headerRowProps?: object | Function;
    /**
    * Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly.
    *
    * Defaults to **null**.
    */
    headerThemeColor?: string;
    /**
    * Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`. Note, must be a unit-less number (in pixels).
    *
    * Defaults to **null**.
    */
    height?: number;
    /**
    * An array of id's for columns to hide.
    *
    * Defaults to **undefined**.
    */
    hiddenColumns?: Array<string>;
    /**
    * Hides the horizontal scrollbar. Note: only use when alternative scrolling is offered.
    *
    * Defaults to **false**.
    */
    hideHorizontalScrollbar?: boolean;
    /**
    * All expandable/collapsible rows will be expanded when used with `expandable`.
    *
    * Defaults to **undefined**.
    */
    initiallyExpanded?: boolean;
    /**
    * The style of layout to use. Notes: In most cases the column width will default to 150px, with the exception of `standard`, which uses browser default table layout. Using `resizableColumns` or `columnReordering` will force layout to `block`. Using `virtualized` will use it's own layout technique. Fixed headers requires the `standard` layout. Warning: the default value will change to `standard` in v6.
    *
    * Defaults to **'block'**.
    */
    layout?: string;
    /**
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table.
    *
    * Defaults to **false**.
    */
    nested?: boolean;
    /**
    * Show the table header with the `noContentMessage` when there is no table content or data.
    *
    * Defaults to **false**.
    */
    noContentIncludeTable?: boolean;
    /**
    * The message to show when there is no table content or data.
    *
    * Defaults to **'There is no content available.'**.
    */
    noContentMessage?: string | Function | React.ReactNode;
    /**
    * Prevents hover highlighting effect on rows.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * Enable built-in pagination.
    *
    * Defaults to **false**.
    */
    paginated?: boolean;
    /**
    * Customize table behavior.
    *
    * Defaults to **null**.
    */
    plugins?: Array<object>;
    /**
    * Enable columns to be resized by the user.
    *
    * Defaults to **null**.
    */
    resizableColumns?: boolean;
    /**
    * When using `variableHeight` rowHeight must be specified as a function, otherwise the default row height of `50` should be used except in cases of custom CSS. The function will receive the rowIndex as a parameter.
    *
    * Defaults to **50**.
    */
    rowHeight?: number | Function;
    /**
    * Pass custom props directly to each TableRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`..
    *
    * Defaults to **undefined**.
    */
    rowProps?: object | Function;
    /**
    * Apply a stripped effect to the rows.
    *
    * Defaults to **null**.
    */
    rowStriped?: boolean;
    /**
    * Enable the sort indicator to be hidden until the header cell is hovered/activated.
    *
    * Defaults to **false**.
    */
    sortIndicatorOnHover?: boolean;
    /**
    * Enable built-in column sorting.
    *
    * Defaults to **false**.
    */
    sortable?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * @deprecated _Use `leadingContent` instead._
    *
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    topBar?: React.ReactNode;
    /**
    * Custom content to appear inside the table container directly below the actual table.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Used with virtualized tables with expandable rows that are of varying sizes or a different size than the original row.
    *
    * Defaults to **false**.
    */
    variableHeight?: boolean;
    /**
    * Enable virtualized rendering for high performance with large amounts of data.
    *
    * Defaults to **false**.
    */
    virtualized?: boolean;
    /**
    * Fixed width for the table. Required for a `layout` of `fixed`. Note, must be a unit-less number (in pixels).
    *
    * Defaults to **null**.
    */
    width?: number;
    /**
    * Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onStateChange?: Function;
    /**
    * Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onWidthChange?: Function;
}

/**
* The Table is an efficient way to display data in rows and columns.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {boolean} canUnSort - Enable the user to toggle sortable columns between ascending, descending, and unsorted. Defaults to _false_.
 * @prop {object|function} cellProps - Pass custom props directly to each TableCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(cellData)`. Defaults to _undefined_.
 * @prop {React.ReactNode} children - The composed table elements. Expects one each of TableHeader, TableBody. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} columnReordering - Allow columns to be re-ordered using drag and drop headers. Note, this cannot be used with fixed columns. Defaults to _false_.
 * @prop {boolean} columnStriped - Apply a striped effect to columns. Defaults to _false_.
 * @prop {[object]} columns - Array of objects describing the table columns, used in conjunction with `data` prop. **See README for the full column schema.**  **Note:** do not use `children` when using `data` and `columns`. Defaults to _[]_.
 * @prop {object} containerProps - Custom properties to be applied to the table container. Defaults to _null_.
 * @prop {[object]} data - Array of data. Must be used in conjunction with `columns`. **Note:** do not use `children` when using `data` and `columns`. Defaults to _null_.
 * @prop {object} defaultColumn - An object to describe the the default column properties if none else are specified via data. Defaults to _null_.
 * @prop {boolean} dense - A more compact table with less padding. Defaults to _false_.
 * @prop {boolean} disableMultiSort - Disable multi-column sorting. Defaults to _false_.
 * @prop {boolean} expandable - Indicates if the table supports expandable rows. See 'Expandable Rows' in the README for details. Defaults to _undefined_.
 * @prop {function} expandedRowTemplate - Used to render secondary content when used with `expandable`. Note: this is only shown when a row is expanded using a button using `row.getToggleRowExpandedProps()` or `row.getToggleAllRowsExpandedProps()`. See 'Expandable Rows' in the README for details. Defaults to _undefined_.
 * @prop {boolean} fixedColumnsBorder - On by default, setting this to false will remove the additional trailing border added to fixed columns. This should only be used where there is an alternate means of showing which columns are fixed, ie. background color or elevation. Defaults to _true_.
 * @prop {boolean} fixedHeader - The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Warning, `fixedHeader` requires a layout of `standard`. Defaults to _false_.
 * @prop {React.ReactNode} footerContent - Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} fullWidth - The table will expand it's width to 100% of it's parent container. Defaults to _false_.
 * @prop {object|function} headerCellProps - Pass custom props directly to each TableHeaderCell (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(column)`. Defaults to _undefined_.
 * @prop {React.ReactNode} headerContent - Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} headerDividerTall - The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table. Defaults to _false_.
 * @prop {string} headerDividerThemeColor - Add a splash of color to the divider between the header and rows. Defaults to _null_.
 * @prop {object|function} headerRowProps - Pass custom props directly to each TableHeaderRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`. Defaults to _undefined_.
 * @prop {string} headerThemeColor - Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly. Defaults to _null_.
 * @prop {number} height - Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`. Note, must be a unit-less number (in pixels). Defaults to _null_.
 * @prop {[string]} hiddenColumns - An array of id's for columns to hide. Defaults to _undefined_.
 * @prop {boolean} hideHorizontalScrollbar - Hides the horizontal scrollbar. Note: only use when alternative scrolling is offered. Defaults to _false_.
 * @prop {boolean} initiallyExpanded - All expandable/collapsible rows will be expanded when used with `expandable`. Defaults to _undefined_.
 * @prop {string} layout - The style of layout to use. Notes: In most cases the column width will default to 150px, with the exception of `standard`, which uses browser default table layout. Using `resizableColumns` or `columnReordering` will force layout to `block`. Using `virtualized` will use it's own layout technique. Fixed headers requires the `standard` layout. Warning: the default value will change to `standard` in v6. Defaults to _'block'_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {boolean} nested - Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table. Defaults to _false_.
 * @prop {boolean} noContentIncludeTable - Show the table header with the `noContentMessage` when there is no table content or data. Defaults to _false_.
 * @prop {string|function|React.ReactNode} noContentMessage - The message to show when there is no table content or data. Defaults to _'There is no content available.'_.
 * @prop {boolean} noHover - Prevents hover highlighting effect on rows. Defaults to _false_.
 * @prop {boolean} paginated - Enable built-in pagination. Defaults to _false_.
 * @prop {[object]} plugins - Customize table behavior. Defaults to _null_.
 * @prop {boolean} resizableColumns - Enable columns to be resized by the user. Defaults to _null_.
 * @prop {number|function} rowHeight - When using `variableHeight` rowHeight must be specified as a function, otherwise the default row height of `50` should be used except in cases of custom CSS. The function will receive the rowIndex as a parameter. Defaults to _50_.
 * @prop {object|function} rowProps - Pass custom props directly to each TableRow (generated & virtualized modes only). Can be either an object or a function that receives the following signature `(rowData, rowIndex)`.. Defaults to _undefined_.
 * @prop {boolean} rowStriped - Apply a stripped effect to the rows. Defaults to _null_.
 * @prop {boolean} sortIndicatorOnHover - Enable the sort indicator to be hidden until the header cell is hovered/activated. Defaults to _false_.
 * @prop {boolean} sortable - Enable built-in column sorting. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {React.ReactNode} topBar - Deprecated: Use `leadingContent` instead. Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear inside the table container directly below the actual table. Defaults to _null_.
 * @prop {boolean} variableHeight - Used with virtualized tables with expandable rows that are of varying sizes or a different size than the original row. Defaults to _false_.
 * @prop {boolean} virtualized - Enable virtualized rendering for high performance with large amounts of data. Defaults to _false_.
 * @prop {number} width - Fixed width for the table. Required for a `layout` of `fixed`. Note, must be a unit-less number (in pixels). Defaults to _null_.
 *  @event onStateChange - Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
 *  @event onWidthChange - Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
*/
export const Table: React.FunctionComponent<TableProps | Omit<React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>, 'data'>>;


export interface TableBaseProps {
    /**
    * Used by assistive technology, such as screen readers, to name the table for accessibility
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * The composed table elements. Expects one each of TableHeader, TableBody.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **null**.
    */
    className?: string;
    /**
    * Apply a striped effect to columns.
    *
    * Defaults to **false**.
    */
    columnStriped?: boolean;
    /**
    * Custom properties to be applied to the table container.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * A more compact table with less padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`.
    *
    * Defaults to **false**.
    */
    fixedHeader?: boolean;
    /**
    * The table will expand it's width to 100% of it's parent container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table.
    *
    * Defaults to **false**.
    */
    headerDividerTall?: boolean;
    /**
    * Add a splash of color to the divider between the header and rows.
    *
    * Defaults to **null**.
    */
    headerDividerThemeColor?: string;
    /**
    * Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly.
    *
    * Defaults to **null**.
    */
    headerThemeColor?: string;
    /**
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table.
    *
    * Defaults to **false**.
    */
    nested?: boolean;
    /**
    * undefined
    *
    * Defaults to **'No Content'**.
    */
    noContentMessage?: string;
    /**
    * Prevents hover highlighting effect on rows.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * Apply a stripped effect to the rows.
    *
    * Defaults to **null**.
    */
    rowStriped?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Custom content to appear inside the table container directly below the actual table.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Enable virtualized rendering of the row.
    *
    * Defaults to **false**.
    */
    virtualized?: boolean;
    /**
    * Fixed width for the table. Required for `layout` of `fixed`.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* The Table is an efficient way to display data in rows and columns.
 * @prop {string} ariaLabel - Used by assistive technology, such as screen readers, to name the table for accessibility Defaults to _null_.
 * @prop {React.ReactNode} children - The composed table elements. Expects one each of TableHeader, TableBody. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _null_.
 * @prop {boolean} columnStriped - Apply a striped effect to columns. Defaults to _false_.
 * @prop {object} containerProps - Custom properties to be applied to the table container. Defaults to _null_.
 * @prop {boolean} dense - A more compact table with less padding. Defaults to _false_.
 * @prop {boolean} fixedHeader - The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Defaults to _false_.
 * @prop {boolean} fullWidth - The table will expand it's width to 100% of it's parent container. Defaults to _false_.
 * @prop {boolean} headerDividerTall - The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table. Defaults to _false_.
 * @prop {string} headerDividerThemeColor - Add a splash of color to the divider between the header and rows. Defaults to _null_.
 * @prop {string} headerThemeColor - Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly. Defaults to _null_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {boolean} nested - Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table. Defaults to _false_.
 * @prop {string} noContentMessage - undefined Defaults to _'No Content'_.
 * @prop {boolean} noHover - Prevents hover highlighting effect on rows. Defaults to _false_.
 * @prop {boolean} rowStriped - Apply a stripped effect to the rows. Defaults to _null_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear inside the table container directly below the actual table. Defaults to _null_.
 * @prop {boolean} virtualized - Enable virtualized rendering of the row. Defaults to _false_.
 * @prop {number} width - Fixed width for the table. Required for `layout` of `fixed`. Defaults to _null_.
*/
export const TableBase: React.FunctionComponent<TableBaseProps & React.HTMLProps<HTMLElement> & React.DOMAttributes<HTMLElement>>;


export interface TableBodyProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fixed width for table body.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* Contains the TableRows.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {number} width - Fixed width for table body. Defaults to _null_.
*/
export const TableBody: React.FunctionComponent<TableBodyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableBuilderProps {
    /**
    * Used by assistive technology, such as screen readers, to name the table for accessibility
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Allow columns to be re-ordered using drag and drop headers.
    *
    * Defaults to **false**.
    */
    columnReordering?: boolean;
    /**
    * Apply a striped effect to columns.
    *
    * Defaults to **false**.
    */
    columnStriped?: boolean;
    /**
    * Array of objects describing the table columns, used in conjunction with `data` prop. Note: do not use children with data and columns, they will control the markup, when used.
    *
    * Defaults to **[]**.
    */
    columns?: Array<object>;
    /**
    * Custom properties to be applied to the table container.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * Array of data Only necessary, used in conjunction with `columns` prop. Note: do not use children with data and columns, they will control the markup, when used.
    *
    * Defaults to **null**.
    */
    data?: Array<object>;
    /**
    * An object to describe the the default column properties if none else are specified via data.
    *
    * Defaults to **null**.
    */
    defaultColumn?: object;
    /**
    * A more compact table with less padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`.
    *
    * Defaults to **false**.
    */
    fixedHeader?: boolean;
    /**
    * Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    footerContent?: React.ReactNode;
    /**
    * The table will expand it's width to 100% of it's parent container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells`
    *
    * Defaults to **null**.
    */
    headerContent?: React.ReactNode;
    /**
    * The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table.
    *
    * Defaults to **false**.
    */
    headerDividerTall?: boolean;
    /**
    * Add a splash of color to the divider between the header and rows.
    *
    * Defaults to **null**.
    */
    headerDividerThemeColor?: string;
    /**
    * Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly.
    *
    * Defaults to **null**.
    */
    headerThemeColor?: string;
    /**
    * Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`.
    *
    * Defaults to **null**.
    */
    height?: number;
    /**
    * The layout approach the table will use.
    *
    * Defaults to **'block'**.
    */
    layout?: string;
    /**
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table.
    *
    * Defaults to **false**.
    */
    nested?: boolean;
    /**
    * undefined
    *
    * Defaults to **'No Content'**.
    */
    noContentMessage?: string;
    /**
    * Prevents hover highlighting effect on rows.
    *
    * Defaults to **false**.
    */
    noHover?: boolean;
    /**
    * undefined
    *
    * Defaults to **false**.
    */
    paginated?: boolean;
    /**
    * Customize table behavior.
    *
    * Defaults to **null**.
    */
    plugins?: Array<object>;
    /**
    * Enable columns to be resized by the user.
    *
    * Defaults to **null**.
    */
    resizableColumns?: boolean;
    /**
    * Apply a stripped effect to the rows.
    *
    * Defaults to **null**.
    */
    rowStriped?: boolean;
    /**
    * Enable column sorting.
    *
    * Defaults to **false**.
    */
    sortable?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * @deprecated _Use `leadingContent` instead._
    *
    * Custom content to appear inside the table container directly above the actual table.
    *
    * Defaults to **null**.
    */
    topBar?: React.ReactNode;
    /**
    * Custom content to appear inside the table container directly below the actual table.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Enable virtualized rendering of the row.
    *
    * Defaults to **false**.
    */
    virtualized?: boolean;
    /**
    * Fixed width for the table. Required for `layout` of `fixed`.
    *
    * Defaults to **null**.
    */
    width?: number;
    /**
    * Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onStateChange: Function;
    /**
    * Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
    */
    onWidthChange: Function;
}

/**
* Automatically generates a table based on data and columns.
 * @prop {string} ariaLabel - Used by assistive technology, such as screen readers, to name the table for accessibility Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} columnReordering - Allow columns to be re-ordered using drag and drop headers. Defaults to _false_.
 * @prop {boolean} columnStriped - Apply a striped effect to columns. Defaults to _false_.
 * @prop {[object]} columns - Array of objects describing the table columns, used in conjunction with `data` prop. Note: do not use children with data and columns, they will control the markup, when used. Defaults to _[]_.
 * @prop {object} containerProps - Custom properties to be applied to the table container. Defaults to _null_.
 * @prop {[object]} data - Array of data Only necessary, used in conjunction with `columns` prop. Note: do not use children with data and columns, they will control the markup, when used. Defaults to _null_.
 * @prop {object} defaultColumn - An object to describe the the default column properties if none else are specified via data. Defaults to _null_.
 * @prop {boolean} dense - A more compact table with less padding. Defaults to _false_.
 * @prop {boolean} fixedHeader - The header row will remain fixed on-screen, while the body may scroll under it. This will automatically be applied when `virtualized` is `true`. Defaults to _false_.
 * @prop {React.ReactNode} footerContent - Content to appear at the bottom of the table. Expects a `TableFooter` component with one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} fullWidth - The table will expand it's width to 100% of it's parent container. Defaults to _false_.
 * @prop {React.ReactNode} headerContent - Content to appear at the top of the table. Expects a `TableHeader` component with  one or more `TableRows` and `TableCells` or `TableHeaderCells` Defaults to _null_.
 * @prop {boolean} headerDividerTall - The divider between the header and rows will be taller. Used in conjunction with `headerDividerThemeColor` to add a splash of color to a table. Defaults to _false_.
 * @prop {string} headerDividerThemeColor - Add a splash of color to the divider between the header and rows. Defaults to _null_.
 * @prop {string} headerThemeColor - Enabled the header of the card to use a surface color, similar to the colored header on a `Card` component. Should be used sparingly. Defaults to _null_.
 * @prop {number} height - Fixed height of the table. Required when `layout` is `fixed`, `virtualized` is `true` or `fixedHeader` is `true`. Defaults to _null_.
 * @prop {string} layout - The layout approach the table will use. Defaults to _'block'_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {boolean} nested - Removes certain margins and paddings for better appearance when nesting tables. Used on the child (nested) table. Defaults to _false_.
 * @prop {string} noContentMessage - undefined Defaults to _'No Content'_.
 * @prop {boolean} noHover - Prevents hover highlighting effect on rows. Defaults to _false_.
 * @prop {boolean} paginated - undefined Defaults to _false_.
 * @prop {[object]} plugins - Customize table behavior. Defaults to _null_.
 * @prop {boolean} resizableColumns - Enable columns to be resized by the user. Defaults to _null_.
 * @prop {boolean} rowStriped - Apply a stripped effect to the rows. Defaults to _null_.
 * @prop {boolean} sortable - Enable column sorting. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {React.ReactNode} topBar - Deprecated: Use `leadingContent` instead. Custom content to appear inside the table container directly above the actual table. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear inside the table container directly below the actual table. Defaults to _null_.
 * @prop {boolean} virtualized - Enable virtualized rendering of the row. Defaults to _false_.
 * @prop {number} width - Fixed width for the table. Required for `layout` of `fixed`. Defaults to _null_.
 *  @event onStateChange - Event that is fired when table data has been updated, such as when a column is dragged and dropped. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
 *  @event onWidthChange - Event that is fired when table width has been changed, either by the browser window or other layout changes. Warning, this only fires when using `data` and `columns` props. It does not work when directly composing Table components.
*/
export const TableBuilder: React.FunctionComponent<TableBuilderProps & React.HTMLProps<HTMLElement> & React.DOMAttributes<HTMLElement>>;


export interface TableCellProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * @deprecated _This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility._
    *
    * Enabled a custom background color.
    *
    * Defaults to **undefined**.
    */
    backgroundColor?: string;
    /**
    * React-Table cell object.
    *
    * Defaults to **null**.
    */
    cell?: object;
    /**
    * Mostly commonly a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The cell may span multiple columns. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized).
    *
    * Defaults to **null**.
    */
    colSpan?: number;
    /**
    * Override the default rendering of the cell.
    *
    * Defaults to **null**.
    */
    customRenderer?: Function;
    /**
    * Used for sticky columns.
    *
    * Defaults to **undefined**.
    */
    fixed?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The table's layout value, used internally.
    *
    * Defaults to **empty string**.
    */
    layout?: string;
    /**
    * Removes certain margins and paddings for better appearance when nesting tables. Used on the parent cell of the nested table.
    *
    * Defaults to **false**.
    */
    nestable?: boolean;
    /**
    * The cell may span multiple rows. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized).
    *
    * Defaults to **null**.
    */
    rowSpan?: number;
}

/**
* Individual column cell in a TableRow.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {string} backgroundColor - Deprecated: This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility. Enabled a custom background color. Defaults to _undefined_.
 * @prop {object} cell - React-Table cell object. Defaults to _null_.
 * @prop {React.ReactNode} children - Mostly commonly a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} colSpan - The cell may span multiple columns. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized). Defaults to _null_.
 * @prop {function} customRenderer - Override the default rendering of the cell. Defaults to _null_.
 * @prop {boolean} fixed - Used for sticky columns. Defaults to _undefined_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string} layout - The table's layout value, used internally. Defaults to _empty string_.
 * @prop {boolean} nestable - Removes certain margins and paddings for better appearance when nesting tables. Used on the parent cell of the nested table. Defaults to _false_.
 * @prop {number} rowSpan - The cell may span multiple rows. Note: Only supported in composed tables (ie tables that do not have columns/data and are not virtualized). Defaults to _null_.
*/
export const TableCell: React.FunctionComponent<TableCellProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableFooterProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fixed width for table body.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* TableFooter contains the content at the bottom of the table.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {number} width - Fixed width for table body. Defaults to _null_.
*/
export const TableFooter: React.FunctionComponent<TableFooterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableHeaderProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fixed width for table body.
    *
    * Defaults to **null**.
    */
    width?: number;
}

/**
* TableHeader contains the header rows.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {number} width - Fixed width for table body. Defaults to _null_.
*/
export const TableHeader: React.FunctionComponent<TableHeaderProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableHeaderCellProps {
    /**
    * Optional custom formatter function for `TableHeaderCell` actions.
    *
    * Defaults to **null**.
    */
    actionsRenderer?: Function;
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * @deprecated _This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility._
    *
    * Custom background color.
    *
    * Defaults to **undefined**.
    */
    backgroundColor?: string;
    /**
    * Mostly commonly a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * React-Table column object.
    *
    * Defaults to **null**.
    */
    column?: object;
    /**
    * Custom index to be passed to the actionsRenderer.
    *
    * Defaults to **undefined**.
    */
    columnIndex?: number;
    /**
    * Used to trigger drag-and-drop functionality.
    *
    * Defaults to **null**.
    */
    columnReordering?: boolean;
    /**
    * Override the default rendering of the cell.
    *
    * Defaults to **null**.
    */
    customRenderer?: Function;
    /**
    * Used for sticky columns.
    *
    * Defaults to **undefined**.
    */
    fixed?: boolean;
    /**
    * Required for column reordering.
    *
    * Defaults to **null**.
    */
    id?: string;
    /**
    * The table's layout value, used internally.
    *
    * Defaults to **empty string**.
    */
    layout?: string;
    /**
    * Enabled resizable column indicator.
    *
    * Defaults to **null**.
    */
    resizableColumns?: boolean;
    /**
    * Enables the sort indicator to be hidden when the mouse is not hovering.
    *
    * Defaults to **null**.
    */
    sortIndicatorOnHover?: boolean;
    /**
    * Will enable sorting events and apply a sortable indicator to the column.
    *
    * Defaults to **false**.
    */
    sortable?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Fired with the user clicks on the cell.
    */
    onClick?: Function;
}

/**
* Individual column cell in a TableHeaderRow.
 * @prop {function} actionsRenderer - Optional custom formatter function for `TableHeaderCell` actions. Defaults to _null_.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {string} backgroundColor - Deprecated: This prop has been deprecated in favor of `cellProps` in the column schema (see README), which offers more flexibility. Custom background color. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Mostly commonly a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} column - React-Table column object. Defaults to _null_.
 * @prop {number} columnIndex - Custom index to be passed to the actionsRenderer. Defaults to _undefined_.
 * @prop {boolean} columnReordering - Used to trigger drag-and-drop functionality. Defaults to _null_.
 * @prop {function} customRenderer - Override the default rendering of the cell. Defaults to _null_.
 * @prop {boolean} fixed - Used for sticky columns. Defaults to _undefined_.
 * @prop {string} id - Required for column reordering. Defaults to _null_.
 * @prop {string} layout - The table's layout value, used internally. Defaults to _empty string_.
 * @prop {boolean} resizableColumns - Enabled resizable column indicator. Defaults to _null_.
 * @prop {boolean} sortIndicatorOnHover - Enables the sort indicator to be hidden when the mouse is not hovering. Defaults to _null_.
 * @prop {boolean} sortable - Will enable sorting events and apply a sortable indicator to the column. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 *  @event onClick - Fired with the user clicks on the cell.
*/
export const TableHeaderCell: React.FunctionComponent<TableHeaderCellProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableHeaderRowProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* TableHeader contains the header cells.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const TableHeaderRow: React.FunctionComponent<TableHeaderRowProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableNoContentProps {
    /**
    * Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Wraps the output in a table row and cell. For use within a table.
    *
    * Defaults to **false**.
    */
    includeTableMarkup?: boolean;
}

/**
* Contains the *no content* message.
 * @prop {React.ReactNode} children - Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} includeTableMarkup - Wraps the output in a table row and cell. For use within a table. Defaults to _false_.
*/
export const TableNoContent: React.FunctionComponent<TableNoContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableRowProps {
    /**
    * The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`.
    *
    * Defaults to **false**.
    */
    alwaysUseDivTags?: boolean;
    /**
    * Expects one or more `TableRow` components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* A container for TableCell components.
 * @prop {boolean} alwaysUseDivTags - The table will always use div tags instead of standard table tags. Note, disabled when using `layout='standard'`. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects one or more `TableRow` components. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const TableRow: React.FunctionComponent<TableRowProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableSortIndicatorProps {
    /**
    * React-Table column object.
    *
    * Defaults to **null**.
    */
    column?: object;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
}

/**
* A visual indicator of the sort direction of a column.
 * @prop {object} column - React-Table column object. Defaults to _null_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
*/
export const TableSortIndicator: React.FunctionComponent<TableSortIndicatorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableTopBarProps {
    /**
    * Expects a component such as a button or search bar, but will accept any valid markup.
    *
    * Defaults to **null**.
    */
    actions?: React.ReactNode;
    /**
    * Expects a FilterBar component, but will accept any valid markup.
    *
    * Defaults to **null**.
    */
    filterBar?: React.ReactNode;
    /**
    * @deprecated _May be removed pending further review._
    *
    * Adds additional emphasis and padding.
    *
    * Defaults to **undefined**.
    */
    prominent?: boolean;
    /**
    * Can be used to add a title to the table.
    *
    * Defaults to **null**.
    */
    title?: string;
}

/**
* A container meant to go above the table. Has several built in options.
 * @prop {React.ReactNode} actions - Expects a component such as a button or search bar, but will accept any valid markup. Defaults to _null_.
 * @prop {React.ReactNode} filterBar - Expects a FilterBar component, but will accept any valid markup. Defaults to _null_.
 * @prop {boolean} prominent - Deprecated: May be removed pending further review. Adds additional emphasis and padding. Defaults to _undefined_.
 * @prop {string} title - Can be used to add a title to the table. Defaults to _null_.
*/
export const TableTopBar: React.FunctionComponent<TableTopBarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TableVerticalResizeHandleProps {
    /**
    * The composed table elements. Expects one each of TableHeader, TableBody.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * React-Table column object.
    *
    * Defaults to **null**.
    */
    column?: object;
}

/**
* A visual indicator of for the grabble area to resize a column.
 * @prop {React.ReactNode} children - The composed table elements. Expects one each of TableHeader, TableBody. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {object} column - React-Table column object. Defaults to _null_.
*/
export const TableVerticalResizeHandle: React.FunctionComponent<TableVerticalResizeHandleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TextBubbleProps {
    /**
    * Make the bubble smaller.
    *
    * Defaults to **'default'**.
    */
    bubbleSize?: string;
    /**
    * Optionally override the default component of `div`.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * Content for the bubble, should be 1 character
    *
    * Defaults to **null**.
    */
    text?: React.ReactNode;
    /**
    * Color of the badge.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * The style of the TextBubble.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
}

/**
* Text in a bubble.
 * @prop {string} bubbleSize - Make the bubble smaller. Defaults to _'default'_.
 * @prop {string|React.ElementType} tag - Optionally override the default component of `div`. Defaults to _'div'_.
 * @prop {React.ReactNode} text - Content for the bubble, should be 1 character Defaults to _null_.
 * @prop {string} themeColor - Color of the badge. Defaults to _'primary'_.
 * @prop {string} variant - The style of the TextBubble. Defaults to _'filled'_.
*/
export const TextBubble: React.FunctionComponent<TextBubbleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TextfieldProps {
    /**
    * @deprecated _Use `fullWidth` instead._
    *
    * Applies a full-width style where the Textfield will fill its container.
    *
    * Defaults to **undefined**.
    */
    block?: boolean;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _See `containerProps`._
    *
    * Add a custom class to the `Textfield` container.
    *
    * Defaults to **undefined**.
    */
    containerClass?: string;
    /**
    * Properties to be added to the container of the textfield.
    *
    * Defaults to **undefined**.
    */
    containerProps?: object;
    /**
    * Enables a character count. _Warning_ requires `maxlength` to be set.
    *
    * Defaults to **false**.
    */
    counter?: boolean;
    /**
    * The starting value of the Textfield when working in uncontrolled mode.
    *
    * Defaults to **undefined**.
    */
    defaultValue?: string | number;
    /**
    * The size of the Textfield will be reduced.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Textfield will be disabled.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * @deprecated _Use `variant='embedded'_
    *
    * An unfilled, non-outlined and full-width variant of Textfield, intended to be embedded in other components such as TopAppBar or TableHeader.
    *
    * Defaults to **undefined**.
    */
    embedded?: boolean;
    /**
    * @deprecated _Use variant='filled' instead._
    *
    * Apply filled style to the Textfield. Previously called primary.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Sets the Textfield to the focused state.
    *
    * Defaults to **false**.
    */
    focused?: boolean;
    /**
    * The Textfield will expand to 100% width.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Helper text to be displayed below Textfield, by default only visible on focus.
    *
    * Defaults to **null**.
    */
    helperText?: React.ReactNode;
    /**
    * Randomly generated id for the helper text container element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    helperTextId?: string;
    /**
    * Set the helper text to be permanently visible.
    *
    * Defaults to **false**.
    */
    helperTextPersistent?: boolean;
    /**
    * Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear red when `valid` is set to 'false').
    *
    * Defaults to **false**.
    */
    helperTextValidation?: boolean;
    /**
    * Randomly generated id for the input element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Floating input label. Note: full-width Textfields do not support floating labels - any label on a full-width Textfield will be automatically mapped to a placeholder.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Randomly generated id for the label element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    labelId?: string;
    /**
    * Custom content to appear before the input.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Adds the given Icon or Icon Button to the left of the Textfield. Expects the name of a valid Material.io icon, however in React an icon or icon button component may be passed in instead for more control,
    *
    * Defaults to **null**.
    */
    leadingIcon?: string | React.ReactNode;
    /**
    * @deprecated _Use `maxlength` instead. The case of this prop has changed to be more consistent._
    *
    * Restricts the number of characters that can be entered, best used with counter.
    *
    * Defaults to **undefined**.
    */
    maxLength?: number;
    /**
    * Restricts the number of characters that can be entered, best used with counter.
    *
    * Defaults to **null**.
    */
    maxlength?: number;
    /**
    * Prevents resizing when using `textarea`.
    *
    * Defaults to **true**.
    */
    noResize?: boolean;
    /**
    * @deprecated _Use `variant='outlined'` instead_
    *
    * Apply outlined style to the Textfield. Previously called secondary.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * Non-floating label text, will be replaced when the user starts typing.
    *
    * Defaults to **null**.
    */
    placeholder?: string;
    /**
    * Text that will appear before the label or value of the Textfield. It will be shown on focus. An example use-case might be a currency symbol such as `$`. _Warning:_ This cannot be used with `leadingIcon` or `textarea`.
    *
    * Defaults to **null**.
    */
    prefixText?: string;
    /**
    * @deprecated _This feature is no longer supported. Use `variant='filled'` instead._
    *
    * Enable filled styling.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * @deprecated _Use `variant='embedded'`_
    *
    * Enabled search bar styling, including a full width style.
    *
    * Defaults to **undefined**.
    */
    search?: boolean;
    /**
    * @deprecated _Use `variant='outlined'` instead._
    *
    * Apply secondary style to the Textfield.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * Text that will appear after the label or value of the Textfield. It will be shown on focus. An example use-case might be `.00` if handling currency. _Warning:_ This cannot be used with `trailingIcon` or `textarea`.
    *
    * Defaults to **null**.
    */
    suffixText?: string;
    /**
    * Enabled multi-line text input. _Note_ `textarea` cannot be used with the embedded variant.
    *
    * Defaults to **false**.
    */
    textarea?: boolean;
    /**
    * If defined, a Tooltip will appear on the Textfield. Useful to show the full value, if the value is too long for the Textfield width. The object should be the needed Tooltip properties. Tooltip `text` prop will be set to the current value of the Textfield.  See Tooltip docs for available props.
    *
    * Defaults to **null**.
    */
    tooltip?: boolean | object;
    /**
    * Custom content to appear after the input.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Adds the given Icon or Icon Button  to the right of the Textfield . Expects the name of a valid Material.io icon, however in React an icon icon button component may be passed in instead for more control.
    *
    * Defaults to **null**.
    */
    trailingIcon?: string | React.ReactNode;
    /**
    * Support for built-in input types. Browser support for some advanced types such as color or date may be limited or appear differently between browsers. _Note_  the `Datepicker` component should be preferred over the built-in date/time types as it offers more consistency and features._Note_ Slider type is not support, please use the Element `Slider` component instead.
    *
    * Defaults to **'text'**.
    */
    type?: string;
    /**
    * Applies an invalid style to the Textfield.
    *
    * Defaults to **true**.
    */
    valid?: boolean;
    /**
    * The current value of the Textfield component.
    *
    * Defaults to **undefined**.
    */
    value?: string | number;
    /**
    * Applies the selected styling to the Textfield. _Note_ `textarea` does not support the `embedded` variant.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when focus leaves the input.
    */
    onBlur?: Function;
    /**
    * Fired when each character is entered into the Textfield.
    */
    onChange?: Function;
    /**
    * Fired when the input gains focus.
    */
    onFocus?: Function;
}

/**
* Text fields let users enter and edit text into a UI.
 * @prop {boolean} block - Deprecated: Use `fullWidth` instead. Applies a full-width style where the Textfield will fill its container. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} containerClass - Deprecated: See `containerProps`. Add a custom class to the `Textfield` container. Defaults to _undefined_.
 * @prop {object} containerProps - Properties to be added to the container of the textfield. Defaults to _undefined_.
 * @prop {boolean} counter - Enables a character count. _Warning_ requires `maxlength` to be set. Defaults to _false_.
 * @prop {string | number} defaultValue - The starting value of the Textfield when working in uncontrolled mode. Defaults to _undefined_.
 * @prop {boolean} dense - The size of the Textfield will be reduced. Defaults to _false_.
 * @prop {boolean} disabled - Textfield will be disabled. Defaults to _false_.
 * @prop {boolean} embedded - Deprecated: Use `variant='embedded' An unfilled, non-outlined and full-width variant of Textfield, intended to be embedded in other components such as TopAppBar or TableHeader. Defaults to _undefined_.
 * @prop {boolean} filled - Deprecated: Use variant='filled' instead. Apply filled style to the Textfield. Previously called primary. Defaults to _undefined_.
 * @prop {boolean} focused - Sets the Textfield to the focused state. Defaults to _false_.
 * @prop {boolean} fullWidth - The Textfield will expand to 100% width. Defaults to _false_.
 * @prop {React.ReactNode} helperText - Helper text to be displayed below Textfield, by default only visible on focus. Defaults to _null_.
 * @prop {string} helperTextId - Randomly generated id for the helper text container element. May be overwritten. Defaults to _undefined_.
 * @prop {boolean} helperTextPersistent - Set the helper text to be permanently visible. Defaults to _false_.
 * @prop {boolean} helperTextValidation - Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear red when `valid` is set to 'false'). Defaults to _false_.
 * @prop {string} id - Randomly generated id for the input element. May be overwritten. Defaults to _undefined_.
 * @prop {string} label - Floating input label. Note: full-width Textfields do not support floating labels - any label on a full-width Textfield will be automatically mapped to a placeholder. Defaults to _null_.
 * @prop {string} labelId - Randomly generated id for the label element. May be overwritten. Defaults to _undefined_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear before the input. Defaults to _null_.
 * @prop {string|React.ReactNode} leadingIcon - Adds the given Icon or Icon Button to the left of the Textfield. Expects the name of a valid Material.io icon, however in React an icon or icon button component may be passed in instead for more control, Defaults to _null_.
 * @prop {number} maxLength - Deprecated: Use `maxlength` instead. The case of this prop has changed to be more consistent. Restricts the number of characters that can be entered, best used with counter. Defaults to _undefined_.
 * @prop {number} maxlength - Restricts the number of characters that can be entered, best used with counter. Defaults to _null_.
 * @prop {boolean} noResize - Prevents resizing when using `textarea`. Defaults to _true_.
 * @prop {boolean} outlined - Deprecated: Use `variant='outlined'` instead Apply outlined style to the Textfield. Previously called secondary. Defaults to _undefined_.
 * @prop {string} placeholder - Non-floating label text, will be replaced when the user starts typing. Defaults to _null_.
 * @prop {string} prefixText - Text that will appear before the label or value of the Textfield. It will be shown on focus. An example use-case might be a currency symbol such as `$`. _Warning:_ This cannot be used with `leadingIcon` or `textarea`. Defaults to _null_.
 * @prop {boolean} primary - Deprecated: This feature is no longer supported. Use `variant='filled'` instead. Enable filled styling. Defaults to _undefined_.
 * @prop {boolean} search - Deprecated: Use `variant='embedded'` Enabled search bar styling, including a full width style. Defaults to _undefined_.
 * @prop {boolean} secondary - Deprecated: Use `variant='outlined'` instead. Apply secondary style to the Textfield. Defaults to _undefined_.
 * @prop {string} suffixText - Text that will appear after the label or value of the Textfield. It will be shown on focus. An example use-case might be `.00` if handling currency. _Warning:_ This cannot be used with `trailingIcon` or `textarea`. Defaults to _null_.
 * @prop {boolean} textarea - Enabled multi-line text input. _Note_ `textarea` cannot be used with the embedded variant. Defaults to _false_.
 * @prop {boolean|object} tooltip - If defined, a Tooltip will appear on the Textfield. Useful to show the full value, if the value is too long for the Textfield width. The object should be the needed Tooltip properties. Tooltip `text` prop will be set to the current value of the Textfield.  See Tooltip docs for available props. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear after the input. Defaults to _null_.
 * @prop {string|React.ReactNode} trailingIcon - Adds the given Icon or Icon Button  to the right of the Textfield . Expects the name of a valid Material.io icon, however in React an icon icon button component may be passed in instead for more control. Defaults to _null_.
 * @prop {string} type - Support for built-in input types. Browser support for some advanced types such as color or date may be limited or appear differently between browsers. _Note_  the `Datepicker` component should be preferred over the built-in date/time types as it offers more consistency and features._Note_ Slider type is not support, please use the Element `Slider` component instead. Defaults to _'text'_.
 * @prop {boolean} valid - Applies an invalid style to the Textfield. Defaults to _true_.
 * @prop {string | number} value - The current value of the Textfield component. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected styling to the Textfield. _Note_ `textarea` does not support the `embedded` variant. Defaults to _'filled'_.
 *  @event onBlur - Fired when focus leaves the input.
 *  @event onChange - Fired when each character is entered into the Textfield.
 *  @event onFocus - Fired when the input gains focus.
*/
export const Textfield: React.FunctionComponent<TextfieldProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TooltipProps {
    /**
    * Accepts any valid markup. This will be rendered before any value set with the `text` prop. For most use-cases use `text`.
    *
    * Defaults to **undefined**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Container display type, inline or block.
    *
    * Defaults to **'inline'**.
    */
    containerType?: string;
    /**
    * Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell.
    *
    * Defaults to **false**.
    */
    hoisted?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * Position of tooltip. Options include: 'top', 'left', 'right', and 'bottom'(default). 
    *
    * Defaults to **'bottom'**.
    */
    position?: string;
    /**
    * string
    *
    * Defaults to **null**.
    */
    text: string | Function | React.ReactNode;
    /**
    * Custom properties to apply to the hovering element.
    *
    * Defaults to **null**.
    */
    tooltipProps?: object;
    /**
    * Custom properties to apply to the trigger element.
    *
    * Defaults to **null**.
    */
    triggerProps?: object;
    /**
    * Fired when the trigger is interacted with.
    */
    onClick?: Function;
}

/**
* Tooltip adds additional context about a component. To trigger the tooltip content, hover or focus on the child component such as a button or an icon that is passed into the tooltip component.
 * @prop {React.ReactNode} children - Accepts any valid markup. This will be rendered before any value set with the `text` prop. For most use-cases use `text`. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} containerType - Container display type, inline or block. Defaults to _'inline'_.
 * @prop {boolean} hoisted - Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {string} position - Position of tooltip. Options include: 'top', 'left', 'right', and 'bottom'(default).  Defaults to _'bottom'_.
 * @prop {string|function|React.ReactNode} text - string Defaults to _null_.
 * @prop {object} tooltipProps - Custom properties to apply to the hovering element. Defaults to _null_.
 * @prop {object} triggerProps - Custom properties to apply to the trigger element. Defaults to _null_.
 *  @event onClick - Fired when the trigger is interacted with.
*/
export const Tooltip: React.FunctionComponent<TooltipProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TooltipTextProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell.
    *
    * Defaults to **false**.
    */
    hoisted?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **'document.body'**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * The text to be rendered inside of the Tooltip.
    *
    * Defaults to **null**.
    */
    text: string | Function | React.ReactNode;
}

/**
* A container to display the Tooltip text.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} hoisted - Whether or not the tooltip is hoisted to render outside of the parent element. Useful for when the tooltip needs to render in a parent with `overflow: hidden` ie. a table cell. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the children will render in. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _'document.body'_.
 * @prop {string|function|React.ReactNode} text - The text to be rendered inside of the Tooltip. Defaults to _null_.
*/
export const TooltipText: React.FunctionComponent<TooltipTextProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ActionItemProps {
    /**
    * The custom action notification badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: string | Function | React.ReactNode;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons).
    *
    * Defaults to **null**.
    */
    icon?: string;
    /**
    * ARIA label value to support screen readers.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Type of action item to be rendered.
    *
    * Defaults to **'icon'**.
    */
    type?: string;
}

/**
* ActionItems are a special type of IconButton meant for use with TopAppBar `actions`.
 * @prop {string|function|React.ReactNode} badge - The custom action notification badge to be rendered. Defaults to _undefined_.
 * @prop {string} icon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). Defaults to _null_.
 * @prop {string} label - ARIA label value to support screen readers. Defaults to _null_.
 * @prop {string} type - Type of action item to be rendered. Defaults to _'icon'_.
*/
export const ActionItem: React.FunctionComponent<ActionItemProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TopAppBarProps {
    /**
    * Expects one or more ActionItems, will accept any valid components or markup.
    *
    * Defaults to **null**.
    */
    actions?: React.ReactNode;
    /**
    * Content to be rendered in the center of TopAppBar. Accepts any valid markup. Cannot be used with Title and Subtitle.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The top app bar will styled contextually and displaying `contextualActions`. A top app bar can transform into a contextual top app bar to provide contextual actions to selected items. For example, if a photo is selected, phot editing actions can be displayed.
    *
    * Defaults to **false**.
    */
    contextual?: boolean;
    /**
    * Visual theme of the contextual background, dark or light
    *
    * Defaults to **'dark'**.
    */
    contextualTheme?: string;
    /**
    * The TopAppBar will have reduced padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Whether or not the top app bar is elevated. By default it will be elevated on scroll only.
    *
    * Defaults to **false**.
    */
    elevated?: boolean;
    /**
    * The TopAppBar will remain on screen.
    *
    * Defaults to **true**.
    */
    fixed?: boolean;
    /**
    * Optional logo. Expects an image but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    logo?: React.ReactNode;
    /**
    * Size of the logo. Use `small` for 40x40, `medium` for 80x40, `large` for 130x40 images and `lgSquare` for 48x48.
    *
    * Defaults to **'small'**.
    */
    logoSize?: string;
    /**
    * Optionally wrap both the logo and title content. This is intended for situations where a combined clickable logo & title would be used to go to the home/root of a website or application. Note: any interaction styling and accessibility concerns need to be handled by the wrapper itself (which is recommended for accessibility).
    *
    * Defaults to **undefined**.
    */
    logoTitleWrapper?: React.ReactNode | Function;
    /**
    * Navigation icon to trigger a menu. Expects an IconButton but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    navigation?: React.ReactNode;
    /**
    * The TopAppBar will have increased padding.
    *
    * Defaults to **false**.
    */
    prominent?: boolean;
    /**
    * Tabs to be displayed in the lower slot of the top app bar. If this props is present the prominent props is automatically applied. If the actions prop is tabs actions will be ignored. Expects Element Tabs, but accepts any valid components or markup.
    *
    * Defaults to **null**.
    */
    prominentTabs?: React.ReactNode;
    /**
    * Set a custom scroll target for the top app bar, defaults to window.
    *
    * Defaults to **'window'**.
    */
    scrollTarget?: React.ReactNode | string;
    /**
    * Subtitle text for the Top App Bar. Cannot be used with children.
    *
    * Defaults to **null**.
    */
    subtitle?: string | React.ReactNode;
    /**
    * Indicates whether the actions are tabs. Only necessary if not using Element Tabs. Will apply styles automatically for Element Tabs. Custom CSS may be necessary if not using Element Tabs.
    *
    * Defaults to **false**.
    */
    tabActions?: boolean;
    /**
    * Background theme color. Accepts one of 'primary', 'secondary', or 'surface'.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Title text for the Top App Bar. Cannot be used with children.
    *
    * Defaults to **null**.
    */
    title?: string | React.ReactNode;
    /**
    * If true the top app bar's content will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useContentMaxWidth?: boolean;
    /**
    * Fired when navigation icon is clicked.
    */
    onNavigation?: Function;
}

/**
* The top application bar display information and actions relating to the current screen. It can contain branding, screen titles, navigation, and actions.
 * @prop {React.ReactNode} actions - Expects one or more ActionItems, will accept any valid components or markup. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered in the center of TopAppBar. Accepts any valid markup. Cannot be used with Title and Subtitle. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} contextual - The top app bar will styled contextually and displaying `contextualActions`. A top app bar can transform into a contextual top app bar to provide contextual actions to selected items. For example, if a photo is selected, phot editing actions can be displayed. Defaults to _false_.
 * @prop {string} contextualTheme - Visual theme of the contextual background, dark or light Defaults to _'dark'_.
 * @prop {boolean} dense - The TopAppBar will have reduced padding. Defaults to _false_.
 * @prop {boolean} elevated - Whether or not the top app bar is elevated. By default it will be elevated on scroll only. Defaults to _false_.
 * @prop {boolean} fixed - The TopAppBar will remain on screen. Defaults to _true_.
 * @prop {React.ReactNode} logo - Optional logo. Expects an image but accepts any valid markup. Defaults to _null_.
 * @prop {string} logoSize - Size of the logo. Use `small` for 40x40, `medium` for 80x40, `large` for 130x40 images and `lgSquare` for 48x48. Defaults to _'small'_.
 * @prop {React.ReactNode|function} logoTitleWrapper - Optionally wrap both the logo and title content. This is intended for situations where a combined clickable logo & title would be used to go to the home/root of a website or application. Note: any interaction styling and accessibility concerns need to be handled by the wrapper itself (which is recommended for accessibility). Defaults to _undefined_.
 * @prop {React.ReactNode} navigation - Navigation icon to trigger a menu. Expects an IconButton but accepts any valid markup. Defaults to _null_.
 * @prop {boolean} prominent - The TopAppBar will have increased padding. Defaults to _false_.
 * @prop {React.ReactNode} prominentTabs - Tabs to be displayed in the lower slot of the top app bar. If this props is present the prominent props is automatically applied. If the actions prop is tabs actions will be ignored. Expects Element Tabs, but accepts any valid components or markup. Defaults to _null_.
 * @prop {React.ReactNode|string} scrollTarget - Set a custom scroll target for the top app bar, defaults to window. Defaults to _'window'_.
 * @prop {string|React.ReactNode} subtitle - Subtitle text for the Top App Bar. Cannot be used with children. Defaults to _null_.
 * @prop {boolean} tabActions - Indicates whether the actions are tabs. Only necessary if not using Element Tabs. Will apply styles automatically for Element Tabs. Custom CSS may be necessary if not using Element Tabs. Defaults to _false_.
 * @prop {string} themeColor - Background theme color. Accepts one of 'primary', 'secondary', or 'surface'. Defaults to _'primary'_.
 * @prop {string|React.ReactNode} title - Title text for the Top App Bar. Cannot be used with children. Defaults to _null_.
 * @prop {boolean} useContentMaxWidth - If true the top app bar's content will have a max width according to your theme's breakpoints. Defaults to _false_.
 *  @event onNavigation - Fired when navigation icon is clicked.
*/
export const TopAppBar: React.FunctionComponent<TopAppBarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TopAppBarContentWrapperProps {
    /**
    * Content to be rendered inside the TopAppBar. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* Top App Bar Content Wrapper is used to wrap the content of the top app bar when `useContentMaxWidth` is true.
 * @prop {React.ReactNode} children - Content to be rendered inside the TopAppBar. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const TopAppBarContentWrapper: React.FunctionComponent<TopAppBarContentWrapperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TopAppBarFixedAdjustProps {
    /**
    * Apply the adjusted left margin.
    *
    * Defaults to **false**.
    */
    bannerOpen?: boolean;
    /**
    * Content to be rendered inside the TopAppBar. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Set to the same value as in TopAppBar to have the correct spacing.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Set to the same value as in TopAppBar to have the correct spacing.
    *
    * Defaults to **false**.
    */
    prominent?: boolean;
    /**
    * Base component/tag that will be rendered.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * If true the content will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useContentMaxWidth?: boolean;
}

/**
* A container to correctly position content when using a fixed TopAppBar.
 * @prop {boolean} bannerOpen - Apply the adjusted left margin. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered inside the TopAppBar. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - Set to the same value as in TopAppBar to have the correct spacing. Defaults to _false_.
 * @prop {boolean} prominent - Set to the same value as in TopAppBar to have the correct spacing. Defaults to _false_.
 * @prop {string|React.ElementType|React.Component} tag - Base component/tag that will be rendered. Defaults to _'div'_.
 * @prop {boolean} useContentMaxWidth - If true the content will have a max width according to your theme's breakpoints. Defaults to _false_.
*/
export const TopAppBarFixedAdjust: React.FunctionComponent<TopAppBarFixedAdjustProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoBodyProps {
    /**
    * If true the typography will be bold.
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body. Acceptable values range from 1 - 2. Higher levels produce smaller type.
    *
    * Defaults to **1**.
    */
    level?: number;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies body copy typographic style.
 * @prop {boolean} bold - If true the typography will be bold. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} level - Sets font properties for body. Acceptable values range from 1 - 2. Higher levels produce smaller type. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoBody: React.FunctionComponent<TypoBodyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoButtonProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies button typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoButton: React.FunctionComponent<TypoButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoCaptionProps {
    /**
    * If true the typography will be bold.
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies caption typographic style.
 * @prop {boolean} bold - If true the typography will be bold. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoCaption: React.FunctionComponent<TypoCaptionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoDisplayProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type.
    *
    * Defaults to **1**.
    */
    level?: number | string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies display typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number|string} level - Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoDisplay: React.FunctionComponent<TypoDisplayProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoHeadlineProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type.
    *
    * Defaults to **1**.
    */
    level?: number | string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* 
 *@deprecated Use TypoDisplay instead
Applies headline typographic style. (DEPRECATED)
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number|string} level - Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoHeadline: React.FunctionComponent<TypoHeadlineProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoLinkProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'a'**.
    */
    tag?: string | React.ElementType | React.Component;
}

/**
* Applies link typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'a'_.
*/
export const TypoLink: React.FunctionComponent<TypoLinkProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoOverlineProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies an overline typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoOverline: React.FunctionComponent<TypoOverlineProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoSubtitleProps {
    /**
    * If true the typography will be bold.
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body.
    *
    * Defaults to **1**.
    */
    level?: number;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies subtitle typographic style.
 * @prop {boolean} bold - If true the typography will be bold. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} level - Sets font properties for body. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoSubtitle: React.FunctionComponent<TypoSubtitleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypographyProps {
    /**
    * If true the typography will be bold. Applies to 1body, body2, caption, subtitle1, subtitle2
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography. Does not apply to Link.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
    /**
    * Sets typography class for the element.
    *
    * Defaults to **'body1'**.
    */
    type?: string;
}

/**
* The Typography component is meant for use in styling type, so the underlying markup is made from a <span> to produce valid markup in the largest number of situations. See TypoBody, TypoButton, TypoHeadline, TypoOverline, and TypoSubtitle.
 * @prop {boolean} bold - If true the typography will be bold. Applies to 1body, body2, caption, subtitle1, subtitle2 Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Does not apply to Link. Defaults to _undefined_.
 * @prop {string} type - Sets typography class for the element. Defaults to _'body1'_.
*/
export const Typography: React.FunctionComponent<TypographyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
