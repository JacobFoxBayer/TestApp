import React from 'react';


export interface SelectProps {
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of the component being labeled for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * Label for the Cancel button on the multi-select label.
    *
    * Defaults to **'Cancel'**.
    */
    cancelLabel?: string;
    /**
    * Name of the key for category name in options.
    *
    * Defaults to **'categoryName'**.
    */
    categoryNameKey?: string;
    /**
    * Name of the key for category value in options.
    *
    * Defaults to **'categoryValue'**.
    */
    categoryValueKey?: string;
    /**
    * Expects one or more SelectOption components. Options should not be used with children. If both are sent children will be ignored.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * If true select is clearable.
    *
    * Defaults to **false**.
    */
    clearable?: boolean;
    /**
    * Label for the Confirm button on the multi-select label.
    *
    * Defaults to **'Confirm'**.
    */
    confirmLabel?: string;
    /**
    * Custom properties to be passed to the react-select instance.
    *
    * Defaults to **null**.
    */
    containerProps?: object;
    /**
    * The menu will be visible by default.
    *
    * Defaults to **false**.
    */
    defaultOpen?: boolean;
    /**
    * Styles the select in a more compact format. When used with filled an external label must be used. Dense is not recommended when using as a multi select and `multiDisplayType` is set to pills.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Prevents the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Custom configuration for the select filter.
    *
    * Defaults to **{ 'ignoreCase': true, 'ignoreAccents': true, 'matchFrom': 'any', 'stringify': option => `${option.label} ${option.value}`, 'trim': true }**.
    */
    filterConfig?: object;
    /**
    * Custom filter function.
    *
    * Defaults to **undefined**.
    */
    filterFunction?: Function;
    /**
    * If true the select input will remain the same height even if rendered selections exceed the max height.
    *
    * Defaults to **false**.
    */
    fixedHeightInput?: boolean;
    /**
    * Name of the key for group name in options.
    *
    * Defaults to **'groupName'**.
    */
    groupNameKey?: string;
    /**
    * Name of the key for group value in options.
    *
    * Defaults to **'groupValue'**.
    */
    groupValueKey?: string;
    /**
    * Helper text to be displayed below Select, by default only visible on focus.
    *
    * Defaults to **null**.
    */
    helperText?: string;
    /**
    * Randomly generated id for the helper text container element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    helperTextId?: string;
    /**
    * Set the helper text to be permanently visible.
    *
    * Defaults to **false**.
    */
    helperTextPersistent?: boolean;
    /**
    * Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear the current theme's danger color when `valid` is set to 'false').
    *
    * Defaults to **false**.
    */
    helperTextValidation?: boolean;
    /**
    * Remove the selection option(s) from the list.
    *
    * Defaults to **false**.
    */
    hideSelectedOptions?: boolean;
    /**
    * Whether or not the menu is hoisted to render outside of the parent element. Useful for when the select needs to render in a parent with `overflow: hidden`.
    *
    * Defaults to **false**.
    */
    hoisted?: boolean;
    /**
    * Overwrite the default, randomly generated id. Each must be unique.
    *
    * Defaults to **null**.
    */
    id?: string;
    /**
    * @deprecated _Renamed to `clearable` for consistency._
    *
    * If true select is clearable.
    *
    * Defaults to **undefined**.
    */
    isClearable?: boolean;
    /**
    * @deprecated _Renamed to `multiSelect` for consistency._
    *
    * If true select is a multi-select.
    *
    * Defaults to **undefined**.
    */
    isMulti?: boolean;
    /**
    * The placeholder/floating display label.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons).
    *
    * Defaults to **null**.
    */
    leadingIcon?: string | React.ReactNode;
    /**
    * Max height the menu may take up. If using groups, we recommend adding a menu max height.
    *
    * Defaults to **undefined**.
    */
    menuMaxHeight?: string;
    /**
    * How value is displayed if select is a multiselect.
    *
    * Defaults to **'pills'**.
    */
    multiDisplayType?: string;
    /**
    * Enable multi-selection mode. Note, row highlighting is disabled when using multi-select.
    *
    * Defaults to **false**.
    */
    multiSelect?: boolean;
    /**
    * Name to be added to hidden html input.
    *
    * Defaults to **null**.
    */
    name?: string;
    /**
    * Message to show if no options are available.
    *
    * Defaults to **'No options'**.
    */
    noOptionsMessage?: string | React.ReactNode;
    /**
    * The menu will always be visible.
    *
    * Defaults to **undefined**.
    */
    open?: boolean;
    /**
    * (??) When using multi-select mode the menu items will show a switch to show all options or only selected.
    *
    * Defaults to **'Show only selected options'**.
    */
    optionFilterLabel?: string;
    /**
    * Options for select. See README for schema architecture. Options should not be used with children. If both are sent children will be ignored.
    *
    * Defaults to **null**.
    */
    options?: Array<object> | Array<string> | Array<number>;
    /**
    * The DOM element the menu should render in if `hoisted` is set to true. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`.
    *
    * Defaults to **undefined**.
    */
    portalContainer?: string | React.ReactNode;
    /**
    * When in multi-select mode a confirmation will be required before the onChange will be called.
    *
    * Defaults to **false**.
    */
    requireConfirmation?: boolean;
    /**
    * Whether or not the input is required. Can be used for validation purposes.
    *
    * Defaults to **false**.
    */
    required?: boolean;
    /**
    * Enable autocomplete behavior.
    *
    * Defaults to **false**.
    */
    searchable?: boolean;
    /**
    * Label for the Select All checkbox.
    *
    * Defaults to **'Select All Options'**.
    */
    selectAllLabel?: string;
    /**
    * When using a multi-select list the items will have checkboxes to indicate selection. If false, options will not have a checkbox, and selected options will be removed from the list.
    *
    * Defaults to **true**.
    */
    showCheckboxOptions?: boolean;
    /**
    * When using a multi-select mode the menu will include a switch to show all options or only selected.
    *
    * Defaults to **true**.
    */
    showOptionFilter?: boolean;
    /**
    * Shows a checkbox to select all options.
    *
    * Defaults to **true**.
    */
    showSelectAll?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Prevent console warning when value is not found in the options list.
    *
    * Defaults to **false**.
    */
    suppressInvalidOptionWarning?: boolean;
    /**
    * Name of the key for the text in options.
    *
    * Defaults to **'text'**.
    */
    textKey?: string;
    /**
    * Color of the select based on the theme.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * If defined, a Tooltip will appear on the Select input. Useful to show the full value, if selected value is too long for the Select width. The object should be the needed Tooltip properties. Tooltip `text`prop will be set to the current selected value of the Select.  See Tooltip docs for available props.
    *
    * Defaults to **null**.
    */
    tooltip?: object;
    /**
    * Whether or not the selected value is valid. Can be used for validation purposes.
    *
    * Defaults to **null**.
    */
    valid?: boolean;
    /**
    * The value of the select.
    *
    * Defaults to **undefined**.
    */
    value?: Array<object> | object | string | number;
    /**
    * @deprecated _Renamed to `multiDisplayType` for clarity._
    *
    * How value is displayed if select is a multiselect.
    *
    * Defaults to **undefined**.
    */
    valueDisplay?: string;
    /**
    * Name of the key for the value in options.
    *
    * Defaults to **'value'**.
    */
    valueKey?: string;
    /**
    * Applies the selected style to the select input.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when the Select looses focus.
    */
    onBlur?: Function;
    /**
    * Fired when value of the selected option is changed.
    */
    onChange?: Function;
    /**
    * Fired when the Select gains focus.
    */
    onFocus?: Function;
    /**
    * Fired when the select is searchable and a user changes the search term.
    */
    onInputChange?: Function;
}

/**
* Select provides a single-option select menu.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of the component being labeled for assistive technologies. Defaults to _null_.
 * @prop {string} cancelLabel - Label for the Cancel button on the multi-select label. Defaults to _'Cancel'_.
 * @prop {string} categoryNameKey - Name of the key for category name in options. Defaults to _'categoryName'_.
 * @prop {string} categoryValueKey - Name of the key for category value in options. Defaults to _'categoryValue'_.
 * @prop {React.ReactNode} children - Expects one or more SelectOption components. Options should not be used with children. If both are sent children will be ignored. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} clearable - If true select is clearable. Defaults to _false_.
 * @prop {string} confirmLabel - Label for the Confirm button on the multi-select label. Defaults to _'Confirm'_.
 * @prop {object} containerProps - Custom properties to be passed to the react-select instance. Defaults to _null_.
 * @prop {boolean} defaultOpen - The menu will be visible by default. Defaults to _false_.
 * @prop {boolean} dense - Styles the select in a more compact format. When used with filled an external label must be used. Dense is not recommended when using as a multi select and `multiDisplayType` is set to pills. Defaults to _false_.
 * @prop {boolean} disabled - Prevents the user from interacting with the component. Defaults to _false_.
 * @prop {object} filterConfig - Custom configuration for the select filter. Defaults to _{ 'ignoreCase': true, 'ignoreAccents': true, 'matchFrom': 'any', 'stringify': option => `${option.label} ${option.value}`, 'trim': true }_.
 * @prop {function} filterFunction - Custom filter function. Defaults to _undefined_.
 * @prop {boolean} fixedHeightInput - If true the select input will remain the same height even if rendered selections exceed the max height. Defaults to _false_.
 * @prop {string} groupNameKey - Name of the key for group name in options. Defaults to _'groupName'_.
 * @prop {string} groupValueKey - Name of the key for group value in options. Defaults to _'groupValue'_.
 * @prop {string} helperText - Helper text to be displayed below Select, by default only visible on focus. Defaults to _null_.
 * @prop {string} helperTextId - Randomly generated id for the helper text container element. May be overwritten. Defaults to _undefined_.
 * @prop {boolean} helperTextPersistent - Set the helper text to be permanently visible. Defaults to _false_.
 * @prop {boolean} helperTextValidation - Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear the current theme's danger color when `valid` is set to 'false'). Defaults to _false_.
 * @prop {boolean} hideSelectedOptions - Remove the selection option(s) from the list. Defaults to _false_.
 * @prop {boolean} hoisted - Whether or not the menu is hoisted to render outside of the parent element. Useful for when the select needs to render in a parent with `overflow: hidden`. Defaults to _false_.
 * @prop {string} id - Overwrite the default, randomly generated id. Each must be unique. Defaults to _null_.
 * @prop {boolean} isClearable - Deprecated: Renamed to `clearable` for consistency. If true select is clearable. Defaults to _undefined_.
 * @prop {boolean} isMulti - Deprecated: Renamed to `multiSelect` for consistency. If true select is a multi-select. Defaults to _undefined_.
 * @prop {string} label - The placeholder/floating display label. Defaults to _null_.
 * @prop {string|React.ReactNode} leadingIcon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). Defaults to _null_.
 * @prop {string} menuMaxHeight - Max height the menu may take up. If using groups, we recommend adding a menu max height. Defaults to _undefined_.
 * @prop {string} multiDisplayType - How value is displayed if select is a multiselect. Defaults to _'pills'_.
 * @prop {boolean} multiSelect - Enable multi-selection mode. Note, row highlighting is disabled when using multi-select. Defaults to _false_.
 * @prop {string} name - Name to be added to hidden html input. Defaults to _null_.
 * @prop {string|React.ReactNode} noOptionsMessage - Message to show if no options are available. Defaults to _'No options'_.
 * @prop {boolean} open - The menu will always be visible. Defaults to _undefined_.
 * @prop {string} optionFilterLabel - (??) When using multi-select mode the menu items will show a switch to show all options or only selected. Defaults to _'Show only selected options'_.
 * @prop {[object] | [string] | [number]} options - Options for select. See README for schema architecture. Options should not be used with children. If both are sent children will be ignored. Defaults to _null_.
 * @prop {string|React.ReactNode} portalContainer - The DOM element the menu should render in if `hoisted` is set to true. If a string is sent it should be a valid DOM query selector. If one is not sent, Portal will default to `document.body`. Defaults to _undefined_.
 * @prop {boolean} requireConfirmation - When in multi-select mode a confirmation will be required before the onChange will be called. Defaults to _false_.
 * @prop {boolean} required - Whether or not the input is required. Can be used for validation purposes. Defaults to _false_.
 * @prop {boolean} searchable - Enable autocomplete behavior. Defaults to _false_.
 * @prop {string} selectAllLabel - Label for the Select All checkbox. Defaults to _'Select All Options'_.
 * @prop {boolean} showCheckboxOptions - When using a multi-select list the items will have checkboxes to indicate selection. If false, options will not have a checkbox, and selected options will be removed from the list. Defaults to _true_.
 * @prop {boolean} showOptionFilter - When using a multi-select mode the menu will include a switch to show all options or only selected. Defaults to _true_.
 * @prop {boolean} showSelectAll - Shows a checkbox to select all options. Defaults to _true_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {boolean} suppressInvalidOptionWarning - Prevent console warning when value is not found in the options list. Defaults to _false_.
 * @prop {string} textKey - Name of the key for the text in options. Defaults to _'text'_.
 * @prop {string} themeColor - Color of the select based on the theme. Defaults to _'primary'_.
 * @prop {object} tooltip - If defined, a Tooltip will appear on the Select input. Useful to show the full value, if selected value is too long for the Select width. The object should be the needed Tooltip properties. Tooltip `text`prop will be set to the current selected value of the Select.  See Tooltip docs for available props. Defaults to _null_.
 * @prop {boolean} valid - Whether or not the selected value is valid. Can be used for validation purposes. Defaults to _null_.
 * @prop {[object]|object|string|number} value - The value of the select. Defaults to _undefined_.
 * @prop {string} valueDisplay - Deprecated: Renamed to `multiDisplayType` for clarity. How value is displayed if select is a multiselect. Defaults to _undefined_.
 * @prop {string} valueKey - Name of the key for the value in options. Defaults to _'value'_.
 * @prop {string} variant - Applies the selected style to the select input. Defaults to _'filled'_.
 *  @event onBlur - Fired when the Select looses focus.
 *  @event onChange - Fired when value of the selected option is changed.
 *  @event onFocus - Fired when the Select gains focus.
 *  @event onInputChange - Fired when the select is searchable and a user changes the search term.
*/
export const Select: React.FunctionComponent<SelectProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectClearIndicatorProps {
    /**
    * Inner props from the react select.
    *
    * Defaults to **undefined**.
    */
    innerProps?: object;
}

/**
* Clear icon for the select.
 * @prop {object} innerProps - Inner props from the react select. Defaults to _undefined_.
*/
export const SelectClearIndicator: React.FunctionComponent<SelectClearIndicatorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectConfirmationProps {
    /**
    * Label for the Cancel button on the multi select label.
    *
    * Defaults to **'Cancel'**.
    */
    cancelLabel?: string;
    /**
    * Label for the Confirm button on the multi select label.
    *
    * Defaults to **'Confirm'**.
    */
    confirmLabel?: string;
    /**
    * Sets the theme color for the option filter switch, confirm/cancel buttons and checkboxes
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Fired when confirmation is clicked.
    */
    onConfirm?: Function;
}

/**
* Select confirmation component.
 * @prop {string} cancelLabel - Label for the Cancel button on the multi select label. Defaults to _'Cancel'_.
 * @prop {string} confirmLabel - Label for the Confirm button on the multi select label. Defaults to _'Confirm'_.
 * @prop {string} themeColor - Sets the theme color for the option filter switch, confirm/cancel buttons and checkboxes Defaults to _'primary'_.
 *  @event onConfirm - Fired when confirmation is clicked.
*/
export const SelectConfirmation: React.FunctionComponent<SelectConfirmationProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectContentProps {
    /**
    * Content to be rendered inside the component. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Indicates the content will appear before the list, otherwise content will assume it is trailing.
    *
    * Defaults to **undefined**.
    */
    leading?: boolean;
}

/**
* A container for adding leading or trailing content to a select menu. For internal and development use only.
 * @prop {React.ReactNode} children - Content to be rendered inside the component. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} leading - Indicates the content will appear before the list, otherwise content will assume it is trailing. Defaults to _undefined_.
*/
export const SelectContent: React.FunctionComponent<SelectContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectControlComponentProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Whether or not the select has a value.
    *
    * Defaults to **null**.
    */
    hasValue?: boolean;
    /**
    * Inner props from the react select.
    *
    * Defaults to **null**.
    */
    innerProps?: object;
    /**
    * Whether or not the select is focused.
    *
    * Defaults to **null**.
    */
    isFocused?: boolean;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Control component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {boolean} hasValue - Whether or not the select has a value. Defaults to _null_.
 * @prop {object} innerProps - Inner props from the react select. Defaults to _null_.
 * @prop {boolean} isFocused - Whether or not the select is focused. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectControlComponent: React.FunctionComponent<SelectControlComponentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectDropdownIconProps {
}

/**
* Control component for the select.
*/
export const SelectDropdownIcon: React.FunctionComponent<SelectDropdownIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectIndicatorsContainerProps {
    /**
    * Expects the indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Indicator component for the select.
 * @prop {React.ReactNode} children - Expects the indicators. Defaults to _null_.
*/
export const SelectIndicatorsContainer: React.FunctionComponent<SelectIndicatorsContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectLabelProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Whether or not the select control has expanded in height.
    *
    * Defaults to **null**.
    */
    extendedHeight?: boolean;
    /**
    * Whether or not the select control has a fixed height.
    *
    * Defaults to **null**.
    */
    fixedHeightInput?: boolean;
    /**
    * Whether or not the label should float.
    *
    * Defaults to **null**.
    */
    float?: boolean;
    /**
    * Whether or not the select is the outlined variant.
    *
    * Defaults to **null**.
    */
    isOutlined?: boolean;
    /**
    * Label for the select.
    *
    * Defaults to **empty string**.
    */
    label?: string;
    /**
    * Id for the select.
    *
    * Defaults to **empty string**.
    */
    selectId?: string;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Label component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {boolean} extendedHeight - Whether or not the select control has expanded in height. Defaults to _null_.
 * @prop {boolean} fixedHeightInput - Whether or not the select control has a fixed height. Defaults to _null_.
 * @prop {boolean} float - Whether or not the label should float. Defaults to _null_.
 * @prop {boolean} isOutlined - Whether or not the select is the outlined variant. Defaults to _null_.
 * @prop {string} label - Label for the select. Defaults to _empty string_.
 * @prop {string} selectId - Id for the select. Defaults to _empty string_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectLabel: React.FunctionComponent<SelectLabelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMenuProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Returns the value of the select.
    *
    * Defaults to **null**.
    */
    getValue?: Function;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
    /**
    * Set the value of the select.
    *
    * Defaults to **null**.
    */
    setValue?: Function;
}

/**
* Menu component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {function} getValue - Returns the value of the select. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
 * @prop {function} setValue - Set the value of the select. Defaults to _null_.
*/
export const SelectMenu: React.FunctionComponent<SelectMenuProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMenuListProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Menu List component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectMenuList: React.FunctionComponent<SelectMenuListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMultiValueProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Menu Multi Value component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
*/
export const SelectMultiValue: React.FunctionComponent<SelectMultiValueProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMultiValueLabelProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Menu Multi Value Label component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
*/
export const SelectMultiValueLabel: React.FunctionComponent<SelectMultiValueLabelProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectMultiValueRemoveProps {
}

/**
* Menu Multi Value Remove icon component for the select.
*/
export const SelectMultiValueRemove: React.FunctionComponent<SelectMultiValueRemoveProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectOptionProps {
    /**
    * The display value of the SelectOption. If using more than a simple string or number, custom css may be necessary.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * Data for the select option.
    *
    * Defaults to **undefined**.
    */
    data?: object;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **undefined**.
    */
    disabled?: boolean;
    /**
    * Returns the value of the select.
    *
    * Defaults to **undefined**.
    */
    getValue?: Function;
    /**
    * Inner props from the react select.
    *
    * Defaults to **undefined**.
    */
    innerProps?: object;
    /**
    * The option is nested.
    *
    * Defaults to **false**.
    */
    isChildOption?: boolean;
    /**
    * Whether or not the option is focused.
    *
    * Defaults to **undefined**.
    */
    isFocused?: boolean;
    /**
    * Whether or not the select is selected.
    *
    * Defaults to **undefined**.
    */
    isSelected?: boolean;
    /**
    * The display value of the SelectOption.
    *
    * Defaults to **undefined**.
    */
    label?: string | number | React.ReactNode;
    /**
    * Select props sent to react select.
    *
    * Defaults to **undefined**.
    */
    selectProps?: object;
    /**
    * @deprecated _The parent Select component will manage the selected state of child SelectOptions. If this is set, it will only change the appearance of the option to show as highlighted._
    *
    * Whether or not the select is selected.
    *
    * Defaults to **undefined**.
    */
    selected?: boolean;
    /**
    * Sets the value of the select.
    *
    * Defaults to **undefined**.
    */
    setValue?: Function;
    /**
    * The value of the SelectOption.
    *
    * Defaults to **undefined**.
    */
    value?: any;
}

/**
* Select Option component for the select.
 * @prop {React.ReactNode} children - The display value of the SelectOption. If using more than a simple string or number, custom css may be necessary. Defaults to _undefined_.
 * @prop {object} data - Data for the select option. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _undefined_.
 * @prop {function} getValue - Returns the value of the select. Defaults to _undefined_.
 * @prop {object} innerProps - Inner props from the react select. Defaults to _undefined_.
 * @prop {boolean} isChildOption - The option is nested. Defaults to _false_.
 * @prop {boolean} isFocused - Whether or not the option is focused. Defaults to _undefined_.
 * @prop {boolean} isSelected - Whether or not the select is selected. Defaults to _undefined_.
 * @prop {string|number|React.ReactNode} label - The display value of the SelectOption. Defaults to _undefined_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _undefined_.
 * @prop {boolean} selected - Deprecated: The parent Select component will manage the selected state of child SelectOptions. If this is set, it will only change the appearance of the option to show as highlighted. Whether or not the select is selected. Defaults to _undefined_.
 * @prop {function} setValue - Sets the value of the select. Defaults to _undefined_.
 * @prop {any} value - The value of the SelectOption. Defaults to _undefined_.
*/
export const SelectOption: React.FunctionComponent<SelectOptionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectOptionFilterProps {
    /**
    * Label for the option filter switch.
    *
    * Defaults to **empty string**.
    */
    optionFilterLabel?: string;
    /**
    * Theme color for the switch.
    *
    * Defaults to **empty string**.
    */
    optionFilterThemeColor?: string;
    /**
    * Sets the value of the showOnlySelectedItems prop.
    *
    * Defaults to **null**.
    */
    setShowOnlySelectedItems?: Function;
    /**
    * If true only selected items are shown in the menu.
    *
    * Defaults to **null**.
    */
    showOnlySelectedItems?: boolean;
}

/**
* Select Option Filter component for the select.
 * @prop {string} optionFilterLabel - Label for the option filter switch. Defaults to _empty string_.
 * @prop {string} optionFilterThemeColor - Theme color for the switch. Defaults to _empty string_.
 * @prop {function} setShowOnlySelectedItems - Sets the value of the showOnlySelectedItems prop. Defaults to _null_.
 * @prop {boolean} showOnlySelectedItems - If true only selected items are shown in the menu. Defaults to _null_.
*/
export const SelectOptionFilter: React.FunctionComponent<SelectOptionFilterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectPortalProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Returns the styles of the component.
    *
    * Defaults to **null**.
    */
    getStyles?: Function;
    /**
    * Position of the select menu.
    *
    * Defaults to **empty string**.
    */
    menuPosition?: string;
}

/**
* Select Portal component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {function} getStyles - Returns the styles of the component. Defaults to _null_.
 * @prop {string} menuPosition - Position of the select menu. Defaults to _empty string_.
*/
export const SelectPortal: React.FunctionComponent<SelectPortalProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface SelectValueContainerProps {
    /**
    * Expects the value containers and indicators.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Select props sent to react select.
    *
    * Defaults to **null**.
    */
    selectProps?: object;
}

/**
* Select Option component for the select.
 * @prop {React.ReactNode} children - Expects the value containers and indicators. Defaults to _null_.
 * @prop {object} selectProps - Select props sent to react select. Defaults to _null_.
*/
export const SelectValueContainer: React.FunctionComponent<SelectValueContainerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
