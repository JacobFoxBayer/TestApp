import React from 'react';


export interface ModalProps {
    /**
    * An action button that will not automatically trigger a dismiss or accept. It is meant to be used only in certain circumstances where more control of the modal is required such as validating forms. If primaryButton is sent with actionButton, actionButton will be ignored.
    *
    * Defaults to **null**.
    */
    actionButton?: React.ReactNode;
    /**
    * Button for any navigating to the previous page in a Directional modal.
    *
    * Defaults to **null**.
    */
    backButton?: React.ReactNode;
    /**
    * The custom modal label badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: React.ReactNode;
    /**
    * Accepts any valid markup. Optionally, `content` may be used instead. If `content` and `children` are both set, `content` will take priority.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Primary content of the dialog. Accepts any valid markup. Optionally, `children` may be used instead. If content and `children` are both set, content will take priority.
    *
    * Defaults to **null**.
    */
    content?: React.ReactNode;
    /**
    * Button that is the default action, triggered by pressing the Enter key.
    *
    * Defaults to **'primary'**.
    */
    defaultButton?: string;
    /**
    * Button to cancel or close the modal.
    *
    * Defaults to **null**.
    */
    dismissiveButton?: React.ReactNode;
    /**
    * Button to be displayed in left corner of the modal footer. Should be a text button.
    *
    * Defaults to **null**.
    */
    footerSupplemental?: React.ReactNode;
    /**
    * Content to be displayed in right corner of the modal header. Should be a text button or a group of up to 3 icon buttons.
    *
    * Defaults to **null**.
    */
    headerActions?: React.ReactNode;
    /**
    * If true, the close icon in the upper left corner will not be rendered.
    *
    * Defaults to **false**.
    */
    hideCloseIcon?: boolean;
    /**
    * A slot for StepperIndicator.
    *
    * Defaults to **null**.
    */
    indicator?: React.ReactNode;
    /**
    * Button to initially focus on after the dialog has opened. If left null, the initial focus will be on the first focusable element in the modal. As an alternative you can add `data-mdc-dialog-initial-focus` to any element within the modal to make that element the initial focus. If it is a directional modal, the initial focus will be on the nextButton.
    *
    * Defaults to **null**.
    */
    initialFocus?: string;
    /**
    * If true, the buttons in the footer will be full width and stacked on mobile.
    *
    * Defaults to **false**.
    */
    mobileStackedButtons?: boolean;
    /**
    * String to determine the size of the modal.
    *
    * Defaults to **'max'**.
    */
    modalSize?: string;
    /**
    * Button for navigating to the next page in a Directional modal or closing on the last page.
    *
    * Defaults to **null**.
    */
    nextButton?: React.ReactNode;
    /**
    * Set to true if the modal will not have any actions. Should be used sparingly and the modal should be closed programmatically. For example, can be used to stop the user from interacting or navigating away while a payment is processing.
    *
    * Defaults to **null**.
    */
    noActions?: boolean;
    /**
    * If true, the Modal will be visible on screen.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Prevents the user from closing the dialog by hitting escape or clicking the scrim. Use caution when using this as the modal should always have a way for the user to close it.
    *
    * Defaults to **false**.
    */
    preventClose?: boolean;
    /**
    * Button for the primary action of the modal.
    *
    * Defaults to **null**.
    */
    primaryButton?: React.ReactNode;
    /**
    * DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing.
    *
    * Defaults to **null**.
    */
    returnFocusSelector?: string;
    /**
    * If true, wrapping will be disabled and a scrollable area will be created.
    *
    * Defaults to **false**.
    */
    scrollable?: boolean;
    /**
    * String for the modal title.
    *
    * Defaults to **null**.
    */
    title?: string;
    /**
    * Fired when the Dialog begins its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
    */
    onClose?: Function;
    /**
    * Fired when the Dialog finishes its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
    */
    onClosed?: Function;
    /**
    * Fired when the Dialog begins its opening animation.
    */
    onOpen?: Function;
    /**
    * Fired when the Dialog finishes its opening animation.
    */
    onOpened?: Function;
}

/**
* Modals are a window that appears in front of application or page content. They can contain longer content or forms than Dialog. All page functionality ceases until the modal is closed.
 * @prop {React.ReactNode} actionButton - An action button that will not automatically trigger a dismiss or accept. It is meant to be used only in certain circumstances where more control of the modal is required such as validating forms. If primaryButton is sent with actionButton, actionButton will be ignored. Defaults to _null_.
 * @prop {React.ReactNode} backButton - Button for any navigating to the previous page in a Directional modal. Defaults to _null_.
 * @prop {React.ReactNode} badge - The custom modal label badge to be rendered. Defaults to _undefined_.
 * @prop {React.ReactNode} children - Accepts any valid markup. Optionally, `content` may be used instead. If `content` and `children` are both set, `content` will take priority. Defaults to _null_.
 * @prop {React.ReactNode} content - Primary content of the dialog. Accepts any valid markup. Optionally, `children` may be used instead. If content and `children` are both set, content will take priority. Defaults to _null_.
 * @prop {string} defaultButton - Button that is the default action, triggered by pressing the Enter key. Defaults to _'primary'_.
 * @prop {React.ReactNode} dismissiveButton - Button to cancel or close the modal. Defaults to _null_.
 * @prop {React.ReactNode} footerSupplemental - Button to be displayed in left corner of the modal footer. Should be a text button. Defaults to _null_.
 * @prop {React.ReactNode} headerActions - Content to be displayed in right corner of the modal header. Should be a text button or a group of up to 3 icon buttons. Defaults to _null_.
 * @prop {boolean} hideCloseIcon - If true, the close icon in the upper left corner will not be rendered. Defaults to _false_.
 * @prop {React.ReactNode} indicator - A slot for StepperIndicator. Defaults to _null_.
 * @prop {string} initialFocus - Button to initially focus on after the dialog has opened. If left null, the initial focus will be on the first focusable element in the modal. As an alternative you can add `data-mdc-dialog-initial-focus` to any element within the modal to make that element the initial focus. If it is a directional modal, the initial focus will be on the nextButton. Defaults to _null_.
 * @prop {boolean} mobileStackedButtons - If true, the buttons in the footer will be full width and stacked on mobile. Defaults to _false_.
 * @prop {string} modalSize - String to determine the size of the modal. Defaults to _'max'_.
 * @prop {React.ReactNode} nextButton - Button for navigating to the next page in a Directional modal or closing on the last page. Defaults to _null_.
 * @prop {boolean} noActions - Set to true if the modal will not have any actions. Should be used sparingly and the modal should be closed programmatically. For example, can be used to stop the user from interacting or navigating away while a payment is processing. Defaults to _null_.
 * @prop {boolean} open - If true, the Modal will be visible on screen. Defaults to _false_.
 * @prop {boolean} preventClose - Prevents the user from closing the dialog by hitting escape or clicking the scrim. Use caution when using this as the modal should always have a way for the user to close it. Defaults to _false_.
 * @prop {React.ReactNode} primaryButton - Button for the primary action of the modal. Defaults to _null_.
 * @prop {string} returnFocusSelector - DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing. Defaults to _null_.
 * @prop {boolean} scrollable - If true, wrapping will be disabled and a scrollable area will be created. Defaults to _false_.
 * @prop {string} title - String for the modal title. Defaults to _null_.
 *  @event onClose - Fired when the Dialog begins its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
 *  @event onClosed - Fired when the Dialog finishes its closing animation. Where event.detail.action is the action which closed the dialog (close or accept).
 *  @event onOpen - Fired when the Dialog begins its opening animation.
 *  @event onOpened - Fired when the Dialog finishes its opening animation.
*/
export const Modal: React.FunctionComponent<ModalProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
