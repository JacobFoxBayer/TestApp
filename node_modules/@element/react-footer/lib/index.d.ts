import React from 'react';


export interface FooterProps {
    /**
    * The default container for Footer content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Color of the Footer.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * If true the footer's content will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useContentMaxWidth?: boolean;
}

/**
* The Footer provides a container in which navigation, copyrights, and help can be organized.
 * @prop {React.ReactNode} children - The default container for Footer content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} themeColor - Color of the Footer. Defaults to _'surface'_.
 * @prop {boolean} useContentMaxWidth - If true the footer's content will have a max width according to your theme's breakpoints. Defaults to _false_.
*/
export const Footer: React.FunctionComponent<FooterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomProps {
    /**
    * The default container for Footer content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The center content of the FooterBottom component.
    *
    * Defaults to **null**.
    */
    copyrightContent?: React.ReactNode;
    /**
    * Expects one or more FooterIcons, will accept any valid components or markup.
    *
    * Defaults to **null**.
    */
    footerIcons?: React.ReactNode;
    /**
    * How many columns to create for the large breakpoint.
    *
    * Defaults to **'3'**.
    */
    lgCols?: string | number;
    /**
    * A container for common links.
    *
    * Defaults to **null**.
    */
    links?: React.ReactNode;
    /**
    * How many columns to create for the medium breakpoint.
    *
    * Defaults to **'1'**.
    */
    mdCols?: string | number;
    /**
    * How many columns to create for the small breakpoint.
    *
    * Defaults to **'1'**.
    */
    smCols?: string | number;
    /**
    * Color of the Footer Bottom.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
}

/**
* The Footer component provides its own styles.
 * @prop {React.ReactNode} children - The default container for Footer content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} copyrightContent - The center content of the FooterBottom component. Defaults to _null_.
 * @prop {React.ReactNode} footerIcons - Expects one or more FooterIcons, will accept any valid components or markup. Defaults to _null_.
 * @prop {string|number} lgCols - How many columns to create for the large breakpoint. Defaults to _'3'_.
 * @prop {React.ReactNode} links - A container for common links. Defaults to _null_.
 * @prop {string|number} mdCols - How many columns to create for the medium breakpoint. Defaults to _'1'_.
 * @prop {string|number} smCols - How many columns to create for the small breakpoint. Defaults to _'1'_.
 * @prop {string} themeColor - Color of the Footer Bottom. Defaults to _'surface'_.
*/
export const FooterBottom: React.FunctionComponent<FooterBottomProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomContentProps {
    /**
    * The default container for FooterBottom content.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* 
 *@deprecated This component is no longer needed, it may be removed entirely or replaced with a div.
The FooterBottomContent provides a container in which links, copyrights and help icons can be organized.
 * @prop {React.ReactNode} children - The default container for FooterBottom content. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const FooterBottomContent: React.FunctionComponent<FooterBottomContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomGroupProps {
    /**
    * Content alignment.
    *
    * Defaults to **undefined**.
    */
    alignment?: string;
    /**
    * The default container for FooterBottom content.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The spacing between items.
    *
    * Defaults to **'standard'**.
    */
    gap?: string;
    /**
    * How many columns to span the large breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    lgColSpan?: string | number;
    /**
    * The top and bottom spacing around the group component.
    *
    * Defaults to **'standard'**.
    */
    margin?: string;
    /**
    * How many columns to span the medium breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    mdColSpan?: string | number;
    /**
    * How many columns to span the small breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    smColSpan?: string | number;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
}

/**
* The FooterBottomGroup provides a container to organize items in a FooterBottom, if multiple items are sent in they will be distributed horizontally.
 * @prop {string} alignment - Content alignment. Defaults to _undefined_.
 * @prop {React.ReactNode} children - The default container for FooterBottom content. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} gap - The spacing between items. Defaults to _'standard'_.
 * @prop {string|number} lgColSpan - How many columns to span the large breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string} margin - The top and bottom spacing around the group component. Defaults to _'standard'_.
 * @prop {string|number} mdColSpan - How many columns to span the medium breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} smColSpan - How many columns to span the small breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
*/
export const FooterBottomGroup: React.FunctionComponent<FooterBottomGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterBottomWrapperProps {
    /**
    * Content to be rendered inside the Footer Bottom. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Color of the Footer Bottom.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
}

/**
* Footer Bottom Wrapper is used to wrap the content of the Footer Bottom when `useContentMaxWidth` is true.
 * @prop {React.ReactNode} children - Content to be rendered inside the Footer Bottom. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} themeColor - Color of the Footer Bottom. Defaults to _'surface'_.
*/
export const FooterBottomWrapper: React.FunctionComponent<FooterBottomWrapperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterColProps {
    /**
    * The default container for FooterCol content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * How many columns to span the large breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    lgColSpan?: string | number;
    /**
    * How many columns to span the medium breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    mdColSpan?: string | number;
    /**
    * How many columns to span the small breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    smColSpan?: string | number;
    /**
    * By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType;
    /**
    * The header title of the content in footer.
    *
    * Defaults to **undefined**.
    */
    title?: string;
}

/**
* The FooterCol provides a container in which Footer contents can be organized.
 * @prop {React.ReactNode} children - The default container for FooterCol content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|number} lgColSpan - How many columns to span the large breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} mdColSpan - How many columns to span the medium breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} smColSpan - How many columns to span the small breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|React.ElementType} tag - By default a div will be rendered, this allow another tag to be used instead. A block type component is suggested. Defaults to _'div'_.
 * @prop {string} title - The header title of the content in footer. Defaults to _undefined_.
*/
export const FooterCol: React.FunctionComponent<FooterColProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterContentProps {
    /**
    * The default container for Footer content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Gap between the columns and the pixels.  Must be a valid css gap declaration for css display grid 
    *
    * Defaults to **'64px'**.
    */
    gap?: string;
    /**
    * How many columns to create for the large breakpoint.
    *
    * Defaults to **undefined**.
    */
    lgCols?: string | number;
    /**
    * How many columns to create for the medium breakpoint.
    *
    * Defaults to **undefined**.
    */
    mdCols?: string | number;
    /**
    * How many columns to create for the small breakpoint.
    *
    * Defaults to **'1'**.
    */
    smCols?: string | number;
    /**
    * Color of the Footer.
    *
    * Defaults to **null**.
    */
    themeColor?: string;
}

/**
* The FooterContent provides a container in which navigation and lists can be organized.
 * @prop {React.ReactNode} children - The default container for Footer content Defaults to _null_.
 * @prop {string} gap - Gap between the columns and the pixels.  Must be a valid css gap declaration for css display grid  Defaults to _'64px'_.
 * @prop {string|number} lgCols - How many columns to create for the large breakpoint. Defaults to _undefined_.
 * @prop {string|number} mdCols - How many columns to create for the medium breakpoint. Defaults to _undefined_.
 * @prop {string|number} smCols - How many columns to create for the small breakpoint. Defaults to _'1'_.
 * @prop {string} themeColor - Color of the Footer. Defaults to _null_.
*/
export const FooterContent: React.FunctionComponent<FooterContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterDividerProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* Divides top and bottom of the Footer Component.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const FooterDivider: React.FunctionComponent<FooterDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterIconProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * For simple use-cases, this will automatically create the icon object.
    *
    * Defaults to **null**.
    */
    icon?: string | React.ReactNode;
    /**
    * Color variations. Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
    *
    * Defaults to **'gray'**.
    */
    themeColor?: string;
}

/**
* The FooterIcon provides a container in which help icons can be organized.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ReactNode} icon - For simple use-cases, this will automatically create the icon object. Defaults to _null_.
 * @prop {string} themeColor - Color variations. Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme. Defaults to _'gray'_.
*/
export const FooterIcon: React.FunctionComponent<FooterIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterListProps {
    /**
    * The default container for FooterList content
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * How many columns to span the large breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    lgColSpan?: string | number;
    /**
    * How many columns to span the medium breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    mdColSpan?: string | number;
    /**
    * How many columns to span the small breakpoint when customizing Footer Bottom columns.
    *
    * Defaults to **'1'**.
    */
    smColSpan?: string | number;
    /**
    * The header title of the content in footer.
    *
    * Defaults to **undefined**.
    */
    title?: string;
}

/**
* The FooterList provides a container in which lists can be organized.
 * @prop {React.ReactNode} children - The default container for FooterList content Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|number} lgColSpan - How many columns to span the large breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} mdColSpan - How many columns to span the medium breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string|number} smColSpan - How many columns to span the small breakpoint when customizing Footer Bottom columns. Defaults to _'1'_.
 * @prop {string} title - The header title of the content in footer. Defaults to _undefined_.
*/
export const FooterList: React.FunctionComponent<FooterListProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterListItemProps {
    /**
    * The default container for FooterBottom content.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* The FooterListItem provides a container for items to appear in a FooterList.
 * @prop {React.ReactNode} children - The default container for FooterBottom content. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const FooterListItem: React.FunctionComponent<FooterListItemProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface FooterLogoProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Optional logo. Expects an image but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    logo?: string | React.ReactNode;
}

/**
* 
 *@deprecated no longer used
The FooterLogo provides a container in which a logo can be placed.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ReactNode} logo - Optional logo. Expects an image but accepts any valid markup. Defaults to _null_.
*/
export const FooterLogo: React.FunctionComponent<FooterLogoProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
