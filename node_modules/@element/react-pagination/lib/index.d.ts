import React from 'react';


export interface PaginationProps {
    /**
    * Disables internal state tracking in favor of programmatic control.
    *
    * Defaults to **false**.
    */
    controlled?: boolean;
    /**
    * When using Pagination in `controlled` mode, this will set the currently selected data page.
    *
    * Defaults to **0**.
    */
    currentPage?: number;
    /**
    * Enables a Select list of pages for direct navigation. If the number of pages is below the `directNavigationThreshold`, numbered buttons will displayed instead.
    *
    * Defaults to **false**.
    */
    directNavigation?: boolean;
    /**
    * When using `directNavigation`, this is number of pages above which a Select list of pages will be presented instead of number buttons.
    *
    * Defaults to **4**.
    */
    directNavigationThreshold?: number;
    /**
    * When using Pagination in `controlled` mode, this controls enabled or disabled the next page button.
    *
    * Defaults to **false**.
    */
    disableNextPage?: boolean;
    /**
    * When using Pagination in `controlled` mode, this controls enabled or disabled the previous page button.
    *
    * Defaults to **false**.
    */
    disablePreviousPage?: boolean;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Hide the first and last buttons.
    *
    * Defaults to **false**.
    */
    hideFirstLast?: boolean;
    /**
    * Hide the next and previous buttons.
    *
    * Defaults to **false**.
    */
    hideNextPrev?: boolean;
    /**
    * Hide the Rows Per Page component.
    *
    * Defaults to **false**.
    */
    hideRowsPerPage?: boolean;
    /**
    * Randomly generated id. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Sets the current page on mount.
    *
    * Defaults to **0**.
    */
    initialPage?: number;
    /**
    * Sets item per page. Defaults to first index in itemsPerPageOptions array if value is not available array.
    *
    * Defaults to **itemsPerPageOptions[0]**.
    */
    itemsPerPage?: number;
    /**
    * Number of items per page.
    *
    * Defaults to **[10, 25, 50, 100, 200]**.
    */
    itemsPerPageOptions?: Array<number>;
    /**
    * A customizable function to enable text translation services. Possible string values are 'Page', 'of', and 'Rows per page'.
    *
    * Defaults to **null**.
    */
    localize?: Function;
    /**
    * Total count of the total number of items to paginate through.
    *
    * Defaults to **0**.
    */
    totalItems?: number;
    /**
    * When using Pagination in `controlled` mode, this will override the total number of pages.
    *
    * Defaults to **0**.
    */
    totalPages?: number;
    /**
    * Fired with the first page button is clicked.
    */
    onFirstPage?: Function;
    /**
    * Returns item per page selected.
    */
    onItemsPerPageChange?: Function;
    /**
    * Fired with the last page button is clicked. Returns the new page.
    */
    onLastPage?: Function;
    /**
    * Fired with the next page button is clicked. Returns the new page.
    */
    onNextPage?: Function;
    /**
    * Fired when any page change occurs. Returns the new page.
    */
    onPageChange?: Function;
    /**
    * Fired with the previous page button is clicked.
    */
    onPreviousPage?: Function;
}

/**
* Pagination is used for dividing content or data among several pages with control for navigation between pages, both backwards and forwards.
 * @prop {boolean} controlled - Disables internal state tracking in favor of programmatic control. Defaults to _false_.
 * @prop {number} currentPage - When using Pagination in `controlled` mode, this will set the currently selected data page. Defaults to _0_.
 * @prop {boolean} directNavigation - Enables a Select list of pages for direct navigation. If the number of pages is below the `directNavigationThreshold`, numbered buttons will displayed instead. Defaults to _false_.
 * @prop {number} directNavigationThreshold - When using `directNavigation`, this is number of pages above which a Select list of pages will be presented instead of number buttons. Defaults to _4_.
 * @prop {boolean} disableNextPage - When using Pagination in `controlled` mode, this controls enabled or disabled the next page button. Defaults to _false_.
 * @prop {boolean} disablePreviousPage - When using Pagination in `controlled` mode, this controls enabled or disabled the previous page button. Defaults to _false_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {boolean} hideFirstLast - Hide the first and last buttons. Defaults to _false_.
 * @prop {boolean} hideNextPrev - Hide the next and previous buttons. Defaults to _false_.
 * @prop {boolean} hideRowsPerPage - Hide the Rows Per Page component. Defaults to _false_.
 * @prop {string} id - Randomly generated id. May be overwritten. Defaults to _undefined_.
 * @prop {number} initialPage - Sets the current page on mount. Defaults to _0_.
 * @prop {number} itemsPerPage - Sets item per page. Defaults to first index in itemsPerPageOptions array if value is not available array. Defaults to _itemsPerPageOptions[0]_.
 * @prop {[number]} itemsPerPageOptions - Number of items per page. Defaults to _[10, 25, 50, 100, 200]_.
 * @prop {Function} localize - A customizable function to enable text translation services. Possible string values are 'Page', 'of', and 'Rows per page'. Defaults to _null_.
 * @prop {number} totalItems - Total count of the total number of items to paginate through. Defaults to _0_.
 * @prop {number} totalPages - When using Pagination in `controlled` mode, this will override the total number of pages. Defaults to _0_.
 *  @event onFirstPage - Fired with the first page button is clicked.
 *  @event onItemsPerPageChange - Returns item per page selected.
 *  @event onLastPage - Fired with the last page button is clicked. Returns the new page.
 *  @event onNextPage - Fired with the next page button is clicked. Returns the new page.
 *  @event onPageChange - Fired when any page change occurs. Returns the new page.
 *  @event onPreviousPage - Fired with the previous page button is clicked.
*/
export const Pagination: React.FunctionComponent<PaginationProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
