import _extends from '@babel/runtime-corejs3/helpers/extends';
import clsx from 'clsx';
import React, { forwardRef, useRef, useImperativeHandle, useState, useMemo, useCallback, useEffect } from 'react';
import { Icon } from '@element/react-icon';
import { IconButton } from '@element/react-icon-button';
import { Select } from '@element/react-select';
import { edsRandomId, edsWarning } from '@element/react-common';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const PaginationPropTypes = {
  /**
   * Disables internal state tracking in favor of programmatic control.
   *
   * Defaults to **false**.
   */
  controlled: PropTypes.bool,
  /**
   * When using Pagination in `controlled` mode, this will set the currently selected data page.
   *
   * Defaults to **0**.
   */
  currentPage: PropTypes.number,
  /**
   * Enables a Select list of pages for direct navigation. If the number of pages is below the `directNavigationThreshold`, numbered buttons will displayed instead.
   *
   * Defaults to **false**.
   */
  directNavigation: PropTypes.bool,
  /**
   * When using `directNavigation`, this is number of pages above which a Select list of pages will be presented instead of number buttons.
   *
   * Defaults to **4**.
   */
  directNavigationThreshold: PropTypes.number,
  /**
   * When using Pagination in `controlled` mode, this controls enabled or disabled the next page button.
   *
   * Defaults to **false**.
   */
  disableNextPage: PropTypes.bool,
  /**
   * When using Pagination in `controlled` mode, this controls enabled or disabled the previous page button.
   *
   * Defaults to **false**.
   */
  disablePreviousPage: PropTypes.bool,
  /**
   * Prevent the user from interacting with the component.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool,
  /**
   * Hide the first and last buttons.
   *
   * Defaults to **false**.
   */
  hideFirstLast: PropTypes.bool,
  /**
   * Hide the next and previous buttons.
   *
   * Defaults to **false**.
   */
  hideNextPrev: PropTypes.bool,
  /**
   * Hide the Rows Per Page component.
   *
   * Defaults to **false**.
   */
  hideRowsPerPage: PropTypes.bool,
  /**
   * Randomly generated id. May be overwritten.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes.string,
  /**
   * Sets the current page on mount.
   *
   * Defaults to **0**.
   */
  initialPage: PropTypes.number,
  /**
   * Sets item per page. Defaults to first index in itemsPerPageOptions array if value is not available array.
   *
   * Defaults to **itemsPerPageOptions[0]**.
   */
  itemsPerPage: PropTypes.number,
  /**
   * Number of items per page.
   *
   * Defaults to **[10, 25, 50, 100, 200]**.
   */
  itemsPerPageOptions: PropTypes.arrayOf(PropTypes.number),
  /**
   * A customizable function to enable text translation services. Possible string values are 'Page', 'of', and 'Rows per page'.
   *
   * Defaults to **null**.
   */
  localize: PropTypes.func,
  /**
   * Fired with the first page button is clicked.
   *
   * Defaults to **null**.
   */
  onFirstPage: PropTypes.func,
  /**
   * Returns item per page selected.
   *
   * Defaults to **null**.
   */
  onItemsPerPageChange: PropTypes.func,
  /**
   * Fired with the last page button is clicked. Returns the new page.
   *
   * Defaults to **null**.
   */
  onLastPage: PropTypes.func,
  /**
   * Fired with the next page button is clicked. Returns the new page.
   *
   * Defaults to **null**.
   */
  onNextPage: PropTypes.func,
  /**
   * Fired when any page change occurs. Returns the new page.
   *
   * Defaults to **null**.
   */
  onPageChange: PropTypes.func,
  /**
   * Fired with the previous page button is clicked.
   *
   * Defaults to **null**.
   */
  onPreviousPage: PropTypes.func,
  /**
   * Total count of the total number of items to paginate through.
   *
   * Defaults to **0**.
   */
  totalItems: PropTypes.number,
  /**
   * When using Pagination in `controlled` mode, this will override the total number of pages.
   *
   * Defaults to **0**.
   */
  totalPages: PropTypes.number
};
const itemsPerPageOptions = [10, 25, 50, 100, 200];
const PaginationDefaultProps = {
  controlled: false,
  currentPage: 0,
  directNavigation: false,
  directNavigationThreshold: 4,
  disableNextPage: false,
  disablePreviousPage: false,
  disabled: false,
  hideFirstLast: false,
  hideNextPrev: false,
  hideRowsPerPage: false,
  id: undefined,
  initialPage: 0,
  itemsPerPage: itemsPerPageOptions[0],
  itemsPerPageOptions: itemsPerPageOptions,
  localize: null,
  totalItems: 0,
  totalPages: 0
};

const Pagination = /*#__PURE__*/forwardRef((props, externalRef) => {
  const getItemsPerPageFallback = itemsPerPageOptions => itemsPerPageOptions && itemsPerPageOptions.length > 0 ? itemsPerPageOptions[0] : 10;
  const {
    className,
    controlled,
    currentPage,
    directNavigation,
    directNavigationThreshold,
    disableNextPage,
    disablePreviousPage,
    disabled,
    hideFirstLast,
    hideNextPrev,
    hideRowsPerPage,
    id,
    initialPage,
    itemsPerPage,
    itemsPerPageOptions,
    localize,
    onFirstPage,
    onItemsPerPageChange,
    onLastPage,
    onNextPage,
    onPageChange,
    onPreviousPage,
    totalItems,
    totalPages,
    ...customProps
  } = props;
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  const [idActual] = useState(() => id || edsRandomId());
  const [totalPagesActual, setTotalPagesActual] = useState(totalPages || 0);
  const [disableNextPageActual, setDisableNextPageActual] = useState(disableNextPage || totalItems === 0 || false);
  const [disablePrevPageActual, setDisablePrevPageActual] = useState(disablePreviousPage || totalItems === 0 || false);
  const [currentPageActual, setCurrentPageActual] = useState(currentPage || 1);
  const [displayItemOf, setDisplayItemOf] = useState('0-0 of 0');
  const [selectedItemPerPage, setSelectedItemPerPage] = useState(itemsPerPage || getItemsPerPageFallback(itemsPerPageOptions));
  const localizeActual = useMemo(() => {
    if (localize) return localize;
    return str => str;
  }, [localize]);
  const getSelectWidth = () => {
    var _localizeActual;
    const len = ((_localizeActual = localizeActual('Page')) === null || _localizeActual === void 0 ? void 0 : _localizeActual.length) || 0;
    const offset = len * 9;
    if (totalPagesActual > 99) return `${80 + offset}px`;
    if (totalPagesActual > 99) return `${70 + offset}px`;
    return `${70 + offset}px`;
  };
  const getListOfPages = useCallback(() => {
    const tmp = [];
    for (let i = 0; i < totalPagesActual; i += 1) {
      const pageNumber = {
        text: `${localizeActual('Page')} ${i + 1}`,
        value: i + 1
      };
      tmp.push(pageNumber);
    }
    return tmp;
  }, [localizeActual, totalPagesActual]);
  useEffect(() => {
    if (!controlled) return;
    setCurrentPageActual(currentPage);
  }, [controlled, currentPage]);
  useEffect(() => {
    setDisablePrevPageActual(disabled || disablePreviousPage || currentPageActual === 1);
  }, [currentPageActual, disablePreviousPage, disabled]);
  useEffect(() => {
    setTotalPagesActual(totalPages || Math.ceil(totalItems / selectedItemPerPage));
  }, [controlled, selectedItemPerPage, totalItems, totalPages]);
  useEffect(() => {
    if (controlled) return;
    setCurrentPageActual(totalItems > 0 ? 1 : 0);
  }, [controlled, totalItems]);
  useEffect(() => {
    setDisableNextPageActual(disabled || disableNextPage || currentPageActual === totalPagesActual);
  }, [currentPageActual, disableNextPage, disabled, totalPagesActual]);

  // sets the default selected page when using the `initialPage` prop on mount
  useEffect(() => {
    if (controlled) return;
    const numPages = Math.ceil(totalItems / selectedItemPerPage);
    if (initialPage) {
      const currentPageWarning = 'Prop "initialPage" value is invalid and defaulted to page 1. Use a value between 1 and the last page number.';
      if (initialPage > 0 && initialPage <= numPages) {
        setCurrentPageActual(initialPage);
      } else {
        edsWarning(currentPageWarning);
      }
    }
  }, [controlled, setCurrentPageActual, initialPage, selectedItemPerPage, totalItems]);
  useEffect(() => {
    const beginningItem = selectedItemPerPage * currentPageActual - (selectedItemPerPage - 1);
    let endingItem = selectedItemPerPage * currentPageActual;
    endingItem = endingItem > totalItems ? totalItems : endingItem;
    setDisplayItemOf(totalItems === 0 ? `0-0 ${localizeActual('of')} 0` : `${beginningItem} - ${endingItem} ${localizeActual('of')} ${totalItems}`);
  }, [currentPageActual, localizeActual, selectedItemPerPage, totalItems]);
  useEffect(() => {
    if (!itemsPerPage) return;
    const itemsPerPageWarning = 'Item per page value does not exist in item per page array. Defaulted to index 0 of "itemsPerPageOptions" array.';
    if (!itemsPerPageOptions.some(item => item === itemsPerPage)) {
      edsWarning(itemsPerPageWarning);
      setSelectedItemPerPage(itemsPerPageOptions[0]);
    } else {
      setSelectedItemPerPage(itemsPerPage);
    }
  }, [itemsPerPage, itemsPerPageOptions]);
  const handleItemsPerPageChange = useCallback(newItemsPerPage => {
    onItemsPerPageChange === null || onItemsPerPageChange === void 0 ? void 0 : onItemsPerPageChange(Number(newItemsPerPage), totalPagesActual);
    onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(1);
    if (controlled) return;
    setSelectedItemPerPage(Number(newItemsPerPage));
    setCurrentPageActual(1);
  }, [controlled, onItemsPerPageChange, onPageChange, totalPagesActual]);
  const handlePageChange = useCallback(nextPage => {
    if (nextPage === 1) onFirstPage === null || onFirstPage === void 0 ? void 0 : onFirstPage();
    if (nextPage === totalPagesActual) onLastPage === null || onLastPage === void 0 ? void 0 : onLastPage();
    onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(nextPage);
    if (controlled) return;
    setCurrentPageActual(nextPage);
  }, [onFirstPage, totalPagesActual, onLastPage, onPageChange, controlled]);
  const handleListNavigation = useCallback(newPage => handlePageChange(newPage.value), [handlePageChange]);
  const handleFirstPage = useCallback(() => {
    onFirstPage === null || onFirstPage === void 0 ? void 0 : onFirstPage();
    onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(1);
    if (controlled) return;
    setCurrentPageActual(1);
  }, [controlled, setCurrentPageActual, onFirstPage, onPageChange]);
  const handlePreviousPage = useCallback(() => {
    const newPage = currentPageActual === 1 ? 1 : currentPageActual - 1;
    onPreviousPage === null || onPreviousPage === void 0 ? void 0 : onPreviousPage(newPage);
    onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(newPage);
    if (controlled) return;
    setCurrentPageActual(newPage);
  }, [controlled, currentPageActual, setCurrentPageActual, onPageChange, onPreviousPage]);
  const handleNextPage = useCallback(() => {
    const newPage = currentPageActual === totalPagesActual ? totalPagesActual : currentPageActual + 1;
    onNextPage === null || onNextPage === void 0 ? void 0 : onNextPage(newPage);
    onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(newPage);
    if (controlled) return;
    setCurrentPageActual(newPage);
  }, [currentPageActual, totalPagesActual, onNextPage, controlled, setCurrentPageActual, onPageChange]);
  const handleLastPage = useCallback(() => {
    onLastPage === null || onLastPage === void 0 ? void 0 : onLastPage();
    onPageChange === null || onPageChange === void 0 ? void 0 : onPageChange(totalPagesActual);
    if (controlled) return;
    setCurrentPageActual(totalPagesActual);
  }, [onLastPage, controlled, setCurrentPageActual, totalPagesActual, onPageChange]);
  const showDirectNavigationButtons = directNavigation && totalPagesActual <= directNavigationThreshold && totalPagesActual > 1;
  const showDirectNavigationList = directNavigation && totalPagesActual > directNavigationThreshold && totalPagesActual > 1;
  const listOfPages = showDirectNavigationButtons || showDirectNavigationList ? getListOfPages() : [];
  return /*#__PURE__*/React.createElement("div", _extends({
    className: clsx('lmnt', 'lmnt-pagination', 'mdc-data-table__pagination', className),
    id: idActual
  }, customProps), /*#__PURE__*/React.createElement("div", {
    className: "mdc-data-table__pagination-trailing"
  }, !hideRowsPerPage && /*#__PURE__*/React.createElement("div", {
    className: "mdc-data-table__pagination-rows-per-page"
  }, /*#__PURE__*/React.createElement("div", {
    className: "mdc-data-table__pagination-rows-per-page-label"
  }, `${localizeActual('Rows per page')}:`), /*#__PURE__*/React.createElement("div", {
    className: "lmnt-data-table__pagination-select"
  }, /*#__PURE__*/React.createElement(Select, {
    value: selectedItemPerPage,
    onChange: handleItemsPerPageChange,
    variant: "outlined",
    options: itemsPerPageOptions,
    className: "mdc-select--no-label mdc-data-table__pagination-rows-per-page-select",
    disabled: disabled,
    dense: true
  }))), /*#__PURE__*/React.createElement("div", {
    className: "mdc-data-table__pagination-navigation"
  }, /*#__PURE__*/React.createElement("div", {
    className: "mdc-data-table__pagination-total"
  }, displayItemOf), showDirectNavigationButtons && listOfPages.map(page => {
    const {
      value
    } = page;
    return /*#__PURE__*/React.createElement("div", {
      key: value
    }, /*#__PURE__*/React.createElement("button", {
      type: "button",
      className: clsx('lmnt-pagination--number', value === currentPageActual && 'lmnt-pagination-number--selected'),
      onClick: () => handlePageChange(value)
    }, value));
  }), showDirectNavigationList && /*#__PURE__*/React.createElement(Select, {
    value: currentPageActual,
    variant: "outlined",
    options: listOfPages,
    dense: true,
    style: {
      width: getSelectWidth()
    },
    onChange: handleListNavigation
  }), !hideFirstLast && /*#__PURE__*/React.createElement(IconButton, {
    className: "mdc-data-table__pagination-button",
    "data-first-page": "true",
    disabled: disablePrevPageActual,
    onClick: handleFirstPage
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "first_page"
  })), !hideNextPrev && /*#__PURE__*/React.createElement(IconButton, {
    className: "mdc-data-table__pagination-button",
    "data-prev-page": "true",
    disabled: disablePrevPageActual,
    onClick: handlePreviousPage
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "chevron_left"
  })), !hideNextPrev && /*#__PURE__*/React.createElement(IconButton, {
    className: "mdc-data-table__pagination-button",
    "data-next-page": "true",
    disabled: disableNextPageActual,
    onClick: handleNextPage
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "chevron_right"
  })), !hideFirstLast && /*#__PURE__*/React.createElement(IconButton, {
    className: "mdc-data-table__pagination-button",
    "data-last-page": "true",
    disabled: disableNextPageActual,
    onClick: handleLastPage
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: "last_page"
  })))));
});
Pagination.displayName = 'Pagination';
Pagination.propTypes = PaginationPropTypes;
Pagination.defaultProps = PaginationDefaultProps;

export { Pagination };
//# sourceMappingURL=index.es.js.map
