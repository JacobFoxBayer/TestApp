import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useRef, useImperativeHandle, useMemo } from 'react';
import clsx from 'clsx';
import { addProps } from '@element/react-common';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ElevationPropTypes = {
  /**
   * Content to be rendered inside the elevation.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * Adds a custom padding style to the child content. Must be a valid CSS padding declaration. i.e. 38px 30px
   *
   * Defaults to **null**.
   */
  customPadding: PropTypes.string,
  /**
   * Sets the distance of the elevation. Value must be between 0-24.
   *
   * Defaults to **0**.
   */
  elevation: PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]),
  /**
   * Avoids adding an extra element to the DOM and applies proper classes directly to the child element.
   *
   * Defaults to **null**.
   */
  noWrap: PropTypes.bool,
  /**
   * The elevation element will have a visible border.
   *
   * Defaults to **false**.
   */
  outlined: PropTypes.bool,
  /**
   * Adds a universal padding around the child content. `dense` is 8px, `standard` is 16px, and `airy` is 24px. If `customPadding` is used, this will be ignored.
   *
   * Defaults to **undefined**.
   */
  padding: PropTypes.oneOf(["standard", "dense", "airy"]),
  /**
   * The elevation element will have a border radius of 8px.
   *
   * Defaults to **false**.
   */
  rounded: PropTypes.bool,
  /**
   * HTML tag to render the contents in.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType, PropTypes.instanceOf(React.Component)]),
  /**
   * Adds animation when elevation is changed.
   *
   * Defaults to **null**.
   */
  transition: PropTypes.bool
};
const ElevationDefaultProps = {
  children: null,
  customPadding: null,
  elevation: 0,
  noWrap: null,
  outlined: false,
  padding: undefined,
  rounded: false,
  tag: "div",
  transition: null
};

const Elevation = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    customPadding,
    elevation,
    noWrap,
    padding,
    rounded,
    tag,
    outlined,
    style,
    transition,
    ...customProps
  } = props;
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  const classes = useMemo(() => clsx('lmnt', `mdc-elevation--z${elevation}`, padding === 'standard' && `lmnt-elevation--padding-standard`, padding === 'dense' && `lmnt-elevation--padding-dense`, padding === 'airy' && `lmnt-elevation--padding-airy`, transition && 'mdc-elevation-transition', rounded && 'lmnt-elevation--rounded', outlined && 'lmnt-elevation--outlined', className), [elevation, padding, transition, rounded, outlined, className]);
  const styles = useMemo(() => ({
    ...style,
    padding: customPadding
  }), [style, customPadding]);
  const Tag = useMemo(() => tag, [tag]);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-no-useless-fragment
    React.createElement(React.Fragment, null, noWrap ? addProps(children, {
      className: classes,
      ...customProps
    }) : /*#__PURE__*/React.createElement(Tag, _extends({
      ref: ref,
      className: classes,
      style: styles
    }, customProps), children))
  );
});
Elevation.displayName = 'Elevation';
Elevation.propTypes = ElevationPropTypes;
Elevation.defaultProps = ElevationDefaultProps;
var Elevation$1 = /*#__PURE__*/React.memo(Elevation);

export { Elevation$1 as Elevation };
//# sourceMappingURL=index.es.js.map
