import React from 'react';


export interface TypoBodyProps {
    /**
    * If true the typography will be bold.
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body. Acceptable values range from 1 - 2. Higher levels produce smaller type.
    *
    * Defaults to **1**.
    */
    level?: number;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies body copy typographic style.
 * @prop {boolean} bold - If true the typography will be bold. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} level - Sets font properties for body. Acceptable values range from 1 - 2. Higher levels produce smaller type. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoBody: React.FunctionComponent<TypoBodyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoButtonProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies button typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoButton: React.FunctionComponent<TypoButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoCaptionProps {
    /**
    * If true the typography will be bold.
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies caption typographic style.
 * @prop {boolean} bold - If true the typography will be bold. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoCaption: React.FunctionComponent<TypoCaptionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoDisplayProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type.
    *
    * Defaults to **1**.
    */
    level?: number | string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies display typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number|string} level - Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoDisplay: React.FunctionComponent<TypoDisplayProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoHeadlineProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type.
    *
    * Defaults to **1**.
    */
    level?: number | string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* 
 *@deprecated Use TypoDisplay instead
Applies headline typographic style. (DEPRECATED)
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number|string} level - Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoHeadline: React.FunctionComponent<TypoHeadlineProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoLinkProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'a'**.
    */
    tag?: string | React.ElementType | React.Component;
}

/**
* Applies link typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'a'_.
*/
export const TypoLink: React.FunctionComponent<TypoLinkProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoOverlineProps {
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies an overline typographic style.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoOverline: React.FunctionComponent<TypoOverlineProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypoSubtitleProps {
    /**
    * If true the typography will be bold.
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Sets font properties for body.
    *
    * Defaults to **1**.
    */
    level?: number;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
}

/**
* Applies subtitle typographic style.
 * @prop {boolean} bold - If true the typography will be bold. Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {number} level - Sets font properties for body. Defaults to _1_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Defaults to _undefined_.
*/
export const TypoSubtitle: React.FunctionComponent<TypoSubtitleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TypographyProps {
    /**
    * If true the typography will be bold. Applies to 1body, body2, caption, subtitle1, subtitle2
    *
    * Defaults to **false**.
    */
    bold?: boolean;
    /**
    * Expects a string, accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The DOM element to display the typography.
    *
    * Defaults to **'span'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * Sets theme color for the typography. Does not apply to Link.
    *
    * Defaults to **undefined**.
    */
    themeColor?: string;
    /**
    * Sets typography class for the element.
    *
    * Defaults to **'body1'**.
    */
    type?: string;
}

/**
* The Typography component is meant for use in styling type, so the underlying markup is made from a <span> to produce valid markup in the largest number of situations. See TypoBody, TypoButton, TypoHeadline, TypoOverline, and TypoSubtitle.
 * @prop {boolean} bold - If true the typography will be bold. Applies to 1body, body2, caption, subtitle1, subtitle2 Defaults to _false_.
 * @prop {React.ReactNode} children - Expects a string, accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - The DOM element to display the typography. Defaults to _'span'_.
 * @prop {string} themeColor - Sets theme color for the typography. Does not apply to Link. Defaults to _undefined_.
 * @prop {string} type - Sets typography class for the element. Defaults to _'body1'_.
*/
export const Typography: React.FunctionComponent<TypographyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
