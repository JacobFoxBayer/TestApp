'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var changeCase = require('change-case');
var clsx = require('clsx');
var React = require('react');
var PropTypes = require('prop-types');
var reactCommon = require('@element/react-common');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var React__default = /*#__PURE__*/_interopDefault(React);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypographyPropTypes = {
  /**
   * If true the typography will be bold. Applies to 1body, body2, caption, subtitle1, subtitle2
   *
   * Defaults to **false**.
   */
  bold: PropTypes__default["default"].bool,
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography. Does not apply to Link.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"]),
  /**
   * Sets typography class for the element.
   *
   * Defaults to **'body1'**.
   */
  type: reactCommon.deprecatedOneOf(PropTypes__default["default"].oneOf(["body1", "body1-bold", "body2", "body2-bold", "button", "caption", "caption-bold", "display1", "display2", "display3", "display4", "display5", "display6", "link", "overline", "subtitle1", "subtitle1-bold", "subtitle2", "subtitle2-bold"]), ["headline1", "headline2", "headline3", "headline4", "headline5", "headline6"], "Typography", "Please use one of 'body1','body1-bold','body2','body2-bold','button','caption','caption-bold','display1','display2','display3','display4','display5','display6','link','overline','subtitle1','subtitle1-bold','subtitle2','subtitle2-bold'.")
};
const TypographyDefaultProps = {
  bold: false,
  children: null,
  className: undefined,
  tag: "span",
  themeColor: undefined,
  type: "body1"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoBodyPropTypes = {
  /**
   * If true the typography will be bold.
   *
   * Defaults to **false**.
   */
  bold: PropTypes__default["default"].bool,
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Sets font properties for body. Acceptable values range from 1 - 2. Higher levels produce smaller type.
   *
   * Defaults to **1**.
   */
  level: PropTypes__default["default"].oneOf([1, 2]),
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"])
};
const TypoBodyDefaultProps = {
  bold: false,
  children: null,
  className: undefined,
  level: 1,
  tag: "span",
  themeColor: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoButtonPropTypes = {
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"])
};
const TypoButtonDefaultProps = {
  children: null,
  className: undefined,
  tag: "span",
  themeColor: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoCaptionPropTypes = {
  /**
   * If true the typography will be bold.
   *
   * Defaults to **false**.
   */
  bold: PropTypes__default["default"].bool,
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"])
};
const TypoCaptionDefaultProps = {
  bold: false,
  children: null,
  className: undefined,
  tag: "span",
  themeColor: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoDisplayPropTypes = {
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type.
   *
   * Defaults to **1**.
   */
  level: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf([1, 2, 3, 4, 5, 6, "1", "2", "3", "4", "5", "6"]), PropTypes__default["default"].oneOf([1, 2, 3, 4, 5, 6, "1", "2", "3", "4", "5", "6"])]),
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"])
};
const TypoDisplayDefaultProps = {
  children: null,
  className: undefined,
  level: 1,
  tag: "span",
  themeColor: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoHeadlinePropTypes = {
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Sets font properties for body. Acceptable values range from 1 to 6. Higher levels produce smaller type.
   *
   * Defaults to **1**.
   */
  level: PropTypes__default["default"].oneOfType([PropTypes__default["default"].oneOf([1, 2, 3, 4, 5, 6, "1", "2", "3", "4", "5", "6"]), PropTypes__default["default"].oneOf([1, 2, 3, 4, 5, 6, "1", "2", "3", "4", "5", "6"])]),
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"])
};
const TypoHeadlineDefaultProps = {
  children: null,
  className: undefined,
  level: 1,
  tag: "span",
  themeColor: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoLinkPropTypes = {
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'a'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)])
};
const TypoLinkDefaultProps = {
  children: null,
  className: undefined,
  tag: "a"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoOverlinePropTypes = {
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"])
};
const TypoOverlineDefaultProps = {
  children: null,
  className: undefined,
  tag: "span",
  themeColor: undefined
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TypoSubtitlePropTypes = {
  /**
   * If true the typography will be bold.
   *
   * Defaults to **false**.
   */
  bold: PropTypes__default["default"].bool,
  /**
   * Expects a string, accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Sets font properties for body.
   *
   * Defaults to **1**.
   */
  level: PropTypes__default["default"].oneOf([1, 2]),
  /**
   * The DOM element to display the typography.
   *
   * Defaults to **'span'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * Sets theme color for the typography.
   *
   * Defaults to **undefined**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "error", "textPrimaryOnBackground", "textSecondaryOnBackground", "textHintOnBackground", "textDisabledOnBackground", "textIconOnBackground", "textPrimaryOnLight", "textSecondaryOnLight", "textHintOnLight", "textDisabledOnLight", "textIconOnLight"])
};
const TypoSubtitleDefaultProps = {
  bold: false,
  children: null,
  className: undefined,
  level: 1,
  tag: "span",
  themeColor: undefined
};

const TypoBody = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    level,
    bold,
    tag,
    ...customProps
  } = props;
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const classes = clsx__default["default"]('mdc-typography', `lmnt mdc-typography--body${level}`, bold && `mdc-typography--body${level}-bold`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    className: classes
  }, customProps, {
    ref: ref
  }), children);
});
TypoBody.displayName = 'TypoBody';
TypoBody.propTypes = TypoBodyPropTypes;
TypoBody.defaultProps = TypoBodyDefaultProps;

const TypoButton = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    tag,
    ...customProps
  } = props;
  const classes = clsx__default["default"]('mdc-typography', `lmnt mdc-typography--button`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    ref: ref,
    className: classes
  }, customProps), children);
});
TypoButton.displayName = 'TypoButton';
TypoButton.propTypes = TypoButtonPropTypes;
TypoButton.defaultProps = TypoButtonDefaultProps;

const TypoCaption = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    tag,
    bold,
    ...customProps
  } = props;
  const classes = clsx__default["default"]('mdc-typography', `lmnt mdc-typography--caption`, bold && `mdc-typography--caption-bold`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    ref: ref,
    className: classes
  }, customProps), children);
});
TypoCaption.displayName = 'TypoCaption';
TypoCaption.propTypes = TypoCaptionPropTypes;
TypoCaption.defaultProps = TypoCaptionDefaultProps;

const TypoDisplay = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    level,
    tag,
    ...customProps
  } = props;
  const classes = clsx__default["default"]('mdc-typography', `lmnt mdc-typography--headline${level}`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    ref: ref,
    className: classes
  }, customProps), children);
});
TypoDisplay.displayName = 'TypoDisplay';
TypoDisplay.propTypes = TypoDisplayPropTypes;
TypoDisplay.defaultProps = TypoDisplayDefaultProps;

const TypoHeadline = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    level,
    tag,
    ...customProps
  } = props;
  React.useEffect(() => reactCommon.deprecatedComponent('TypoHeadline', 'This component is being replaced with TypoDisplay and will be removed in a future version.  Please use TypoDisplay instead.'), []);
  const classes = clsx__default["default"]('mdc-typography', `lmnt mdc-typography--headline${level}`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    ref: ref,
    className: classes
  }, customProps), children);
});
TypoHeadline.displayName = 'TypoHeadline';
TypoHeadline.propTypes = TypoHeadlinePropTypes;
TypoHeadline.defaultProps = TypoHeadlineDefaultProps;

const TypoLink = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    tag,
    ...customProps
  } = props;
  const classes = clsx__default["default"](`mdc-typography lmnt-theme-link`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    ref: ref,
    className: classes
  }, customProps), children);
});
TypoLink.displayName = 'TypoLink';
TypoLink.propTypes = TypoLinkPropTypes;
TypoLink.defaultProps = TypoLinkDefaultProps;

const TypoOverline = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    tag,
    ...customProps
  } = props;
  const typographyClass = clsx__default["default"]('mdc-typography', `lmnt mdc-typography--overline`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    ref: ref,
    className: typographyClass
  }, customProps), children);
});
TypoOverline.displayName = 'TypoOverline';
TypoOverline.propTypes = TypoOverlinePropTypes;
TypoOverline.defaultProps = TypoOverlineDefaultProps;

const TypoSubtitle = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    className,
    children,
    themeColor,
    level,
    tag,
    bold,
    ...customProps
  } = props;
  const typographyClass = clsx__default["default"]('mdc-typography', `lmnt mdc-typography--subtitle${level || ''}`, bold && `mdc-typography--subtitle${level}-bold`, themeColor && `mdc-theme--${changeCase.paramCase(themeColor)}`, className);
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const CompTag = tag;
  return /*#__PURE__*/React__default["default"].createElement(CompTag, _extends__default["default"]({
    ref: ref,
    className: typographyClass
  }, customProps), children);
});
TypoSubtitle.displayName = 'TypoSubtitle';
TypoSubtitle.propTypes = TypoSubtitlePropTypes;
TypoSubtitle.defaultProps = TypoSubtitleDefaultProps;

const Typography = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    bold,
    children,
    type,
    themeColor,
    tag,
    ...customProps
  } = props;
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  switch (type) {
    case 'body1':
      return /*#__PURE__*/React__default["default"].createElement(TypoBody, _extends__default["default"]({
        level: 1,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'body1-bold':
      return /*#__PURE__*/React__default["default"].createElement(TypoBody, _extends__default["default"]({
        bold: true,
        level: 1,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'body2-bold':
      return /*#__PURE__*/React__default["default"].createElement(TypoBody, _extends__default["default"]({
        bold: true,
        level: 2,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'body2':
      return /*#__PURE__*/React__default["default"].createElement(TypoBody, _extends__default["default"]({
        level: 2,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'button':
      return /*#__PURE__*/React__default["default"].createElement(TypoButton, _extends__default["default"]({
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'caption':
      return /*#__PURE__*/React__default["default"].createElement(TypoCaption, _extends__default["default"]({
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'caption-bold':
      return /*#__PURE__*/React__default["default"].createElement(TypoCaption, _extends__default["default"]({
        bold: true,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'display1':
    case 'headline1':
      return /*#__PURE__*/React__default["default"].createElement(TypoDisplay, _extends__default["default"]({
        level: 1,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'display2':
    case 'headline2':
      return /*#__PURE__*/React__default["default"].createElement(TypoDisplay, _extends__default["default"]({
        level: 2,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'display3':
    case 'headline3':
      return /*#__PURE__*/React__default["default"].createElement(TypoDisplay, _extends__default["default"]({
        level: 3,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'display4':
    case 'headline4':
      return /*#__PURE__*/React__default["default"].createElement(TypoDisplay, _extends__default["default"]({
        level: 4,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'display5':
    case 'headline5':
      return /*#__PURE__*/React__default["default"].createElement(TypoDisplay, _extends__default["default"]({
        level: 5,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'display6':
    case 'headline6':
      return /*#__PURE__*/React__default["default"].createElement(TypoDisplay, _extends__default["default"]({
        level: 6,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'overline':
      return /*#__PURE__*/React__default["default"].createElement(TypoOverline, _extends__default["default"]({
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    case 'subtitle1':
      return /*#__PURE__*/React__default["default"].createElement(TypoSubtitle, _extends__default["default"]({
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps, {
        level: 1
      }), children);
    case 'subtitle1-bold':
      return /*#__PURE__*/React__default["default"].createElement(TypoSubtitle, _extends__default["default"]({
        bold: true,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps, {
        level: 1
      }), children);
    case 'subtitle2-bold':
      return /*#__PURE__*/React__default["default"].createElement(TypoSubtitle, _extends__default["default"]({
        bold: true,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps, {
        level: 2
      }), children);
    case 'subtitle2':
      return /*#__PURE__*/React__default["default"].createElement(TypoSubtitle, _extends__default["default"]({
        level: 2,
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps), children);
    default:
      return /*#__PURE__*/React__default["default"].createElement(TypoBody, _extends__default["default"]({
        tag: tag,
        ref: ref,
        themeColor: themeColor
      }, customProps, {
        level: 1
      }), children);
  }
});
Typography.displayName = 'Typography';
Typography.propTypes = TypographyPropTypes;
Typography.defaultProps = TypographyDefaultProps;

exports.TypoBody = TypoBody;
exports.TypoButton = TypoButton;
exports.TypoCaption = TypoCaption;
exports.TypoDisplay = TypoDisplay;
exports.TypoHeadline = TypoHeadline;
exports.TypoLink = TypoLink;
exports.TypoOverline = TypoOverline;
exports.TypoSubtitle = TypoSubtitle;
exports.Typography = Typography;
//# sourceMappingURL=index.js.map
