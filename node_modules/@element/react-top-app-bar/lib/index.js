'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var reactIconButton = require('@element/react-icon-button');
var reactIcon = require('@element/react-icon');
var clsx = require('clsx');
var PropTypes = require('prop-types');
var reactCommon = require('@element/react-common');
var topAppBar = require('@material/top-app-bar');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TopAppBarPropTypes = {
  /**
   * Expects one or more ActionItems, will accept any valid components or markup.
   *
   * Defaults to **null**.
   */
  actions: PropTypes__default["default"].node,
  /**
   * Content to be rendered in the center of TopAppBar. Accepts any valid markup. Cannot be used with Title and Subtitle.
   *
   * Defaults to **undefined**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The top app bar will styled contextually and displaying `contextualActions`. A top app bar can transform into a contextual top app bar to provide contextual actions to selected items. For example, if a photo is selected, phot editing actions can be displayed.
   *
   * Defaults to **false**.
   */
  contextual: PropTypes__default["default"].bool,
  /**
   * Visual theme of the contextual background, dark or light
   *
   * Defaults to **'dark'**.
   */
  contextualTheme: PropTypes__default["default"].oneOf(["dark", "light"]),
  /**
   * The TopAppBar will have reduced padding.
   *
   * Defaults to **false**.
   */
  dense: PropTypes__default["default"].bool,
  /**
   * Whether or not the top app bar is elevated. By default it will be elevated on scroll only.
   *
   * Defaults to **false**.
   */
  elevated: PropTypes__default["default"].bool,
  /**
   * The TopAppBar will remain on screen.
   *
   * Defaults to **true**.
   */
  fixed: PropTypes__default["default"].bool,
  /**
   * Optional logo. Expects an image but accepts any valid markup.
   *
   * Defaults to **null**.
   */
  logo: PropTypes__default["default"].node,
  /**
   * Size of the logo. Use `small` for 40x40, `medium` for 80x40, `large` for 130x40 images and `lgSquare` for 48x48.
   *
   * Defaults to **'small'**.
   */
  logoSize: PropTypes__default["default"].oneOf(["small", "medium", "large", "lgSquare"]),
  /**
   * Optionally wrap both the logo and title content. This is intended for situations where a combined clickable logo & title would be used to go to the home/root of a website or application. Note: any interaction styling and accessibility concerns need to be handled by the wrapper itself (which is recommended for accessibility).
   *
   * Defaults to **undefined**.
   */
  logoTitleWrapper: PropTypes__default["default"].oneOfType([PropTypes__default["default"].node, PropTypes__default["default"].func]),
  /**
   * Navigation icon to trigger a menu. Expects an IconButton but accepts any valid markup.
   *
   * Defaults to **null**.
   */
  navigation: PropTypes__default["default"].node,
  /**
   * Fired when navigation icon is clicked.
   *
   * Defaults to **null**.
   */
  onNavigation: PropTypes__default["default"].func,
  /**
   * The TopAppBar will have increased padding.
   *
   * Defaults to **false**.
   */
  prominent: PropTypes__default["default"].bool,
  /**
   * Tabs to be displayed in the lower slot of the top app bar. If this props is present the prominent props is automatically applied. If the actions prop is tabs actions will be ignored. Expects Element Tabs, but accepts any valid components or markup.
   *
   * Defaults to **null**.
   */
  prominentTabs: PropTypes__default["default"].node,
  /**
   * Set a custom scroll target for the top app bar, defaults to window.
   *
   * Defaults to **'window'**.
   */
  scrollTarget: PropTypes__default["default"].oneOfType([PropTypes__default["default"].node, PropTypes__default["default"].string]),
  /**
   * Subtitle text for the Top App Bar. Cannot be used with children.
   *
   * Defaults to **null**.
   */
  subtitle: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].node]),
  /**
   * Indicates whether the actions are tabs. Only necessary if not using Element Tabs. Will apply styles automatically for Element Tabs. Custom CSS may be necessary if not using Element Tabs.
   *
   * Defaults to **false**.
   */
  tabActions: PropTypes__default["default"].bool,
  /**
   * Background theme color. Accepts one of 'primary', 'secondary', or 'surface'.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary", "surface", "linear-gradient-white-to-bottom", "linear-gradient-white-to-top", "linear-gradient-black-to-bottom", "linear-gradient-black-to-top", "linear-gradient-primary-dark-to-bottom", "linear-gradient-primary-dark-to-top", "linear-gradient-primary-darker-to-bottom", "linear-gradient-primary-darker-to-top", "linear-gradient-primary-to-bottom", "linear-gradient-primary-to-top", "linear-gradient-secondary-dark-to-bottom", "linear-gradient-secondary-dark-to-top", "linear-gradient-secondary-darker-to-bottom", "linear-gradient-secondary-darker-to-top", "linear-gradient-secondary-to-bottom", "linear-gradient-secondary-to-top"]),
  /**
   * Title text for the Top App Bar. Cannot be used with children.
   *
   * Defaults to **null**.
   */
  title: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].node]),
  /**
   * If true the top app bar's content will have a max width according to your theme's breakpoints.
   *
   * Defaults to **false**.
   */
  useContentMaxWidth: PropTypes__default["default"].bool
};
const TopAppBarDefaultProps = {
  actions: null,
  children: undefined,
  className: undefined,
  contextual: false,
  contextualTheme: "dark",
  dense: false,
  elevated: false,
  fixed: true,
  logo: null,
  logoSize: "small",
  logoTitleWrapper: undefined,
  navigation: null,
  prominent: false,
  prominentTabs: null,
  scrollTarget: "window",
  subtitle: null,
  tabActions: false,
  themeColor: "primary",
  title: null,
  useContentMaxWidth: false
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ActionItemPropTypes = {
  /**
   * The custom action notification badge to be rendered.
   *
   * Defaults to **undefined**.
   */
  badge: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].func, PropTypes__default["default"].node]),
  /**
   * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons).
   *
   * Defaults to **null**.
   */
  icon: PropTypes__default["default"].string,
  /**
   * ARIA label value to support screen readers.
   *
   * Defaults to **null**.
   */
  label: PropTypes__default["default"].string,
  /**
   * Type of action item to be rendered.
   *
   * Defaults to **'icon'**.
   */
  type: PropTypes__default["default"].oneOf(["icon", "link", "tabs"])
};
const ActionItemDefaultProps = {
  badge: undefined,
  icon: null,
  label: null,
  type: "icon"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TopAppBarFixedAdjustPropTypes = {
  /**
   * Apply the adjusted left margin.
   *
   * Defaults to **false**.
   */
  bannerOpen: PropTypes__default["default"].bool,
  /**
   * Content to be rendered inside the TopAppBar. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Set to the same value as in TopAppBar to have the correct spacing.
   *
   * Defaults to **false**.
   */
  dense: PropTypes__default["default"].bool,
  /**
   * Set to the same value as in TopAppBar to have the correct spacing.
   *
   * Defaults to **false**.
   */
  prominent: PropTypes__default["default"].bool,
  /**
   * Base component/tag that will be rendered.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * If true the content will have a max width according to your theme's breakpoints.
   *
   * Defaults to **false**.
   */
  useContentMaxWidth: PropTypes__default["default"].bool
};
const TopAppBarFixedAdjustDefaultProps = {
  bannerOpen: false,
  children: null,
  className: undefined,
  dense: false,
  prominent: false,
  tag: "div",
  useContentMaxWidth: false
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const TopAppBarContentWrapperPropTypes = {
  /**
   * Content to be rendered inside the TopAppBar. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string
};
const TopAppBarContentWrapperDefaultProps = {
  children: null,
  className: undefined
};

const ActionItem = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    badge,
    type,
    label,
    icon,
    className,
    iconType,
    ...customProps
  } = props;
  if (type === 'link') {
    return /*#__PURE__*/React__default["default"].createElement("a", _extends__default["default"]({
      ref: externalRef
    }, customProps, {
      className: "lmnt-top-app-bar__action-item--link mdc-typography--subtitle2"
    }), label);
  }
  return /*#__PURE__*/React__default["default"].createElement(reactIconButton.IconButton, _extends__default["default"]({
    ref: externalRef,
    "aria-label": label,
    className: clsx__default["default"]('lmnt', 'mdc-top-app-bar__action-item', className)
  }, customProps), /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, {
    icon: icon,
    badge: badge,
    badgePlacement: "left-start"
  }));
});
ActionItem.displayName = 'TopAppBarActionItem';
ActionItem.propTypes = ActionItemPropTypes;
ActionItem.defaultProps = ActionItemDefaultProps;

const TopAppBarContentWrapper = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    ...customProps
  } = props;
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ({
    current: ref.current
  }), []);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: clsx__default["default"]('lmnt', 'lmnt-top-app-bar__content', className)
  }, customProps), children);
});
TopAppBarContentWrapper.displayName = 'TopAppBarTopAppBarContentWrapper';
TopAppBarContentWrapper.propTypes = TopAppBarContentWrapperPropTypes;
TopAppBarContentWrapper.defaultProps = TopAppBarContentWrapperDefaultProps;

const createWrappedLogoTitle = Wrapper => children => /*#__PURE__*/React__default["default"].createElement(Wrapper, null, /*#__PURE__*/React__default["default"].createElement("div", {
  className: "lmnt-top-app-bar__logo-title-wrapper"
}, children));
const createWrappedContent = Wrapper => children => /*#__PURE__*/React__default["default"].createElement(Wrapper, null, children);
const TopAppBar = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    actions,
    children,
    className,
    contextual,
    contextualActions,
    contextualTheme,
    dense,
    elevated,
    fixed,
    logo,
    logoSize,
    logoTitleWrapper,
    navigation,
    onNavigation,
    prominent,
    prominentTabs,
    scrollTarget,
    subtitle,
    tabActions,
    themeColor,
    title,
    useContentMaxWidth,
    ...customProps
  } = props;
  const ref = React.useRef();
  const mdcTopAppBarRef = React.useRef();
  const actionsActual = contextual ? contextualActions : actions;
  const [height, setHeight] = React.useState();
  React.useImperativeHandle(externalRef, () => ({
    height,
    current: ref.current
  }), [height]);
  const isTabs = React.useMemo(() => {
    var _actionsActual$type;
    return (actionsActual === null || actionsActual === void 0 ? void 0 : (_actionsActual$type = actionsActual.type) === null || _actionsActual$type === void 0 ? void 0 : _actionsActual$type.displayName) === 'TabBar' || tabActions;
  }, [actionsActual, tabActions]);
  const isProminent = React.useMemo(() => prominent || prominentTabs, [prominent, prominentTabs]);
  const showActions = React.useMemo(() => {
    if (isTabs && prominentTabs) return false;
    return !!actionsActual;
  }, [actionsActual, isTabs, prominentTabs]);
  React.useEffect(() => {
    mdcTopAppBarRef.current = topAppBar.MDCTopAppBar.attachTo(ref.current);
    setHeight(mdcTopAppBarRef.current.foundation.adapter.getTopAppBarHeight());
    return () => {
      mdcTopAppBarRef.current.destroy();
    };
  }, []);
  React.useEffect(() => {
    if (scrollTarget !== 'window') {
      if (typeof scrollTarget === 'string') {
        const target = reactCommon.edsQuerySelector(scrollTarget);
        if (target) mdcTopAppBarRef.current.setScrollTarget(target);
      } else {
        mdcTopAppBarRef.current.setScrollTarget(scrollTarget);
      }
    }
  }, [scrollTarget]);
  const titleAndActions = React.useMemo(() => /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("section", {
    className: "mdc-top-app-bar__section mdc-top-app-bar__section--align-start"
  }, navigation && reactCommon.addProps(navigation, {
    onClick: onNavigation,
    className: 'mdc-top-app-bar__navigation-icon'
  }), /*#__PURE__*/React__default["default"].createElement(reactCommon.ConditionalWrapper, {
    condition: logoTitleWrapper,
    wrapper: createWrappedLogoTitle(logoTitleWrapper)
  }, logo && /*#__PURE__*/React__default["default"].createElement("div", {
    className: clsx__default["default"]('lmnt-top-app-bar__logo', logoSize === 'small' && 'lmnt-top-app-bar__logo--small', logoSize === 'medium' && 'lmnt-top-app-bar__logo--medium', logoSize === 'large' && 'lmnt-top-app-bar__logo--large', logoSize === 'lgSquare' && 'lmnt-top-app-bar__logo--large-square')
  }, logo), (title || subtitle) && !children && /*#__PURE__*/React__default["default"].createElement("div", {
    className: clsx__default["default"]('mdc-top-app-bar__title', subtitle && 'mdc-top-app-bar__title--with-subtitle')
  }, !children && title && /*#__PURE__*/React__default["default"].createElement("span", null, title), !children && subtitle && /*#__PURE__*/React__default["default"].createElement("span", {
    className: "lmnt-top-app-bar__subtitle mdc-typography--subtitle2"
  }, subtitle)))), !title && !subtitle && children && /*#__PURE__*/React__default["default"].createElement("section", {
    className: "mdc-top-app-bar__section lmnt-top-app-bar__children",
    role: "toolbar"
  }, children), showActions && /*#__PURE__*/React__default["default"].createElement("section", {
    className: clsx__default["default"]('mdc-top-app-bar__section', 'mdc-top-app-bar__section--align-end', isTabs && 'lmnt-top-app-bar__section--tab-actions'),
    role: "toolbar"
  }, actionsActual)), [actionsActual, children, isTabs, logo, logoSize, logoTitleWrapper, navigation, onNavigation, showActions, subtitle, title]);
  const themeColorClass = React.useMemo(() => {
    if (themeColor.includes('gradient')) return `lmnt-theme--bg-${themeColor}`;
    return `lmnt-top-app-bar--${themeColor}`;
  }, [themeColor]);
  return /*#__PURE__*/React__default["default"].createElement("header", _extends__default["default"]({
    ref: ref
  }, customProps, {
    className: clsx__default["default"]('lmnt', 'mdc-top-app-bar', 'lmnt-top-app-bar', isProminent && 'mdc-top-app-bar--prominent', prominentTabs && 'mdc-top-app-bar--prominent-tabs', dense && 'mdc-top-app-bar--dense', fixed && 'mdc-top-app-bar--fixed', themeColorClass, elevated && 'mdc-elevation--z4', contextual && 'lmnt-top-app-bar--contextual', contextualTheme === 'dark' && 'lmnt-top-app-bar--contextual-dark', contextualTheme === 'light' && 'lmnt-top-app-bar--contextual-light', useContentMaxWidth && 'lmnt-top-app-bar-with-max-content-width', className)
  }), /*#__PURE__*/React__default["default"].createElement(reactCommon.ConditionalWrapper, {
    condition: useContentMaxWidth,
    wrapper: createWrappedContent(TopAppBarContentWrapper)
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-top-app-bar__row"
  }, prominentTabs ? /*#__PURE__*/React__default["default"].createElement("div", {
    className: "lmnt-top-app-bar__title-and-actions"
  }, titleAndActions) : titleAndActions, prominentTabs && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "lmnt-top-app-bar__prominent-tabs"
  }, prominentTabs))));
});
TopAppBar.displayName = 'TopAppBar';
TopAppBar.propTypes = TopAppBarPropTypes;
TopAppBar.defaultProps = TopAppBarDefaultProps;

const TopAppBarFixedAdjust = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    bannerOpen,
    children,
    className,
    dense,
    prominent,
    tag: Tag,
    useContentMaxWidth,
    ...customProps
  } = props;
  return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: externalRef,
    className: clsx__default["default"](bannerOpen && 'lmnt-top-app-bar-open-banner--fixed-adjust', !prominent && !dense && 'mdc-top-app-bar--fixed-adjust', prominent && !dense && 'mdc-top-app-bar--prominent-fixed-adjust', !prominent && dense && 'mdc-top-app-bar--dense-fixed-adjust', prominent && dense && 'mdc-top-app-bar--dense-prominent-fixed-adjust', useContentMaxWidth && 'lmnt-top-app-bar-fixed-adjust-with-max-content-width', className)
  }, customProps), children);
});
TopAppBarFixedAdjust.displayName = 'TopAppBarFixedAdjust';
TopAppBarFixedAdjust.propTypes = TopAppBarFixedAdjustPropTypes;
TopAppBarFixedAdjust.defaultProps = TopAppBarFixedAdjustDefaultProps;

exports.ActionItem = ActionItem;
exports.TopAppBar = TopAppBar;
exports.TopAppBarContentWrapper = TopAppBarContentWrapper;
exports.TopAppBarFixedAdjust = TopAppBarFixedAdjust;
exports.TopBarActionItem = ActionItem;
//# sourceMappingURL=index.js.map
