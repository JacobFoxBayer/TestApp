import React from 'react';


export interface ActionItemProps {
    /**
    * The custom action notification badge to be rendered.
    *
    * Defaults to **undefined**.
    */
    badge?: string | Function | React.ReactNode;
    /**
    * Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons).
    *
    * Defaults to **null**.
    */
    icon?: string;
    /**
    * ARIA label value to support screen readers.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Type of action item to be rendered.
    *
    * Defaults to **'icon'**.
    */
    type?: string;
}

/**
* ActionItems are a special type of IconButton meant for use with TopAppBar `actions`.
 * @prop {string|function|React.ReactNode} badge - The custom action notification badge to be rendered. Defaults to _undefined_.
 * @prop {string} icon - Accepts the name of any valid material icon (see Icon component documentation for a list of valid icons). Defaults to _null_.
 * @prop {string} label - ARIA label value to support screen readers. Defaults to _null_.
 * @prop {string} type - Type of action item to be rendered. Defaults to _'icon'_.
*/
export const ActionItem: React.FunctionComponent<ActionItemProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TopAppBarProps {
    /**
    * Expects one or more ActionItems, will accept any valid components or markup.
    *
    * Defaults to **null**.
    */
    actions?: React.ReactNode;
    /**
    * Content to be rendered in the center of TopAppBar. Accepts any valid markup. Cannot be used with Title and Subtitle.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The top app bar will styled contextually and displaying `contextualActions`. A top app bar can transform into a contextual top app bar to provide contextual actions to selected items. For example, if a photo is selected, phot editing actions can be displayed.
    *
    * Defaults to **false**.
    */
    contextual?: boolean;
    /**
    * Visual theme of the contextual background, dark or light
    *
    * Defaults to **'dark'**.
    */
    contextualTheme?: string;
    /**
    * The TopAppBar will have reduced padding.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Whether or not the top app bar is elevated. By default it will be elevated on scroll only.
    *
    * Defaults to **false**.
    */
    elevated?: boolean;
    /**
    * The TopAppBar will remain on screen.
    *
    * Defaults to **true**.
    */
    fixed?: boolean;
    /**
    * Optional logo. Expects an image but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    logo?: React.ReactNode;
    /**
    * Size of the logo. Use `small` for 40x40, `medium` for 80x40, `large` for 130x40 images and `lgSquare` for 48x48.
    *
    * Defaults to **'small'**.
    */
    logoSize?: string;
    /**
    * Optionally wrap both the logo and title content. This is intended for situations where a combined clickable logo & title would be used to go to the home/root of a website or application. Note: any interaction styling and accessibility concerns need to be handled by the wrapper itself (which is recommended for accessibility).
    *
    * Defaults to **undefined**.
    */
    logoTitleWrapper?: React.ReactNode | Function;
    /**
    * Navigation icon to trigger a menu. Expects an IconButton but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    navigation?: React.ReactNode;
    /**
    * The TopAppBar will have increased padding.
    *
    * Defaults to **false**.
    */
    prominent?: boolean;
    /**
    * Tabs to be displayed in the lower slot of the top app bar. If this props is present the prominent props is automatically applied. If the actions prop is tabs actions will be ignored. Expects Element Tabs, but accepts any valid components or markup.
    *
    * Defaults to **null**.
    */
    prominentTabs?: React.ReactNode;
    /**
    * Set a custom scroll target for the top app bar, defaults to window.
    *
    * Defaults to **'window'**.
    */
    scrollTarget?: React.ReactNode | string;
    /**
    * Subtitle text for the Top App Bar. Cannot be used with children.
    *
    * Defaults to **null**.
    */
    subtitle?: string | React.ReactNode;
    /**
    * Indicates whether the actions are tabs. Only necessary if not using Element Tabs. Will apply styles automatically for Element Tabs. Custom CSS may be necessary if not using Element Tabs.
    *
    * Defaults to **false**.
    */
    tabActions?: boolean;
    /**
    * Background theme color. Accepts one of 'primary', 'secondary', or 'surface'.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Title text for the Top App Bar. Cannot be used with children.
    *
    * Defaults to **null**.
    */
    title?: string | React.ReactNode;
    /**
    * If true the top app bar's content will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useContentMaxWidth?: boolean;
    /**
    * Fired when navigation icon is clicked.
    */
    onNavigation?: Function;
}

/**
* The top application bar display information and actions relating to the current screen. It can contain branding, screen titles, navigation, and actions.
 * @prop {React.ReactNode} actions - Expects one or more ActionItems, will accept any valid components or markup. Defaults to _null_.
 * @prop {React.ReactNode} children - Content to be rendered in the center of TopAppBar. Accepts any valid markup. Cannot be used with Title and Subtitle. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} contextual - The top app bar will styled contextually and displaying `contextualActions`. A top app bar can transform into a contextual top app bar to provide contextual actions to selected items. For example, if a photo is selected, phot editing actions can be displayed. Defaults to _false_.
 * @prop {string} contextualTheme - Visual theme of the contextual background, dark or light Defaults to _'dark'_.
 * @prop {boolean} dense - The TopAppBar will have reduced padding. Defaults to _false_.
 * @prop {boolean} elevated - Whether or not the top app bar is elevated. By default it will be elevated on scroll only. Defaults to _false_.
 * @prop {boolean} fixed - The TopAppBar will remain on screen. Defaults to _true_.
 * @prop {React.ReactNode} logo - Optional logo. Expects an image but accepts any valid markup. Defaults to _null_.
 * @prop {string} logoSize - Size of the logo. Use `small` for 40x40, `medium` for 80x40, `large` for 130x40 images and `lgSquare` for 48x48. Defaults to _'small'_.
 * @prop {React.ReactNode|function} logoTitleWrapper - Optionally wrap both the logo and title content. This is intended for situations where a combined clickable logo & title would be used to go to the home/root of a website or application. Note: any interaction styling and accessibility concerns need to be handled by the wrapper itself (which is recommended for accessibility). Defaults to _undefined_.
 * @prop {React.ReactNode} navigation - Navigation icon to trigger a menu. Expects an IconButton but accepts any valid markup. Defaults to _null_.
 * @prop {boolean} prominent - The TopAppBar will have increased padding. Defaults to _false_.
 * @prop {React.ReactNode} prominentTabs - Tabs to be displayed in the lower slot of the top app bar. If this props is present the prominent props is automatically applied. If the actions prop is tabs actions will be ignored. Expects Element Tabs, but accepts any valid components or markup. Defaults to _null_.
 * @prop {React.ReactNode|string} scrollTarget - Set a custom scroll target for the top app bar, defaults to window. Defaults to _'window'_.
 * @prop {string|React.ReactNode} subtitle - Subtitle text for the Top App Bar. Cannot be used with children. Defaults to _null_.
 * @prop {boolean} tabActions - Indicates whether the actions are tabs. Only necessary if not using Element Tabs. Will apply styles automatically for Element Tabs. Custom CSS may be necessary if not using Element Tabs. Defaults to _false_.
 * @prop {string} themeColor - Background theme color. Accepts one of 'primary', 'secondary', or 'surface'. Defaults to _'primary'_.
 * @prop {string|React.ReactNode} title - Title text for the Top App Bar. Cannot be used with children. Defaults to _null_.
 * @prop {boolean} useContentMaxWidth - If true the top app bar's content will have a max width according to your theme's breakpoints. Defaults to _false_.
 *  @event onNavigation - Fired when navigation icon is clicked.
*/
export const TopAppBar: React.FunctionComponent<TopAppBarProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TopAppBarContentWrapperProps {
    /**
    * Content to be rendered inside the TopAppBar. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
}

/**
* Top App Bar Content Wrapper is used to wrap the content of the top app bar when `useContentMaxWidth` is true.
 * @prop {React.ReactNode} children - Content to be rendered inside the TopAppBar. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
*/
export const TopAppBarContentWrapper: React.FunctionComponent<TopAppBarContentWrapperProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface TopAppBarFixedAdjustProps {
    /**
    * Apply the adjusted left margin.
    *
    * Defaults to **false**.
    */
    bannerOpen?: boolean;
    /**
    * Content to be rendered inside the TopAppBar. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Set to the same value as in TopAppBar to have the correct spacing.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Set to the same value as in TopAppBar to have the correct spacing.
    *
    * Defaults to **false**.
    */
    prominent?: boolean;
    /**
    * Base component/tag that will be rendered.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * If true the content will have a max width according to your theme's breakpoints.
    *
    * Defaults to **false**.
    */
    useContentMaxWidth?: boolean;
}

/**
* A container to correctly position content when using a fixed TopAppBar.
 * @prop {boolean} bannerOpen - Apply the adjusted left margin. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered inside the TopAppBar. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} dense - Set to the same value as in TopAppBar to have the correct spacing. Defaults to _false_.
 * @prop {boolean} prominent - Set to the same value as in TopAppBar to have the correct spacing. Defaults to _false_.
 * @prop {string|React.ElementType|React.Component} tag - Base component/tag that will be rendered. Defaults to _'div'_.
 * @prop {boolean} useContentMaxWidth - If true the content will have a max width according to your theme's breakpoints. Defaults to _false_.
*/
export const TopAppBarFixedAdjust: React.FunctionComponent<TopAppBarFixedAdjustProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
