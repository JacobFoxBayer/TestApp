import React from 'react';


export interface CardProps {
    /**
    * Alignment of the Card Body.
    *
    * Defaults to **'left-top'**.
    */
    bodyAlignment?: string;
    /**
    * Content to be rendered inside the Card. Should be one of CardActions, CardBody,  CardContent, CardDivider, CardFilter, CardMedia, or CardTitle.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Height style property of card.
    *
    * Defaults to **'auto'**.
    */
    height?: string;
    /**
    * If true the card will be styled for a loading spinner
    *
    * Defaults to **false**.
    */
    loadingCard?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Background color of the card. It is recommended to set to transparent if setting theme color on the Card Title or Card Body.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Variant options include `default` (set by theme), `flat`, `outlined`, and `raised`. The `flat` variant removes elevation. The `outlined` variant adds border and removes elevation. The `raised` variant adds elevation.
    *
    * Defaults to **'default'**.
    */
    variant?: string;
}

/**
* Cards contain content and actions related to a single subject. They help to organize content and increase scannability.
 * @prop {string} bodyAlignment - Alignment of the Card Body. Defaults to _'left-top'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the Card. Should be one of CardActions, CardBody,  CardContent, CardDivider, CardFilter, CardMedia, or CardTitle. Defaults to _null_.
 * @prop {string} height - Height style property of card. Defaults to _'auto'_.
 * @prop {boolean} loadingCard - If true the card will be styled for a loading spinner Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {string} themeColor - Background color of the card. It is recommended to set to transparent if setting theme color on the Card Title or Card Body. Defaults to _'surface'_.
 * @prop {string} variant - Variant options include `default` (set by theme), `flat`, `outlined`, and `raised`. The `flat` variant removes elevation. The `outlined` variant adds border and removes elevation. The `raised` variant adds elevation. Defaults to _'default'_.
*/
export const Card: React.FunctionComponent<CardProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


interface CardActionButtonReference { current: object; }

export interface CardActionButtonProps {
    /**
    * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    actionButtonThemeColor?: string;
    /**
    * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Reference to the DOM button. This enables a greater level of integration.
    *
    * Defaults to **undefined**.
    */
    customRef?: Function|CardActionButtonReference;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Applies a full-width style where the button will fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The button will render as an anchor tag.
    *
    * Defaults to **null**.
    */
    href?: string;
    /**
    * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
    *
    * Defaults to **null**.
    */
    leadingIcon?: string | React.ReactNode;
    /**
    * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
    *
    * Defaults to **null**.
    */
    trailingIcon?: string | React.ReactNode;
    /**
    * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
    *
    * Defaults to **'button'**.
    */
    type?: string;
    /**
    * The primary interaction event for button.
    */
    onClick?: Function;
}

/**
* Button specially formatted for Element Card.
 * @prop {string} actionButtonThemeColor - Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._ Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} customRef - Reference to the DOM button. This enables a greater level of integration. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {boolean} fullWidth - Applies a full-width style where the button will fill it's container. Defaults to _false_.
 * @prop {string} href - The button will render as an anchor tag. Defaults to _null_.
 * @prop {string} label - The displayed text. Expects a valid string. If label and children are both set, label will take priority. Defaults to _null_.
 * @prop {string|React.ReactNode} leadingIcon - Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control, Defaults to _null_.
 * @prop {string|React.ReactNode} trailingIcon - Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control. Defaults to _null_.
 * @prop {string} type - This applies the html button type (button, submit, reset) or the anchor media type when used with the href property. Defaults to _'button'_.
 *  @event onClick - The primary interaction event for button.
*/
export const CardActionButton: React.FunctionComponent<CardActionButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardActionIconProps {
    /**
    * Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally.
    *
    * Defaults to **false**.
    */
    active?: boolean;
    /**
    * Accessibility label for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabel?: string;
    /**
    * Id of the component being labeled for assistive technologies.
    *
    * Defaults to **null**.
    */
    ariaLabelledBy?: string;
    /**
    * The content when when using the Card Action Icon Button normally. Expects a string, but a valid custom icon is accepted. For toggle button functionality, use `toggleOn` and `toggleOff` instead.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Disables the icon button.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The content to be rendered when the Card Action Icon Button is toggled off. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOff?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOffAriaLabelledBy?: string;
    /**
    * The content to be rendered when the Card Action Icon Button is toggled on. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
    *
    * Defaults to **null**.
    */
    toggleOn?: React.ReactNode;
    /**
    * The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabel?: string;
    /**
    * The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`.
    *
    * Defaults to **null**.
    */
    toggleOnAriaLabelledBy?: string;
    /**
    * Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
    *
    * Defaults to **empty string**.
    */
    variant?: string;
    /**
    * Fired when the user clicks the Card Action Icon Button, will return toggle state, if applicable.
    */
    onClick?: Function;
}

/**
* Icon button specially formatted for Element Card.
 * @prop {boolean} active - Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally. Defaults to _false_.
 * @prop {string} ariaLabel - Accessibility label for assistive technologies. Defaults to _null_.
 * @prop {string} ariaLabelledBy - Id of the component being labeled for assistive technologies. Defaults to _null_.
 * @prop {React.ReactNode} children - The content when when using the Card Action Icon Button normally. Expects a string, but a valid custom icon is accepted. For toggle button functionality, use `toggleOn` and `toggleOff` instead. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Disables the icon button. Defaults to _false_.
 * @prop {React.ReactNode} toggleOff - The content to be rendered when the Card Action Icon Button is toggled off. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOffAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOffAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {React.ReactNode} toggleOn - The content to be rendered when the Card Action Icon Button is toggled on. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank. Defaults to _null_.
 * @prop {string} toggleOnAriaLabel - The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead. Defaults to _null_.
 * @prop {string} toggleOnAriaLabelledBy - The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`. Defaults to _null_.
 * @prop {string} variant - Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme. Defaults to _empty string_.
 *  @event onClick - Fired when the user clicks the Card Action Icon Button, will return toggle state, if applicable.
*/
export const CardActionIcon: React.FunctionComponent<CardActionIconProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardActionsProps {
    /**
    * Add buttons to card actions.
    *
    * Defaults to **null**.
    */
    actionButtons?: React.ReactNode;
    /**
    * Add icons to card actions.
    *
    * Defaults to **null**.
    */
    actionIcons?: React.ReactNode;
    /**
    * Aligns action buttons and icon buttons. 'center' and 'trailing' only allow buttons.
    *
    * Defaults to **'leading'**.
    */
    alignment?: string;
}

/**
* Card Actions is meant to contain interactive controls, most commonly buttons and icon buttons.
 * @prop {React.ReactNode} actionButtons - Add buttons to card actions. Defaults to _null_.
 * @prop {React.ReactNode} actionIcons - Add icons to card actions. Defaults to _null_.
 * @prop {string} alignment - Aligns action buttons and icon buttons. 'center' and 'trailing' only allow buttons. Defaults to _'leading'_.
*/
export const CardActions: React.FunctionComponent<CardActionsProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardBodyProps {
    /**
    * Content to be rendered inside the title block. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Background color of the card body. It is recommended to set to the Card themeColor to transparent if setting the Card Body color.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Sets typography class for Card Body. This can be overwritten by the children markup
    *
    * Defaults to **'body2'**.
    */
    typographyType?: string;
}

/**
* Card Body lives inside of CardContent (along with CardTitle, CardDivider, etc) and contains the main body content.
 * @prop {React.ReactNode} children - Content to be rendered inside the title block. Accepts any valid markup. Defaults to _null_.
 * @prop {string} themeColor - Background color of the card body. It is recommended to set to the Card themeColor to transparent if setting the Card Body color. Defaults to _'surface'_.
 * @prop {string} typographyType - Sets typography class for Card Body. This can be overwritten by the children markup Defaults to _'body2'_.
*/
export const CardBody: React.FunctionComponent<CardBodyProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardContentProps {
    /**
    * Content to be rendered inside the content block. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* Card Content contains the semantic content of the card. Non-semantic elements, ie an overlay layer, to a card should live outside this div.
 * @prop {React.ReactNode} children - Content to be rendered inside the content block. Accepts any valid markup. Defaults to _null_.
*/
export const CardContent: React.FunctionComponent<CardContentProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardDividerProps {
    /**
    * Theme color for the Card Divider. Leave empty for gray.
    *
    * Defaults to **'on-surface-stroke'**.
    */
    dividerThemeColor?: string;
    /**
    * Choose between dense and tall variants.
    *
    * Defaults to **'dense'**.
    */
    dividerVariant?: string;
}

/**
* Divider used to separate components of card. Can add a color variant for additional brand expression.
 * @prop {string} dividerThemeColor - Theme color for the Card Divider. Leave empty for gray. Defaults to _'on-surface-stroke'_.
 * @prop {string} dividerVariant - Choose between dense and tall variants. Defaults to _'dense'_.
*/
export const CardDivider: React.FunctionComponent<CardDividerProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardFilterProps {
    /**
    * Content to be rendered inside the title block. Mostly commonly a Select, Textfield component, however any valid components or markup may be used.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Type of filter being used.
    *
    * Defaults to **'tabs'**.
    */
    filterType?: string;
}

/**
* Card filter is a section where select or other components used in filtering can live.
 * @prop {React.ReactNode} children - Content to be rendered inside the title block. Mostly commonly a Select, Textfield component, however any valid components or markup may be used. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} filterType - Type of filter being used. Defaults to _'tabs'_.
*/
export const CardFilter: React.FunctionComponent<CardFilterProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardHorizontalGroupProps {
    /**
    * Most commonly text or a Typography component, but accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Changes which side of content the Card side media renders on. Improves layout for right-to-left languages.
    *
    * Defaults to **false**.
    */
    rtl?: boolean;
}

/**
* Card Horizontal Group groups together the media and Card content to be shown correctly in a horizontal Card.
 * @prop {React.ReactNode} children - Most commonly text or a Typography component, but accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} rtl - Changes which side of content the Card side media renders on. Improves layout for right-to-left languages. Defaults to _false_.
*/
export const CardHorizontalGroup: React.FunctionComponent<CardHorizontalGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardLeadingMediaProps {
    /**
    * Child components will be rendered on side of the provided image. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Url for Card media
    *
    * Defaults to **null**.
    */
    mediaUrl?: string;
    /**
    * Applies aspect ratio style to the card media.
    *
    * Defaults to **'square'**.
    */
    ratio?: string;
}

/**
* Card Leading Media is for holding an attention grabbing image that shows to the leading side of the card title.
 * @prop {React.ReactNode} children - Child components will be rendered on side of the provided image. Accepts any valid markup. Defaults to _null_.
 * @prop {string} mediaUrl - Url for Card media Defaults to _null_.
 * @prop {string} ratio - Applies aspect ratio style to the card media. Defaults to _'square'_.
*/
export const CardLeadingMedia: React.FunctionComponent<CardLeadingMediaProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardMediaProps {
    /**
    * Child components will be rendered on top of the provided image. Use `contentBottom` and `contentTop` to control content positioning. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Adjust placement of the media content.
    *
    * Defaults to **'bottom'**.
    */
    contentPlacement?: string;
    /**
    * Image Url for card background image
    *
    * Defaults to **null**.
    */
    imageUrl?: string;
    /**
    * Adds an overlay over to the Card Media.
    *
    * Defaults to **false**.
    */
    overlay?: boolean;
    /**
    * Overlay theme color.
    *
    * Defaults to **'dark'**.
    */
    overlayThemeColor?: string;
    /**
    * Applies aspect ratio style to the card media.
    *
    * Defaults to **'square'**.
    */
    ratio?: string;
}

/**
* Card Media is for holding a larger, attention grabbing image. Optionally, additional child content may be overlaid on the image.
 * @prop {React.ReactNode} children - Child components will be rendered on top of the provided image. Use `contentBottom` and `contentTop` to control content positioning. Accepts any valid markup. Defaults to _null_.
 * @prop {string} contentPlacement - Adjust placement of the media content. Defaults to _'bottom'_.
 * @prop {string} imageUrl - Image Url for card background image Defaults to _null_.
 * @prop {boolean} overlay - Adds an overlay over to the Card Media. Defaults to _false_.
 * @prop {string} overlayThemeColor - Overlay theme color. Defaults to _'dark'_.
 * @prop {string} ratio - Applies aspect ratio style to the card media. Defaults to _'square'_.
*/
export const CardMedia: React.FunctionComponent<CardMediaProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardOverlayProps {
    /**
    * Content to be rendered inside the Card Overlay.  Useful for angles or other non semantic elements displayed in the Card.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Overlay theme color.
    *
    * Defaults to **'dark'**.
    */
    overlayThemeColor?: string;
    /**
    * Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Card accordingly to have Card Content over the overlay.
    *
    * Defaults to **'full'**.
    */
    position?: string;
}

/**
* Card Overlay is an optional overlay that goes over the Card Banner.  You can send in children as angles or other non semantic elements displayed in the Card.
 * @prop {React.ReactNode} children - Content to be rendered inside the Card Overlay.  Useful for angles or other non semantic elements displayed in the Card. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} overlayThemeColor - Overlay theme color. Defaults to _'dark'_.
 * @prop {string} position - Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Card accordingly to have Card Content over the overlay. Defaults to _'full'_.
*/
export const CardOverlay: React.FunctionComponent<CardOverlayProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardPrimaryActionProps {
    /**
    * Content to be rendered as the primary action.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * By default a div will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
    *
    * Defaults to **'div'**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * The primary interaction event for card.
    */
    onClick?: Function;
}

/**
* Card Primary Action is a wrapper component to make all of its children a clickable surface.
 * @prop {React.ReactNode} children - Content to be rendered as the primary action. Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - By default a div will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested. Defaults to _'div'_.
 *  @event onClick - The primary interaction event for card.
*/
export const CardPrimaryAction: React.FunctionComponent<CardPrimaryActionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface CardTitleProps {
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Content to be displayed in the leading block container. See README for types supported. 
    *
    * Defaults to **null**.
    */
    leadingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the leading block. See README for size constraints.
    *
    * Defaults to **empty string**.
    */
    leadingBlockType?: string;
    /**
    * Content to be displayed in the Overline text of the title. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    overlineText?: React.ReactNode;
    /**
    * Where title appears in card.
    *
    * Defaults to **'top'**.
    */
    placement?: string;
    /**
    * Content to be displayed in the Primary text of the title. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    primaryText?: React.ReactNode;
    /**
    * Content to be displayed in the Secondary text of the title. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    secondaryText?: React.ReactNode;
    /**
    * Prop that makes card title stackable.
    *
    * Defaults to **false**.
    */
    stacked?: boolean;
    /**
    * Content to be displayed in the Secondary text of the title and could be used to make Card title stackable. Expects a string, but can be any valid markup.
    *
    * Defaults to **null**.
    */
    stackedSecondaryText?: React.ReactNode;
    /**
    * Background color of the `CardTitle`.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Content to be displayed in the trailing block container. See README for types supported. 
    *
    * Defaults to **null**.
    */
    trailingBlock?: React.ReactNode;
    /**
    * The type of media that will render in the trailing block. See README for size constraints.
    *
    * Defaults to **empty string**.
    */
    trailingBlockType?: string;
}

/**
* Container for headings and other larger typography, typically placed at the top of the card, but can be placed anywhere, ie, as an overlay in Card Media.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} leadingBlock - Content to be displayed in the leading block container. See README for types supported.  Defaults to _null_.
 * @prop {string} leadingBlockType - The type of media that will render in the leading block. See README for size constraints. Defaults to _empty string_.
 * @prop {React.ReactNode} overlineText - Content to be displayed in the Overline text of the title. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {string} placement - Where title appears in card. Defaults to _'top'_.
 * @prop {React.ReactNode} primaryText - Content to be displayed in the Primary text of the title. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {React.ReactNode} secondaryText - Content to be displayed in the Secondary text of the title. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {boolean} stacked - Prop that makes card title stackable. Defaults to _false_.
 * @prop {React.ReactNode} stackedSecondaryText - Content to be displayed in the Secondary text of the title and could be used to make Card title stackable. Expects a string, but can be any valid markup. Defaults to _null_.
 * @prop {string} themeColor - Background color of the `CardTitle`. Defaults to _'surface'_.
 * @prop {React.ReactNode} trailingBlock - Content to be displayed in the trailing block container. See README for types supported.  Defaults to _null_.
 * @prop {string} trailingBlockType - The type of media that will render in the trailing block. See README for size constraints. Defaults to _empty string_.
*/
export const CardTitle: React.FunctionComponent<CardTitleProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
