import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useState, useRef, useImperativeHandle, useEffect, useMemo, createContext, useContext } from 'react';
import clsx from 'clsx';
import PropTypes from 'prop-types';
import { deprecatedOneOf, requiredIfPropType } from '@element/react-common';
import { Button } from '@element/react-button';
import { Icon } from '@element/react-icon';
import { IconButton } from '@element/react-icon-button';
import { Divider } from '@element/react-divider';
import { Group } from '@element/react-group';
import { useMeasure } from 'react-use';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardPropTypes = {
  /**
   * Alignment of the Card Body.
   *
   * Defaults to **'left-top'**.
   */
  bodyAlignment: PropTypes.oneOf(["left-center", "left-top", "left-bottom", "centered", "right-center", "right-top", "right-bottom"]),
  /**
   * Content to be rendered inside the Card. Should be one of CardActions, CardBody,  CardContent, CardDivider, CardFilter, CardMedia, or CardTitle.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * Height style property of card.
   *
   * Defaults to **'auto'**.
   */
  height: PropTypes.string,
  /**
   * If true the card will be styled for a loading spinner
   *
   * Defaults to **false**.
   */
  loadingCard: PropTypes.bool,
  /**
   * Passthrough style object.
   *
   * Defaults to **null**.
   */
  style: PropTypes.object,
  /**
   * Background color of the card. It is recommended to set to transparent if setting theme color on the Card Title or Card Body.
   *
   * Defaults to **'surface'**.
   */
  themeColor: PropTypes.oneOf(["transparent", "surface", "surface-variant", "primary", "primary-variant", "primary-50", "primary-100", "primary-200", "primary-300", "primary-400", "primary-500", "primary-600", "primary-700", "primary-800", "primary-900", "secondary", "secondary-variant", "secondary-50", "secondary-100", "secondary-200", "secondary-300", "secondary-400", "secondary-500", "secondary-600", "secondary-700", "secondary-800", "secondary-900", "danger", "danger-variant", "danger-50", "danger-100", "danger-200", "danger-300", "danger-400", "danger-500", "danger-600", "danger-700", "danger-800", "danger-900", "ancillary-100", "ancillary-200", "ancillary-300", "ancillary-400", "ancillary-500", "ancillary-600", "ancillary-700", "ancillary-800", "ancillary-900"]),
  /**
   * Variant options include `default` (set by theme), `flat`, `outlined`, and `raised`. The `flat` variant removes elevation. The `outlined` variant adds border and removes elevation. The `raised` variant adds elevation.
   *
   * Defaults to **'default'**.
   */
  variant: PropTypes.oneOf(["default", "flat", "outlined", "raised"])
};
const CardDefaultProps = {
  bodyAlignment: "left-top",
  children: null,
  height: "auto",
  loadingCard: false,
  style: null,
  themeColor: "surface",
  variant: "default"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardActionButtonPropTypes = {
  /**
   * Override the default (`primary`) color with the `secondary` color. Most commonly used when the control is placed on a darker surface.
   *
   * Defaults to **'primary'**.
   */
  actionButtonThemeColor: PropTypes.oneOf(["primary", "secondary"]),
  /**
   * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Reference to the DOM button. This enables a greater level of integration.
   *
   * Defaults to **undefined**.
   */
  customRef: PropTypes.oneOfType([PropTypes.func,
  // eslint-disable-next-line react/forbid-prop-types
  PropTypes.shape({
    current: PropTypes.any
  })]),
  /**
   * Prevent the user from interacting with the component.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool,
  /**
   * Applies a full-width style where the button will fill it's container.
   *
   * Defaults to **false**.
   */
  fullWidth: PropTypes.bool,
  /**
   * The button will render as an anchor tag.
   *
   * Defaults to **null**.
   */
  href: PropTypes.string,
  /**
   * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
   *
   * Defaults to **null**.
   */
  label: PropTypes.string,
  /**
   * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
   *
   * Defaults to **null**.
   */
  leadingIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  /**
   * The primary interaction event for button.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes.func,
  /**
   * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
   *
   * Defaults to **null**.
   */
  trailingIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  /**
   * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
   *
   * Defaults to **'button'**.
   */
  type: PropTypes.oneOf(["button", "submit", "reset"])
};
const CardActionButtonDefaultProps = {
  actionButtonThemeColor: "primary",
  children: null,
  className: undefined,
  customRef: undefined,
  disabled: false,
  fullWidth: false,
  href: null,
  label: null,
  leadingIcon: null,
  trailingIcon: null,
  type: "button"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardActionIconPropTypes = {
  /**
   * Programmatically sets the toggle state of the button when used as a toggle button. If not set, the toggle state will be managed internally.
   *
   * Defaults to **false**.
   */
  active: PropTypes.bool,
  /**
   * Accessibility label for assistive technologies.
   *
   * Defaults to **null**.
   */
  ariaLabel: PropTypes.string,
  /**
   * Id of the component being labeled for assistive technologies.
   *
   * Defaults to **null**.
   */
  ariaLabelledBy: PropTypes.string,
  /**
   * The content when when using the Card Action Icon Button normally. Expects a string, but a valid custom icon is accepted. For toggle button functionality, use `toggleOn` and `toggleOff` instead.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Disables the icon button.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool,
  /**
   * Fired when the user clicks the Card Action Icon Button, will return toggle state, if applicable.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes.func,
  /**
   * The content to be rendered when the Card Action Icon Button is toggled off. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
   *
   * Defaults to **null**.
   */
  toggleOff: PropTypes.node,
  /**
   * The `aria-label` value to be read by a screen-reader when the button is toggled off. Example 'Add to Favorites'. Alternatively, `toggleOffAriaLabelledBy` may be used instead.
   *
   * Defaults to **null**.
   */
  toggleOffAriaLabel: PropTypes.string,
  /**
   * The `aria-labelledby`value when the button is toggled on. This should be the `id `of a parent element to be read by a screen reader instead of `aria-label`.
   *
   * Defaults to **null**.
   */
  toggleOffAriaLabelledBy: PropTypes.string,
  /**
   * The content to be rendered when the Card Action Icon Button is toggled on. Expects a string, but a valid custom icon is accepted. The typical use case for a toggle button would be to set an Icon for `toggleOn` and `toggleOff`, leaving children blank.
   *
   * Defaults to **null**.
   */
  toggleOn: PropTypes.node,
  /**
   * The `aria-label` value to be read by a screen-reader when the button is toggled on. Example 'Remove from Favorites'. Alternatively, `toggleOnAriaLabelledBy` may be used instead.
   *
   * Defaults to **null**.
   */
  toggleOnAriaLabel: PropTypes.string,
  /**
   * The `aria-labelledby`value when the button is toggled on. This should be the `id` of a parent element to be read by a screen reader instead of `aria-label`.
   *
   * Defaults to **null**.
   */
  toggleOnAriaLabelledBy: PropTypes.string,
  /**
   * Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
   *
   * Defaults to **empty string**.
   */
  variant: deprecatedOneOf(PropTypes.oneOf(["", "filled-danger-alt", "filled-danger", "filled-primary", "filled-secondary", "color-primary", "color-secondary", "color-on-dark"]), ["primary-alt", "secondary-alt", "primary", "danger-alt", "danger"], "CardActionIcon", "Please use one of '','filled-danger-alt','filled-danger','filled-primary','filled-secondary','color-primary','color-secondary','color-on-dark'.")
};
const CardActionIconDefaultProps = {
  active: false,
  ariaLabel: null,
  ariaLabelledBy: null,
  children: null,
  className: undefined,
  disabled: false,
  toggleOff: null,
  toggleOffAriaLabel: null,
  toggleOffAriaLabelledBy: null,
  toggleOn: null,
  toggleOnAriaLabel: null,
  toggleOnAriaLabelledBy: null,
  variant: ""
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardActionsPropTypes = {
  /**
   * Add buttons to card actions.
   *
   * Defaults to **null**.
   */
  actionButtons: PropTypes.node,
  /**
   * Add icons to card actions.
   *
   * Defaults to **null**.
   */
  actionIcons: PropTypes.node,
  /**
   * Aligns action buttons and icon buttons. 'center' and 'trailing' only allow buttons.
   *
   * Defaults to **'leading'**.
   */
  alignment: PropTypes.oneOf(["leading", "center", "trailing"])
};
const CardActionsDefaultProps = {
  actionButtons: null,
  actionIcons: null,
  alignment: "leading"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardBodyPropTypes = {
  /**
   * Content to be rendered inside the title block. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * Background color of the card body. It is recommended to set to the Card themeColor to transparent if setting the Card Body color.
   *
   * Defaults to **'surface'**.
   */
  themeColor: PropTypes.oneOf(["surface", "primary", "primary-variant", "primary-50", "primary-100", "primary-200", "primary-300", "primary-400", "primary-500", "primary-600", "primary-700", "primary-800", "primary-900", "secondary", "secondary-variant", "secondary-50", "secondary-100", "secondary-200", "secondary-300", "secondary-400", "secondary-500", "secondary-600", "secondary-700", "secondary-800", "secondary-900", "danger", "danger-variant", "danger-50", "danger-100", "danger-200", "danger-300", "danger-400", "danger-500", "danger-600", "danger-700", "danger-800", "danger-900", "ancillary-100", "ancillary-200", "ancillary-300", "ancillary-400", "ancillary-500", "ancillary-600", "ancillary-700", "ancillary-800", "ancillary-900"]),
  /**
   * Sets typography class for Card Body. This can be overwritten by the children markup
   *
   * Defaults to **'body2'**.
   */
  typographyType: deprecatedOneOf(PropTypes.oneOf(["body1", "body2", "button", "caption", "display1", "display2", "display3", "display4", "display5", "display6", "overline", "subtitle1", "subtitle2"]), ["headline1", "headline2", "headline3", "headline4", "headline5", "headline6"], "CardBody", "Please use one of 'body1','body2','button','caption','display1','display2','display3','display4','display5','display6','overline','subtitle1','subtitle2'.")
};
const CardBodyDefaultProps = {
  children: null,
  themeColor: "surface",
  typographyType: "body2"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardContentPropTypes = {
  /**
   * Content to be rendered inside the content block. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node
};
const CardContentDefaultProps = {
  children: null
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardDividerPropTypes = {
  /**
   * Theme color for the Card Divider. Leave empty for gray.
   *
   * Defaults to **'on-surface-stroke'**.
   */
  dividerThemeColor: PropTypes.oneOf(["null", "on-surface-stroke", "primary", "primary-variant", "primary-50", "primary-100", "primary-200", "primary-300", "primary-400", "primary-500", "primary-600", "primary-700", "primary-800", "primary-900", "secondary", "secondary-variant", "secondary-50", "secondary-100", "secondary-200", "secondary-300", "secondary-400", "secondary-500", "secondary-600", "secondary-700", "secondary-800", "secondary-900", "danger", "danger-variant", "danger-50", "danger-100", "danger-200", "danger-300", "danger-400", "danger-500", "danger-600", "danger-700", "danger-800", "danger-900", "ancillary-100", "ancillary-200", "ancillary-300", "ancillary-400"]),
  /**
   * Choose between dense and tall variants.
   *
   * Defaults to **'dense'**.
   */
  dividerVariant: PropTypes.oneOf(["dense", "tall"])
};
const CardDividerDefaultProps = {
  dividerThemeColor: "on-surface-stroke",
  dividerVariant: "dense"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardFilterPropTypes = {
  /**
   * Content to be rendered inside the title block. Mostly commonly a Select, Textfield component, however any valid components or markup may be used.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Type of filter being used.
   *
   * Defaults to **'tabs'**.
   */
  filterType: PropTypes.oneOf(["tabs", "chips", "select", "select-2"])
};
const CardFilterDefaultProps = {
  children: null,
  className: undefined,
  filterType: "tabs"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardHorizontalGroupPropTypes = {
  /**
   * Most commonly text or a Typography component, but accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Changes which side of content the Card side media renders on. Improves layout for right-to-left languages.
   *
   * Defaults to **false**.
   */
  rtl: PropTypes.bool
};
const CardHorizontalGroupDefaultProps = {
  children: null,
  className: undefined,
  rtl: false
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardLeadingMediaPropTypes = {
  /**
   * Child components will be rendered on side of the provided image. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * Url for Card media
   *
   * Defaults to **null**.
   */
  mediaUrl: PropTypes.string,
  /**
   * Applies aspect ratio style to the card media.
   *
   * Defaults to **'square'**.
   */
  ratio: PropTypes.oneOf(["nine-sixteen", "square", "two-one", "five-four", "four-five"])
};
const CardLeadingMediaDefaultProps = {
  children: null,
  mediaUrl: null,
  ratio: "square"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardMediaPropTypes = {
  /**
   * Child components will be rendered on top of the provided image. Use `contentBottom` and `contentTop` to control content positioning. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * Adjust placement of the media content.
   *
   * Defaults to **'bottom'**.
   */
  contentPlacement: PropTypes.oneOf(["bottom", "top"]),
  /**
   * Image Url for card background image
   *
   * Defaults to **null**.
   */
  imageUrl: PropTypes.string,
  /**
   * Adds an overlay over to the Card Media.
   *
   * Defaults to **false**.
   */
  overlay: PropTypes.bool,
  /**
   * Overlay theme color.
   *
   * Defaults to **'dark'**.
   */
  overlayThemeColor: PropTypes.oneOf(["dark", "light", "surface", "linear-gradient-white-to-bottom", "linear-gradient-white-to-top", "linear-gradient-black-to-bottom", "linear-gradient-black-to-top", "linear-gradient-primary-dark-to-bottom", "linear-gradient-primary-dark-to-top", "linear-gradient-primary-darker-to-bottom", "linear-gradient-primary-darker-to-top", "linear-gradient-primary-to-bottom", "linear-gradient-primary-to-top", "linear-gradient-secondary-dark-to-bottom", "linear-gradient-secondary-dark-to-top", "linear-gradient-secondary-darker-to-bottom", "linear-gradient-secondary-darker-to-top", "linear-gradient-secondary-to-bottom", "linear-gradient-secondary-to-top"]),
  /**
   * Applies aspect ratio style to the card media.
   *
   * Defaults to **'square'**.
   */
  ratio: PropTypes.oneOf(["square", "sixteen-nine", "four-three", "four-five", "two-one"])
};
const CardMediaDefaultProps = {
  children: null,
  contentPlacement: "bottom",
  imageUrl: null,
  overlay: false,
  overlayThemeColor: "dark",
  ratio: "square"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardOverlayPropTypes = {
  /**
   * Content to be rendered inside the Card Overlay.  Useful for angles or other non semantic elements displayed in the Card.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Overlay theme color.
   *
   * Defaults to **'dark'**.
   */
  overlayThemeColor: PropTypes.oneOf(["dark", "light", "surface", "linear-gradient-white-to-bottom", "linear-gradient-white-to-top", "linear-gradient-black-to-bottom", "linear-gradient-black-to-top", "linear-gradient-primary-dark-to-bottom", "linear-gradient-primary-dark-to-top", "linear-gradient-primary-darker-to-bottom", "linear-gradient-primary-darker-to-top", "linear-gradient-primary-to-bottom", "linear-gradient-primary-to-top", "linear-gradient-secondary-dark-to-bottom", "linear-gradient-secondary-dark-to-top", "linear-gradient-secondary-darker-to-bottom", "linear-gradient-secondary-darker-to-top", "linear-gradient-secondary-to-bottom", "linear-gradient-secondary-to-top"]),
  /**
   * Position of the Overlay. Use `overlayThemeColor` to change the theme color. If set to leading or trailing be sure to set `alignment` on Card accordingly to have Card Content over the overlay.
   *
   * Defaults to **'full'**.
   */
  position: PropTypes.oneOf(["full", "leading", "trailing"])
};
const CardOverlayDefaultProps = {
  children: null,
  className: undefined,
  overlayThemeColor: "dark",
  position: "full"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardPrimaryActionPropTypes = {
  /**
   * Content to be rendered as the primary action.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The primary interaction event for card.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes.func,
  /**
   * By default a div will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType, PropTypes.instanceOf(React.Component)])
};
const CardPrimaryActionDefaultProps = {
  children: null,
  tag: "div"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const CardTitlePropTypes = {
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Content to be displayed in the leading block container. See README for types supported.
   *
   * Defaults to **null**.
   */
  leadingBlock: requiredIfPropType(PropTypes.node, "CardTitle", "leadingBlockType"),
  /**
   * The type of media that will render in the leading block. See README for size constraints.
   *
   * Defaults to **empty string**.
   */
  leadingBlockType: PropTypes.oneOf(["", "avatar", "icon", "icon-with-background", "thumbnail"]),
  /**
   * Content to be displayed in the Overline text of the title. Expects a string, but can be any valid markup.
   *
   * Defaults to **null**.
   */
  overlineText: PropTypes.node,
  /**
   * Where title appears in card.
   *
   * Defaults to **'top'**.
   */
  placement: PropTypes.oneOf(["top", "middle", "bottom"]),
  /**
   * Content to be displayed in the Primary text of the title. Expects a string, but can be any valid markup.
   *
   * Defaults to **null**.
   */
  primaryText: PropTypes.node,
  /**
   * Content to be displayed in the Secondary text of the title. Expects a string, but can be any valid markup.
   *
   * Defaults to **null**.
   */
  secondaryText: PropTypes.node,
  /**
   * Prop that makes card title stackable.
   *
   * Defaults to **false**.
   */
  stacked: PropTypes.bool,
  /**
   * Content to be displayed in the Secondary text of the title and could be used to make Card title stackable. Expects a string, but can be any valid markup.
   *
   * Defaults to **null**.
   */
  stackedSecondaryText: PropTypes.node,
  /**
   * Background color of the `CardTitle`.
   *
   * Defaults to **'surface'**.
   */
  themeColor: PropTypes.oneOf(["surface", "primary", "secondary"]),
  /**
   * Content to be displayed in the trailing block container. See README for types supported.
   *
   * Defaults to **null**.
   */
  trailingBlock: requiredIfPropType(PropTypes.node, "CardTitle", "trailingBlockType"),
  /**
   * The type of media that will render in the trailing block. See README for size constraints.
   *
   * Defaults to **empty string**.
   */
  trailingBlockType: PropTypes.oneOf(["", "title-actions", "avatar", "badge", "icon", "icon-with-background", "thumbnail"])
};
const CardTitleDefaultProps = {
  className: undefined,
  leadingBlock: null,
  leadingBlockType: "",
  overlineText: null,
  placement: "top",
  primaryText: null,
  secondaryText: null,
  stacked: false,
  stackedSecondaryText: null,
  themeColor: "surface",
  trailingBlock: null,
  trailingBlockType: ""
};

const Card = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    bodyAlignment,
    children,
    className,
    direction,
    height,
    loadingCard,
    outlined,
    style,
    themeColor,
    variant,
    ...customProps
  } = props;
  const [styles, setStyles] = useState({
    height,
    direction,
    ...style
  });
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  useEffect(() => {
    setStyles({
      height,
      // display: 'flex', do we need this?
      direction,
      ...style
    });
  }, [height, direction, style]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: clsx('lmnt', 'lmnt-card', 'mdc-card', variant === 'outlined' && 'mdc-card--outlined', variant === 'flat' && 'lmnt-card--flat', variant === 'raised' && 'lmnt-card--raised', loadingCard && 'lmnt-card--loading', `lmnt-card--${bodyAlignment}`, `lmnt-theme-${themeColor}-bg`, className),
    style: styles
  }, customProps), children);
});
Card.displayName = 'Card';
Card.propTypes = CardPropTypes;
Card.defaultProps = CardDefaultProps;

const CardActionButton = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    customRef,
    disabled,
    fullWidth,
    href,
    label,
    leadingIcon,
    actionButtonThemeColor,
    trailingIcon,
    type,
    ...customProps
  } = props;
  const content = useMemo(() => label || children, [label, children]);
  return /*#__PURE__*/React.createElement(Button, _extends({
    ref: externalRef,
    customRef: customRef,
    disabled: disabled,
    fullWidth: fullWidth,
    href: href,
    label: label,
    leadingIcon: leadingIcon,
    themeColor: actionButtonThemeColor,
    trailingIcon: trailingIcon,
    type: type,
    variant: "text",
    className: clsx('mdc-card__action mdc-card__action--button', className)
  }, customProps), content);
});
CardActionButton.displayName = 'CardActionButton';
CardActionButton.propTypes = CardActionButtonPropTypes;
CardActionButton.defaultProps = CardActionButtonDefaultProps;

const CardActionIcon = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    active,
    ariaLabel,
    ariaLabelledBy,
    children,
    className,
    disabled,
    onClick,
    toggleOff,
    toggleOffAriaLabel,
    toggleOffAriaLabelledBy,
    toggleOn,
    toggleOnAriaLabel,
    toggleOnAriaLabelledBy,
    variant,
    ...customProps
  } = props;
  const IconToRender = useMemo(() => {
    if (typeof children === 'string') {
      return /*#__PURE__*/React.createElement(Icon, {
        icon: children
      });
    }
    return children;
  }, [children]);
  return /*#__PURE__*/React.createElement(IconButton, _extends({
    ref: externalRef,
    variant: variant,
    disabled: disabled,
    onClick: onClick,
    ariaLabel: ariaLabel,
    toggleOffAriaLabel: toggleOffAriaLabel,
    toggleOffAriaLabelledBy: toggleOffAriaLabelledBy,
    toggleOnAriaLabel: toggleOnAriaLabel,
    toggleOnAriaLabelledBy: toggleOnAriaLabelledBy,
    toggleOn: toggleOn,
    toggleOff: toggleOff,
    className: clsx('mdc-card__action mdc-card__action--icon', className)
  }, customProps), IconToRender);
});
CardActionIcon.displayName = 'CardActionIcon';
CardActionIcon.propTypes = CardActionIconPropTypes;
CardActionIcon.defaultProps = CardActionIconDefaultProps;

const CardActions = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    alignment,
    actionIcons,
    actionButtons,
    className,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'mdc-card__actions', alignment === 'leading' && 'lmnt-card__actions--leading', alignment === 'center' && 'lmnt-card__actions--center', alignment === 'trailing' && 'lmnt-card__actions--trailing', className)
  }, customProps), actionButtons && /*#__PURE__*/React.createElement("div", {
    className: "mdc-card__action-buttons"
  }, actionButtons), actionIcons && alignment === 'leading' && /*#__PURE__*/React.createElement("div", {
    className: "mdc-card__action-icons"
  }, actionIcons));
});
CardActions.displayName = 'CardActions';
CardActions.propTypes = CardActionsPropTypes;
CardActions.defaultProps = CardActionsDefaultProps;

const CardBody = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    typographyType,
    themeColor,
    className,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt-card-body', typographyType === 'body1' && ' mdc-typography--body1', typographyType === 'body2' && ' mdc-typography--body2', typographyType === 'button' && ' mdc-typography--button', typographyType === 'caption' && ' mdc-typography--caption', typographyType === 'headline1' && ' mdc-typography--headline1', typographyType === 'headline2' && ' mdc-typography--headline2', typographyType === 'headline3' && ' mdc-typography--headline3', typographyType === 'headline4' && ' mdc-typography--headline4', typographyType === 'headline5' && ' mdc-typography--headline5', typographyType === 'headline6' && ' mdc-typography--headline6', typographyType === 'display1' && ' mdc-typography--headline1', typographyType === 'display2' && ' mdc-typography--headline2', typographyType === 'display3' && ' mdc-typography--headline3', typographyType === 'display4' && ' mdc-typography--headline4', typographyType === 'display5' && ' mdc-typography--headline5', typographyType === 'display6' && ' mdc-typography--headline6', typographyType === 'overline' && ' mdc-typography--overline', typographyType === 'subtitle1' && ' mdc-typography--subtitle1', typographyType === 'subtitle2' && ' mdc-typography--subtitle2', `lmnt-theme-${themeColor}-bg`, className)
  }, customProps), children);
});
CardBody.displayName = 'CardBody';
CardBody.propTypes = CardBodyPropTypes;
CardBody.defaultProps = CardBodyDefaultProps;

const CardContent = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx(['lmnt', 'mdc-card__content'], className)
  }, customProps), children);
});
CardContent.displayName = 'CardContent';
CardContent.propTypes = CardContentPropTypes;
CardContent.defaultProps = CardContentDefaultProps;

const CardDivider = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    className,
    dividerVariant,
    dividerThemeColor,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement(Divider, _extends({
    ref: externalRef,
    variant: dividerVariant,
    themeColor: dividerThemeColor,
    className: clsx('mdc-card__divider', 'lmnt-card-divider', className)
  }, customProps));
});
CardDivider.displayName = 'CardDivider';
CardDivider.propTypes = CardDividerPropTypes;
CardDivider.defaultProps = CardDividerDefaultProps;

const CardFilter = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    filterType,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'lmnt-card__filters', filterType === 'chips' && 'lmnt-card__filters--chips', filterType === 'select' && 'lmnt-card__filters--select', filterType === 'select-2' && 'lmnt-card__filters--select lmnt-card__filters--select-2', className)
  }, customProps), children);
});
CardFilter.displayName = 'CardFilter';
CardFilter.propTypes = CardFilterPropTypes;
CardFilter.defaultProps = CardFilterDefaultProps;

const CardHorizontalGroupContext = /*#__PURE__*/createContext({
  groupRect: {}
});

const CardHorizontalGroup = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    rtl,
    ...customProps
  } = props;
  const [measureRef, rect] = useMeasure();
  const ref = useRef(measureRef);
  useImperativeHandle(externalRef, () => ref.current, []);
  useImperativeHandle(measureRef, () => ref.current, []);
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/jsx-no-constructed-context-values
    React.createElement(CardHorizontalGroupContext.Provider, {
      value: {
        groupRect: rect
      }
    }, /*#__PURE__*/React.createElement(Group, _extends({
      className: clsx('lmnt-card__horizontal-group', 'lmnt-card--horizontal', className),
      ref: ref,
      gap: "none",
      direction: rtl ? 'horizontal-reverse' : 'horizontal',
      secondaryAlign: "start"
    }, customProps), children))
  );
});
CardHorizontalGroup.propTypes = CardHorizontalGroupPropTypes;
CardHorizontalGroup.defaultProps = CardHorizontalGroupDefaultProps;
CardHorizontalGroup.displayName = 'CardHorizontalGroup';

const CardOverlay = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    position,
    overlayThemeColor,
    ...customProps
  } = props;
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  const classNames = useMemo(() => position !== 'none' && clsx('lmnt', 'lmnt-card-overlay ', !overlayThemeColor.includes('gradient') && overlayThemeColor !== 'surface' && `lmnt-card-overlay__${overlayThemeColor}`, overlayThemeColor.includes('gradient') && overlayThemeColor !== 'surface' && `lmnt-theme--bg-${overlayThemeColor}`, overlayThemeColor === 'surface' && 'lmnt-theme-surface-bg', `lmnt-card-overlay__${position}`, className), [overlayThemeColor, position, className]);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: classNames
  }, customProps), children && children);
});
CardOverlay.displayName = 'CardOverlay';
CardOverlay.propTypes = CardOverlayPropTypes;
CardOverlay.defaultProps = CardOverlayDefaultProps;

const CardMedia = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    contentPlacement,
    imageUrl,
    overlay,
    overlayThemeColor,
    ratio,
    style,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'mdc-card__media', (ratio === 'square' || !ratio) && 'mdc-card__media--square', ratio === 'sixteen-nine' && 'mdc-card__media--16-9', ratio === 'four-three' && 'lmnt-card__media--4-3', ratio === 'four-five' && 'lmnt-card__media--4-5', ratio === 'two-one' && 'lmnt-card__media--2-1', className),
    style: {
      backgroundImage: `url(${imageUrl})`,
      ...style
    }
  }, customProps), overlay && /*#__PURE__*/React.createElement(CardOverlay, {
    overlayThemeColor: overlayThemeColor
  }), children && /*#__PURE__*/React.createElement("div", {
    className: clsx('mdc-card__media-content', overlay && 'lmnt-card__media-content--with-overlay', contentPlacement === 'bottom' && 'lmnt-card__content--bottom', contentPlacement === 'top' && 'lmnt-card__content--top')
  }, /*#__PURE__*/React.createElement("div", {
    className: "lmnt-card__media-inner-content"
  }, children)));
});
CardMedia.displayName = 'CardMedia';
CardMedia.propTypes = CardMediaPropTypes;
CardMedia.defaultProps = CardMediaDefaultProps;

const CardPrimaryAction = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    tag: Tag = 'div',
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement(Tag, _extends({
    ref: externalRef,
    tabIndex: "0",
    className: clsx(['lmnt', 'mdc-card__primary-action'], className)
  }, customProps), children);
});
CardPrimaryAction.displayName = 'CardPrimaryAction';
CardPrimaryAction.propTypes = CardPrimaryActionPropTypes;
CardPrimaryAction.defaultProps = CardPrimaryActionDefaultProps;

const CardTitle = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    className,
    leadingBlock,
    leadingBlockType,
    overlineText,
    placement,
    primaryText,
    secondaryText,
    stackedSecondaryText,
    stacked,
    themeColor,
    trailingBlock,
    trailingBlockType,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'lmnt-card-title', stacked && 'lmnt-card-title--stacked', placement === 'top' && 'lmnt-card-title--top-placement', placement === 'bottom' && 'lmnt-card-title--bottom-placement', themeColor === 'primary' && 'lmnt-theme-primary-bg', themeColor === 'secondary' && 'lmnt-theme-secondary-bg', className)
  }, customProps), leadingBlockType ? /*#__PURE__*/React.createElement("div", {
    className: clsx('lmnt-card-title__leadingBlock', leadingBlockType === 'avatar' && 'lmnt-card-title__leadingBlock--avatar', leadingBlockType === 'icon' && 'lmnt-card-title__leadingBlock--icon', leadingBlockType === 'icon-with-background' && 'lmnt-card-title__leadingBlock--icon-with-background', leadingBlockType === 'thumbnail' && 'lmnt-card-title__leadingBlock--thumbnail')
  }, leadingBlock) : null, /*#__PURE__*/React.createElement("div", {
    className: "lmnt-card-title__text"
  }, overlineText && /*#__PURE__*/React.createElement("div", {
    className: "lmnt-card-title__overlineText"
  }, overlineText), primaryText, (secondaryText || stackedSecondaryText) && /*#__PURE__*/React.createElement("div", {
    className: clsx('lmnt-card-title-secondaryText-container', !stacked && 'lmnt-card-title__items')
  }, secondaryText && /*#__PURE__*/React.createElement("div", {
    className: "lmnt-card-title__secondaryText"
  }, secondaryText), stackedSecondaryText && /*#__PURE__*/React.createElement("div", {
    className: "lmnt-card-title__secondaryText"
  }, stackedSecondaryText))), trailingBlockType ? /*#__PURE__*/React.createElement("div", {
    className: clsx('lmnt-card-title__trailingBlock', trailingBlockType === 'title-actions' && 'lmnt-card-title__trailingBlock--title-actions', trailingBlockType === 'avatar' && 'lmnt-card-title__trailingBlock--avatar', trailingBlockType === 'icon' && 'lmnt-card-title__trailingBlock--icon', trailingBlockType === 'icon-with-background' && 'lmnt-card-title__trailingBlock--icon-with-background', trailingBlockType === 'thumbnail' && 'lmnt-card-title__trailingBlock--thumbnail', trailingBlockType === 'badge' && 'lmnt-card-title__trailingBlock--badge')
  }, trailingBlock) : null);
});
CardTitle.displayName = 'CardTitle';
CardTitle.propTypes = CardTitlePropTypes;
CardTitle.defaultProps = CardTitleDefaultProps;

const getXRatio = ratio => {
  switch (ratio) {
    case 'sixteen-nine':
      return 16;
    case 'four-three':
      return 4;
    case 'two-one':
      return 2;
    case 'four-five':
      return 4;
    case 'nine-sixteen':
      return 9;
    case 'three-four':
      return 3;
    case 'one-two':
      return 1;
    case 'five-four':
      return 5;
    case 'square':
    default:
      return 1;
  }
};
const getYRatio = ratio => {
  switch (ratio) {
    case 'sixteen-nine':
      return 9;
    case 'four-three':
      return 3;
    case 'two-one':
      return 1;
    case 'four-five':
      return 5;
    case 'nine-sixteen':
      return 16;
    case 'three-four':
      return 4;
    case 'one-two':
      return 2;
    case 'five-four':
      return 4;
    case 'square':
    default:
      return 1;
  }
};
const CardLeadingMedia = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    style,
    children,
    mediaUrl,
    contentPlacement,
    ratio,
    className,
    rtl,
    ...customProps
  } = props;
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  const {
    groupRect: {
      height
    }
  } = useContext(CardHorizontalGroupContext);
  useEffect(() => {
    if (!height) {
      return;
    }
    const xRatio = getXRatio(ratio);
    const yRatio = getYRatio(ratio);
    const elementStyle = ref.current.style;
    elementStyle.height = `${height}px`;
    elementStyle.width = `${height / yRatio * xRatio}px`;
  }, [height, ratio]);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: clsx('lmnt', 'mdc-card__media', 'lmnt-card__leading-media', className),
    ref: ref,
    style: {
      backgroundImage: `url(${mediaUrl})`,
      height: '100px',
      width: '50px',
      ...style
    }
  }, customProps), children);
});
CardLeadingMedia.propTypes = CardLeadingMediaPropTypes;
CardLeadingMedia.defaultProps = CardLeadingMediaDefaultProps;
CardLeadingMedia.displayName = 'CardLeadingMedia';

export { Card, CardActionButton, CardActionIcon, CardActions, CardBody, CardContent, CardDivider, CardFilter, CardHorizontalGroup, CardLeadingMedia, CardMedia, CardOverlay, CardPrimaryAction, CardTitle };
//# sourceMappingURL=index.es.js.map
