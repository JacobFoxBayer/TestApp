'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var reactCommon = require('@element/react-common');
var CreatableSelect = require('react-select/creatable');
var reactSelect = require('@element/react-select');
var clsx = require('clsx');
var PropTypes = require('prop-types');
var reactTextfield = require('@element/react-textfield');
var reactChips = require('@element/react-chips');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var CreatableSelect__default = /*#__PURE__*/_interopDefault(CreatableSelect);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const InputChipPropTypes = {
  /**
   * If true, a user can add duplicate chips.
   *
   * Defaults to **false**.
   */
  allowDuplicates: PropTypes__default["default"].bool,
  /**
   * Available for Uncontained Input Chip, inputs that are anchored show up before the chip list instead of after.
   *
   * Defaults to **false**.
   */
  anchorInput: PropTypes__default["default"].bool,
  /**
   * Value of the chips array. If the chips array is to be controlled by the parent for two way data binding. this must be defined. If no initial array is needed, set to an empty array
   *
   * Defaults to **[]**.
   */
  chips: PropTypes__default["default"].oneOfType([PropTypes__default["default"].arrayOf(PropTypes__default["default"].string), PropTypes__default["default"].arrayOf(PropTypes__default["default"].object)]),
  /**
   * Custom props to be sent to each `Chip`. Props that will be sent through to `Chips` are 'scrollable', `variant`, `onRemoval`, `chipIdField`, `chipKeyField`, `chipLabelField`. See `Chips` docs for more information.
   *
   * Defaults to **{}**.
   */
  chipsProps: PropTypes__default["default"].object,
  /**
   * If true, the chips will be contained in the `Textfield`.
   *
   * Defaults to **false**.
   */
  contained: PropTypes__default["default"].bool,
  /**
   * Custom props to be sent to the container. Notes, this is only used when `contained=true`.
   *
   * Defaults to **undefined**.
   */
  containerProps: PropTypes__default["default"].object,
  /**
   * Prevent the user from interacting with the input.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Callback fired when a chip is added.
   *
   * Defaults to **null**.
   */
  onAdd: PropTypes__default["default"].func,
  /**
   * What the input value will be set to after chip is added.
   *
   * Defaults to **empty string**.
   */
  resetValue: PropTypes__default["default"].string,
  /**
   * Custom props to be sent to the `Textfield`. See `Textfield` docs for more information.
   *
   * Defaults to **{}**.
   */
  textfieldProps: PropTypes__default["default"].object
};
const InputChipDefaultProps = {
  allowDuplicates: false,
  anchorInput: false,
  chips: [],
  chipsProps: {},
  contained: false,
  containerProps: undefined,
  disabled: false,
  resetValue: "",
  textfieldProps: {}
};

const dupeText$1 = 'Each entry must be unique.';
const ContainedInputChip = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    allowDuplicates,
    anchorInput,
    chips,
    chipsProps,
    className,
    contained,
    containerProps,
    disabled,
    id,
    onAdd,
    onTrailingIconClick,
    resetValue,
    style,
    textfieldProps,
    ...customProps
  } = props;
  const {
    valid,
    helperText,
    onFocus,
    label,
    variant = 'filled',
    onBlur
  } = textfieldProps;
  const {
    onRemoval,
    chipIdField,
    chipLabelField,
    scrollable
  } = chipsProps;
  const [idActual] = React.useState(() => id || reactCommon.edsRandomId());
  const [duplicates, setDupe] = React.useState(false);
  const selectRef = React.useRef();
  const [controlRect, setControlRect] = React.useState();
  const [inputValue, setInputValue] = React.useState(resetValue);
  const [optionChips, setOptionsChips] = React.useState(() => chips.map(c => {
    if (typeof c === 'string' || typeof c === 'number') return {
      label: c,
      value: c
    };
    if (typeof o !== 'object') {
      return {
        label: c[chipLabelField],
        value: c[chipIdField]
      };
    }
    return null;
  }));
  const [extendedHeight, setSelectExtendedHeight] = React.useState();
  const [float, setFloat] = React.useState();
  const [isFocused, setIsFocused] = React.useState(false);
  const selectId = `${idActual}-select`;
  const containerId = `${idActual}-container`;
  const isOutlined = variant === 'outlined';
  const isValid = React.useMemo(() => {
    if (!allowDuplicates && duplicates) return false;
    return valid === undefined || valid === null ? true : valid;
  }, [valid, duplicates, allowDuplicates]);
  React.useEffect(() => {
    setOptionsChips(chips.map(c => {
      if (typeof c === 'string' || typeof c === 'number') return {
        label: c,
        value: c
      };
      if (typeof o !== 'object') {
        return {
          label: c[chipLabelField],
          value: c[chipIdField]
        };
      }
      return null;
    }));
  }, [chips, chipLabelField, chipIdField]);
  const handleBlur = React.useCallback(e => {
    setIsFocused(false);
    setFloat(!!chips.length || !!selectRef.current.state.value && !!selectRef.current.state.value.length);
    onBlur && onBlur(e);
  }, [chips, onBlur]);
  const handleFocus = React.useCallback(e => {
    setIsFocused(true);
    setFloat(true);
    onFocus && onFocus(e);
  }, [onFocus]);
  const handleInputChange = React.useCallback(val => {
    setInputValue(val);
  }, []);
  const helperTextToUse = React.useMemo(() => !allowDuplicates && duplicates ? `${dupeText$1} ${helperText || ''}` : helperText, [duplicates, helperText, allowDuplicates]);
  const handleChange = React.useCallback((val, action) => {
    if (action.action === 'remove-value' || action.action === 'pop-value') {
      var _action$removedValue;
      setDupe(false);
      onRemoval((_action$removedValue = action.removedValue) === null || _action$removedValue === void 0 ? void 0 : _action$removedValue.value, 'remove-value');
    }
    if (action.action === 'clear') {
      const removedValues = action.removedValues.map(v => v.value);
      setDupe(false);
      onRemoval(removedValues, 'clear');
    }
  }, [onRemoval]);
  const onKeyPress = React.useCallback(e => {
    const isDupe = chips.some(c => c === inputValue);
    switch (e.key) {
      case 'Enter':
      case 'Tab':
        if (!inputValue) return;
        if (!allowDuplicates) {
          setDupe(isDupe);
        }
        (!isDupe || allowDuplicates) && onAdd && onAdd(inputValue);
        setInputValue(resetValue);
        e.preventDefault();
        break;
    }
  }, [inputValue, onAdd, resetValue, allowDuplicates, chips]);
  return /*#__PURE__*/React__default["default"].createElement(React__default["default"].Fragment, null, /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: externalRef,
    id: `${idActual}-container`,
    className: clsx__default["default"]('lmnt', 'lmnt-input-chip--contained', 'lmnt-select-container', 'lmnt-select--value-display-pills', `lmnt-select--${variant}`, 'lmnt-select', isFocused && 'mdc-select--focused', isOutlined && 'mdc-select--outlined', float && 'lmnt-select-float-label', disabled && 'lmnt-select--is-disabled', scrollable && 'lmnt-select--fixed-height', !isValid && 'mdc-select--invalid', className),
    style: style
  }, containerProps, customProps), /*#__PURE__*/React__default["default"].createElement(CreatableSelect__default["default"], {
    ref: selectRef,
    classNamePrefix: "lmnt",
    className: clsx__default["default"]('lmnt-select-inner-container', scrollable && 'lmnt-select--fixed-height'),
    id: `${idActual}`,
    instanceId: `${idActual}`,
    isMulti: true,
    multiSelect: true,
    backspaceRemovesValue: true,
    onChange: handleChange,
    onKeyDown: onKeyPress,
    placeholder: "",
    menuIsOpen: false,
    isClearable: true,
    isDisabled: disabled,
    styles: reactSelect.SelectStyles(),
    onBlur: handleBlur,
    onFocus: handleFocus,
    value: optionChips,
    controlRect: controlRect,
    setControlRect: setControlRect,
    setSelectExtendedHeight: setSelectExtendedHeight,
    extendedHeight: extendedHeight,
    isOutlined: isOutlined,
    variant: variant,
    onInputChange: handleInputChange,
    inputValue: inputValue,
    multiDisplayType: "pills",
    anchorInput: anchorInput,
    valid: isValid,
    components: {
      Control: reactSelect.SelectControlComponent,
      ValueContainer: reactSelect.SelectValueContainer,
      IndicatorSeparator: null,
      DropdownIndicator: null,
      MultiValueRemove: reactSelect.SelectMultiValueRemove,
      MultiValue: reactSelect.SelectMultiValue,
      ClearIndicator: reactSelect.SelectClearIndicator,
      IndicatorsContainer: reactSelect.SelectIndicatorsContainer
    }
  }), /*#__PURE__*/React__default["default"].createElement(reactSelect.SelectLabel, {
    extendedHeight: extendedHeight,
    label: label,
    isOutlined: isOutlined,
    id: `${idActual}-select-label`,
    selectId: selectId,
    containerId: containerId,
    float: float,
    variant: variant
  })), /*#__PURE__*/React__default["default"].createElement("p", {
    id: `${idActual}-helper-text`,
    className: clsx__default["default"]('mdc-select-helper-text', !isValid && 'lmnt-helper-text--invalid')
  }, helperTextToUse));
});
ContainedInputChip.displayName = 'InputChip';
ContainedInputChip.propTypes = InputChipPropTypes;
ContainedInputChip.defaultProps = InputChipDefaultProps;

const dupeText = 'Each entry must be unique.';
const UncontainedInputChip = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    allowDuplicates,
    anchorInput,
    chips,
    chipsProps,
    className,
    contained,
    containerProps,
    // unused
    disabled,
    id,
    onAdd,
    onTrailingIconClick,
    resetValue,
    textfieldProps,
    ...customProps
  } = props;
  const {
    valid,
    onChange,
    helperText,
    disabled: textfieldDisabled
  } = textfieldProps;
  const {
    variant,
    onRemoval,
    chipIdField,
    chipKeyField,
    chipLabelField,
    scrollable,
    onUpdateChips,
    disabled: chipsDisabled
  } = chipsProps;
  const [idActual] = React.useState(() => id || reactCommon.edsRandomId());
  const [value, setValue] = React.useState('');
  const [duplicates, setDupe] = React.useState(false);
  const textfieldRef = React.useRef();
  const helperTextToUse = React.useMemo(() => duplicates ? `${dupeText} ${helperText || ''}` : helperText, [duplicates, helperText]);
  const isValid = React.useMemo(() => {
    if (!allowDuplicates && duplicates) return false;
    return valid === undefined || valid === null ? true : valid;
  }, [valid, duplicates, allowDuplicates]);
  const focusInput = React.useCallback(() => {
    textfieldRef.current.mdc.focus();
  }, []);
  const handleChange = event => {
    const v = event.target.value;
    if (!allowDuplicates) {
      setDupe(chips.some(c => c === v));
    }
    setValue(v);
    onChange && onChange(event);
  };
  const onKeyPress = event => {
    if (!(event.code === 'Enter' || event.key === 'Enter') || !event.target.value || !isValid || duplicates) return;
    onAdd && onAdd(event.target.value, event);
    setValue(resetValue);
  };
  const textInput = /*#__PURE__*/React__default["default"].createElement(reactTextfield.Textfield, _extends__default["default"]({}, textfieldProps, {
    helperTextId: `${idActual}-helperText`,
    labelId: `${idActual}-labelId`,
    ref: textfieldRef,
    id: idActual,
    value: value,
    onChange: handleChange,
    helperTextValidation: true,
    valid: isValid,
    helperText: helperTextToUse,
    containerProps: {
      className: scrollable ? 'mdc-input-chips-scroll' : ''
    },
    onKeyDown: onKeyPress,
    disabled: disabled || textfieldDisabled
  }));
  return (
    /*#__PURE__*/
    /* The <div> element has a child <Textfield> element that allows keyboard interaction */
    /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */
    React__default["default"].createElement("div", _extends__default["default"]({
      ref: externalRef,
      className: clsx__default["default"](['mdc-input-chip-container', 'lmnt-input-chip-container', scrollable && 'mdc-text-field--with-scrollable-input-chip', 'mdc-text-field--input-chip', className]),
      onClick: focusInput
    }, customProps), anchorInput && scrollable && textInput, /*#__PURE__*/React__default["default"].createElement("div", {
      id: `lmnt-chip-input-${idActual}`,
      className: clsx__default["default"](['mdc-input-chip-set-wrapper', 'lmnt-input-chip-set-wrapper', scrollable && 'mdc-input-chip-set-wrapper-scrollable'])
    }, anchorInput && !scrollable && textInput, /*#__PURE__*/React__default["default"].createElement(reactChips.Chips, {
      id: `lmnt-input-chips-${idActual}`,
      variant: variant,
      onRemoval: onRemoval,
      onUpdateChips: onUpdateChips,
      chipIdField: chipIdField,
      chipKeyField: chipKeyField,
      chipLabelField: chipLabelField,
      chips: chips,
      scrollable: scrollable,
      input: true,
      disabled: disabled || chipsDisabled
    }), !anchorInput && !scrollable && textInput), !anchorInput && scrollable && textInput)
  );
});
UncontainedInputChip.displayName = 'InputChip';
UncontainedInputChip.propTypes = InputChipPropTypes;
UncontainedInputChip.defaultProps = InputChipDefaultProps;

const InputChip = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    contained
  } = props;
  if (contained) return /*#__PURE__*/React__default["default"].createElement(ContainedInputChip, _extends__default["default"]({
    ref: externalRef
  }, props));
  return /*#__PURE__*/React__default["default"].createElement(UncontainedInputChip, _extends__default["default"]({
    ref: externalRef
  }, props));
});
InputChip.displayName = 'InputChip';
InputChip.propTypes = InputChipPropTypes;
InputChip.defaultProps = InputChipDefaultProps;

exports.ContainedInputChip = ContainedInputChip;
exports.InputChip = InputChip;
exports.UncontainedInputChip = UncontainedInputChip;
//# sourceMappingURL=index.js.map
