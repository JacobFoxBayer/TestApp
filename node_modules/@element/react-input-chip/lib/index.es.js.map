{"version":3,"file":"index.es.js","sources":["../generated/propTypes.js","../ContainedInputChip.js","../UncontainedInputChip.js","../InputChip.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n *\n * This file is automatically generated by the Element\n * documentation system. Any modifications to this file\n * will be overwritten!\n *\n */\n\nexport const InputChipPropTypes = {\n  /**\n   * If true, a user can add duplicate chips.\n   *\n   * Defaults to **false**.\n   */\n  allowDuplicates: PropTypes.bool,\n  /**\n   * Available for Uncontained Input Chip, inputs that are anchored show up before the chip list instead of after.\n   *\n   * Defaults to **false**.\n   */\n  anchorInput: PropTypes.bool,\n  /**\n   * Value of the chips array. If the chips array is to be controlled by the parent for two way data binding. this must be defined. If no initial array is needed, set to an empty array\n   *\n   * Defaults to **[]**.\n   */\n  chips: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.string),\n    PropTypes.arrayOf(PropTypes.object),\n  ]),\n  /**\n   * Custom props to be sent to each `Chip`. Props that will be sent through to `Chips` are 'scrollable', `variant`, `onRemoval`, `chipIdField`, `chipKeyField`, `chipLabelField`. See `Chips` docs for more information.\n   *\n   * Defaults to **{}**.\n   */\n  chipsProps: PropTypes.object,\n  /**\n   * If true, the chips will be contained in the `Textfield`.\n   *\n   * Defaults to **false**.\n   */\n  contained: PropTypes.bool,\n  /**\n   * Custom props to be sent to the container. Notes, this is only used when `contained=true`.\n   *\n   * Defaults to **undefined**.\n   */\n  containerProps: PropTypes.object,\n  /**\n   * Prevent the user from interacting with the input.\n   *\n   * Defaults to **false**.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Callback fired when a chip is added.\n   *\n   * Defaults to **null**.\n   */\n  onAdd: PropTypes.func,\n  /**\n   * What the input value will be set to after chip is added.\n   *\n   * Defaults to **empty string**.\n   */\n  resetValue: PropTypes.string,\n  /**\n   * Custom props to be sent to the `Textfield`. See `Textfield` docs for more information.\n   *\n   * Defaults to **{}**.\n   */\n  textfieldProps: PropTypes.object,\n};\n\nexport const InputChipDefaultProps = {\n  allowDuplicates: false,\n  anchorInput: false,\n  chips: [],\n  chipsProps: {},\n  contained: false,\n  containerProps: undefined,\n  disabled: false,\n  resetValue: \"\",\n  textfieldProps: {},\n};\n","import React, {\n    useState,\n    useCallback,\n    useRef,\n    useMemo,\n    useEffect,\n    forwardRef\n} from 'react';\nimport { edsRandomId } from '@element/react-common';\nimport CreatableSelect from 'react-select/creatable';\nimport {\n    SelectValueContainer,\n    SelectControlComponent,\n    SelectMultiValueRemove,\n    SelectMultiValue,\n    SelectClearIndicator,\n    SelectLabel,\n    SelectIndicatorsContainer,\n    SelectStyles\n} from '@element/react-select';\nimport clsx from 'clsx';\nimport {\n    InputChipPropTypes,\n    InputChipDefaultProps\n} from './generated/propTypes';\n\nconst dupeText = 'Each entry must be unique.';\n\nconst ContainedInputChip = forwardRef((props, externalRef) => {\n    const {\n        allowDuplicates,\n        anchorInput,\n        chips,\n        chipsProps,\n        className,\n        contained,\n        containerProps,\n        disabled,\n        id,\n        onAdd,\n        onTrailingIconClick,\n        resetValue,\n        style,\n        textfieldProps,\n        ...customProps\n    } = props;\n    const {\n        valid,\n        helperText,\n        onFocus,\n        label,\n        variant = 'filled',\n        onBlur\n    } = textfieldProps;\n    const { onRemoval, chipIdField, chipLabelField, scrollable } = chipsProps;\n    const [idActual] = useState(() => id || edsRandomId());\n    const [duplicates, setDupe] = useState(false);\n    const selectRef = useRef();\n    const [controlRect, setControlRect] = useState();\n    const [inputValue, setInputValue] = useState(resetValue);\n    const [optionChips, setOptionsChips] = useState(() =>\n        chips.map(c => {\n            if (typeof c === 'string' || typeof c === 'number')\n                return { label: c, value: c };\n            if (typeof o !== 'object') {\n                return { label: c[chipLabelField], value: c[chipIdField] };\n            }\n            return null;\n        })\n    );\n    const [extendedHeight, setSelectExtendedHeight] = useState();\n    const [float, setFloat] = useState();\n    const [isFocused, setIsFocused] = useState(false);\n    const selectId = `${idActual}-select`;\n    const containerId = `${idActual}-container`;\n    const isOutlined = variant === 'outlined';\n    const isValid = useMemo(() => {\n        if (!allowDuplicates && duplicates) return false;\n        return valid === undefined || valid === null ? true : valid;\n    }, [valid, duplicates, allowDuplicates]);\n\n    useEffect(() => {\n        setOptionsChips(\n            chips.map(c => {\n                if (typeof c === 'string' || typeof c === 'number')\n                    return { label: c, value: c };\n                if (typeof o !== 'object') {\n                    return { label: c[chipLabelField], value: c[chipIdField] };\n                }\n                return null;\n            })\n        );\n    }, [chips, chipLabelField, chipIdField]);\n    const handleBlur = useCallback(\n        e => {\n            setIsFocused(false);\n            setFloat(\n                !!chips.length ||\n                    (!!selectRef.current.state.value &&\n                        !!selectRef.current.state.value.length)\n            );\n            onBlur && onBlur(e);\n        },\n        [chips, onBlur]\n    );\n\n    const handleFocus = useCallback(\n        e => {\n            setIsFocused(true);\n            setFloat(true);\n            onFocus && onFocus(e);\n        },\n        [onFocus]\n    );\n\n    const handleInputChange = useCallback(val => {\n        setInputValue(val);\n    }, []);\n\n    const helperTextToUse = useMemo(\n        () =>\n            !allowDuplicates && duplicates\n                ? `${dupeText} ${helperText || ''}`\n                : helperText,\n        [duplicates, helperText, allowDuplicates]\n    );\n\n    const handleChange = useCallback(\n        (val, action) => {\n            if (\n                action.action === 'remove-value' ||\n                action.action === 'pop-value'\n            ) {\n                setDupe(false);\n                onRemoval(action.removedValue?.value, 'remove-value');\n            }\n            if (action.action === 'clear') {\n                const removedValues = action.removedValues.map(v => v.value);\n                setDupe(false);\n                onRemoval(removedValues, 'clear');\n            }\n        },\n        [onRemoval]\n    );\n\n    const onKeyPress = useCallback(\n        e => {\n            const isDupe = chips.some(c => c === inputValue);\n            switch (e.key) {\n                case 'Enter':\n                case 'Tab':\n                    if (!inputValue) return;\n                    if (!allowDuplicates) {\n                        setDupe(isDupe);\n                    }\n                    (!isDupe || allowDuplicates) && onAdd && onAdd(inputValue);\n                    setInputValue(resetValue);\n                    e.preventDefault();\n                    break;\n                default:\n            }\n        },\n        [inputValue, onAdd, resetValue, allowDuplicates, chips]\n    );\n\n    return (\n        <>\n            <div\n                ref={externalRef}\n                id={`${idActual}-container`}\n                className={clsx(\n                    'lmnt',\n                    'lmnt-input-chip--contained',\n                    'lmnt-select-container',\n                    'lmnt-select--value-display-pills',\n                    `lmnt-select--${variant}`,\n                    'lmnt-select',\n                    isFocused && 'mdc-select--focused',\n                    isOutlined && 'mdc-select--outlined',\n                    float && 'lmnt-select-float-label',\n                    disabled && 'lmnt-select--is-disabled',\n                    scrollable && 'lmnt-select--fixed-height',\n                    !isValid && 'mdc-select--invalid',\n                    className\n                )}\n                style={style}\n                {...containerProps}\n                {...customProps}\n            >\n                <CreatableSelect\n                    ref={selectRef}\n                    classNamePrefix='lmnt'\n                    className={clsx(\n                        'lmnt-select-inner-container',\n                        scrollable && 'lmnt-select--fixed-height'\n                    )}\n                    id={`${idActual}`}\n                    instanceId={`${idActual}`}\n                    isMulti\n                    multiSelect\n                    backspaceRemovesValue\n                    onChange={handleChange}\n                    onKeyDown={onKeyPress}\n                    placeholder=''\n                    menuIsOpen={false}\n                    isClearable\n                    isDisabled={disabled}\n                    styles={SelectStyles()}\n                    onBlur={handleBlur}\n                    onFocus={handleFocus}\n                    value={optionChips}\n                    controlRect={controlRect}\n                    setControlRect={setControlRect}\n                    setSelectExtendedHeight={setSelectExtendedHeight}\n                    extendedHeight={extendedHeight}\n                    isOutlined={isOutlined}\n                    variant={variant}\n                    onInputChange={handleInputChange}\n                    inputValue={inputValue}\n                    multiDisplayType='pills'\n                    anchorInput={anchorInput}\n                    valid={isValid}\n                    components={{\n                        Control: SelectControlComponent,\n                        ValueContainer: SelectValueContainer,\n                        IndicatorSeparator: null,\n                        DropdownIndicator: null,\n                        MultiValueRemove: SelectMultiValueRemove,\n                        MultiValue: SelectMultiValue,\n                        ClearIndicator: SelectClearIndicator,\n                        IndicatorsContainer: SelectIndicatorsContainer\n                    }}\n                />\n                <SelectLabel\n                    extendedHeight={extendedHeight}\n                    label={label}\n                    isOutlined={isOutlined}\n                    id={`${idActual}-select-label`}\n                    selectId={selectId}\n                    containerId={containerId}\n                    float={float}\n                    variant={variant}\n                />\n            </div>\n            <p\n                id={`${idActual}-helper-text`}\n                className={clsx(\n                    'mdc-select-helper-text',\n                    !isValid && 'lmnt-helper-text--invalid'\n                )}\n            >\n                {helperTextToUse}\n            </p>\n        </>\n    );\n});\n\nContainedInputChip.displayName = 'InputChip';\nContainedInputChip.propTypes = InputChipPropTypes;\nContainedInputChip.defaultProps = InputChipDefaultProps;\n\nexport default ContainedInputChip;\n","import React, {\n    useState,\n    useCallback,\n    useRef,\n    useMemo,\n    forwardRef\n} from 'react';\nimport { Textfield } from '@element/react-textfield';\nimport { Chips } from '@element/react-chips';\nimport { edsRandomId } from '@element/react-common';\nimport clsx from 'clsx';\nimport {\n    InputChipPropTypes,\n    InputChipDefaultProps\n} from './generated/propTypes';\n\nconst dupeText = 'Each entry must be unique.';\n\nconst UncontainedInputChip = forwardRef((props, externalRef) => {\n    const {\n        allowDuplicates,\n        anchorInput,\n        chips,\n        chipsProps,\n        className,\n        contained,\n        containerProps, // unused\n        disabled,\n        id,\n        onAdd,\n        onTrailingIconClick,\n        resetValue,\n        textfieldProps,\n        ...customProps\n    } = props;\n    const {\n        valid,\n        onChange,\n        helperText,\n        disabled: textfieldDisabled\n    } = textfieldProps;\n    const {\n        variant,\n        onRemoval,\n        chipIdField,\n        chipKeyField,\n        chipLabelField,\n        scrollable,\n        onUpdateChips,\n        disabled: chipsDisabled\n    } = chipsProps;\n    const [idActual] = useState(() => id || edsRandomId());\n    const [value, setValue] = useState('');\n    const [duplicates, setDupe] = useState(false);\n    const textfieldRef = useRef();\n\n    const helperTextToUse = useMemo(\n        () => (duplicates ? `${dupeText} ${helperText || ''}` : helperText),\n        [duplicates, helperText]\n    );\n\n    const isValid = useMemo(() => {\n        if (!allowDuplicates && duplicates) return false;\n        return valid === undefined || valid === null ? true : valid;\n    }, [valid, duplicates, allowDuplicates]);\n\n    const focusInput = useCallback(() => {\n        textfieldRef.current.mdc.focus();\n    }, []);\n\n    const handleChange = event => {\n        const v = event.target.value;\n        if (!allowDuplicates) {\n            setDupe(chips.some(c => c === v));\n        }\n        setValue(v);\n        onChange && onChange(event);\n    };\n\n    const onKeyPress = event => {\n        if (\n            !(event.code === 'Enter' || event.key === 'Enter') ||\n            !event.target.value ||\n            !isValid ||\n            duplicates\n        )\n            return;\n        onAdd && onAdd(event.target.value, event);\n        setValue(resetValue);\n    };\n\n    const textInput = (\n        <Textfield\n            {...textfieldProps}\n            helperTextId={`${idActual}-helperText`}\n            labelId={`${idActual}-labelId`}\n            ref={textfieldRef}\n            id={idActual}\n            value={value}\n            onChange={handleChange}\n            helperTextValidation\n            valid={isValid}\n            helperText={helperTextToUse}\n            containerProps={{\n                className: scrollable ? 'mdc-input-chips-scroll' : ''\n            }}\n            onKeyDown={onKeyPress}\n            disabled={disabled || textfieldDisabled}\n        />\n    );\n\n    return (\n        /* The <div> element has a child <Textfield> element that allows keyboard interaction */\n        /* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */\n        <div\n            ref={externalRef}\n            className={clsx([\n                'mdc-input-chip-container',\n                'lmnt-input-chip-container',\n                scrollable && 'mdc-text-field--with-scrollable-input-chip',\n                'mdc-text-field--input-chip',\n                className\n            ])}\n            onClick={focusInput}\n            {...customProps}\n        >\n            {/* eslint-enable jsx-a11y/no-static-element-interactions,\n            jsx-a11y/click-events-have-key-events,\n            jsx-a11y/no-static-element-interactions */}\n            {anchorInput && scrollable && textInput}\n            <div\n                id={`lmnt-chip-input-${idActual}`}\n                className={clsx([\n                    'mdc-input-chip-set-wrapper',\n                    'lmnt-input-chip-set-wrapper',\n                    scrollable && 'mdc-input-chip-set-wrapper-scrollable'\n                ])}\n            >\n                {anchorInput && !scrollable && textInput}\n                <Chips\n                    id={`lmnt-input-chips-${idActual}`}\n                    variant={variant}\n                    onRemoval={onRemoval}\n                    onUpdateChips={onUpdateChips}\n                    chipIdField={chipIdField}\n                    chipKeyField={chipKeyField}\n                    chipLabelField={chipLabelField}\n                    chips={chips}\n                    scrollable={scrollable}\n                    input\n                    disabled={disabled || chipsDisabled}\n                />\n                {!anchorInput && !scrollable && textInput}\n            </div>\n            {!anchorInput && scrollable && textInput}\n        </div>\n    );\n});\n\nUncontainedInputChip.displayName = 'InputChip';\nUncontainedInputChip.propTypes = InputChipPropTypes;\nUncontainedInputChip.defaultProps = InputChipDefaultProps;\n\nexport default UncontainedInputChip;\n","import React, { forwardRef } from 'react';\nimport {\n    InputChipPropTypes,\n    InputChipDefaultProps\n} from './generated/propTypes';\nimport UncontainedInputChip from './UncontainedInputChip';\nimport ContainedInputChip from './ContainedInputChip';\n\nconst InputChip = forwardRef((props, externalRef) => {\n    const { contained } = props;\n\n    if (contained) return <ContainedInputChip ref={externalRef} {...props} />;\n    return <UncontainedInputChip ref={externalRef} {...props} />;\n});\n\nInputChip.displayName = 'InputChip';\nInputChip.propTypes = InputChipPropTypes;\nInputChip.defaultProps = InputChipDefaultProps;\n\nexport default InputChip;\n"],"names":["InputChipPropTypes","allowDuplicates","PropTypes","bool","anchorInput","chips","oneOfType","arrayOf","string","object","chipsProps","contained","containerProps","disabled","onAdd","func","resetValue","textfieldProps","InputChipDefaultProps","undefined","dupeText","ContainedInputChip","forwardRef","props","externalRef","className","id","onTrailingIconClick","style","customProps","valid","helperText","onFocus","label","variant","onBlur","onRemoval","chipIdField","chipLabelField","scrollable","idActual","useState","edsRandomId","duplicates","setDupe","selectRef","useRef","controlRect","setControlRect","inputValue","setInputValue","optionChips","setOptionsChips","map","c","value","o","extendedHeight","setSelectExtendedHeight","float","setFloat","isFocused","setIsFocused","selectId","containerId","isOutlined","isValid","useMemo","useEffect","handleBlur","useCallback","e","length","current","state","handleFocus","handleInputChange","val","helperTextToUse","handleChange","action","_action$removedValue","removedValue","removedValues","v","onKeyPress","isDupe","some","key","preventDefault","React","createElement","Fragment","_extends","ref","clsx","CreatableSelect","classNamePrefix","instanceId","isMulti","multiSelect","backspaceRemovesValue","onChange","onKeyDown","placeholder","menuIsOpen","isClearable","isDisabled","styles","SelectStyles","onInputChange","multiDisplayType","components","Control","SelectControlComponent","ValueContainer","SelectValueContainer","IndicatorSeparator","DropdownIndicator","MultiValueRemove","SelectMultiValueRemove","MultiValue","SelectMultiValue","ClearIndicator","SelectClearIndicator","IndicatorsContainer","SelectIndicatorsContainer","SelectLabel","displayName","propTypes","defaultProps","UncontainedInputChip","textfieldDisabled","chipKeyField","onUpdateChips","chipsDisabled","setValue","textfieldRef","focusInput","mdc","focus","event","target","code","textInput","Textfield","helperTextId","labelId","helperTextValidation","onClick","Chips","input","InputChip"],"mappings":"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"}