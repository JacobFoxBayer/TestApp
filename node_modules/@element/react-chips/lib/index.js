'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var clsx = require('clsx');
var reactCommon = require('@element/react-common');
var chips = require('@material/chips');
var reactUse = require('react-use');
var reactIcon = require('@element/react-icon');
var shared = require('@element/shared');
var isObjectLike = require('lodash/isObjectLike');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var isObjectLike__default = /*#__PURE__*/_interopDefault(isObjectLike);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ChipsPropTypes = {
  /**
   * The property on each chip  that represents the id. If one is not provided material will generate an automatic ID.
   *
   * Defaults to **empty string**.
   */
  chipIdField: PropTypes__default["default"].string,
  /**
   * The property on each chip that is used as a unique key.
   *
   * Defaults to **'id'**.
   */
  chipKeyField: PropTypes__default["default"].string,
  /**
   * The property for the label on each chip. The `labelRenderer` overrides the rendering of the label field
   *
   * Defaults to **'label'**.
   */
  chipLabelField: PropTypes__default["default"].string,
  /**
   * Array of chips to manager and render.
   *
   * Defaults to **[]**.
   */
  chips: PropTypes__default["default"].array.isRequired,
  /**
   * Prevent the user from interacting with the chips.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Allows chips to be dynamically added and removed upon trailing icon interaction.
   *
   * Defaults to **false**.
   */
  input: PropTypes__default["default"].bool,
  /**
   * Returns the label to be rendered on each chip. Receives the chipData.
   *
   * Defaults to **null**.
   */
  labelRenderer: PropTypes__default["default"].oneOfType([PropTypes__default["default"].node, PropTypes__default["default"].func]),
  /**
   * Leading icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `leadingIconField` of each chip is used
   *
   * Defaults to **null**.
   */
  leadingIcon: PropTypes__default["default"].func,
  /**
   * Leading icon property name for each chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
   *
   * Defaults to **'leadingIcon'**.
   */
  leadingIconField: PropTypes__default["default"].string,
  /**
   * Fired when the chip is interacted with (via click/tap or Enter key).
   *
   * Defaults to **null**.
   */
  onInteraction: PropTypes__default["default"].func,
  /**
   * Fired when a chip is removed.
   *
   * Defaults to **null**.
   */
  onRemoval: PropTypes__default["default"].func,
  /**
   * Fired when the chips are removed (*input chips* only).
   *
   * Defaults to **null**.
   */
  onUpdateChips: PropTypes__default["default"].func,
  /**
   * Fired when the selected chips are updated (choice and filter chips only).
   *
   * Defaults to **null**.
   */
  onUpdateSelectedChips: PropTypes__default["default"].func,
  /**
   * Prevents choice chips from being deselected upon interaction.
   *
   * Defaults to **false**.
   */
  preventChoiceDeselection: PropTypes__default["default"].bool,
  /**
   * Chips do not break on a newline. The user must scroll horizontally if there is any overflow.
   *
   * Defaults to **false**.
   */
  scrollable: PropTypes__default["default"].bool,
  /**
   * Array of currently selected chips.
   *
   * Defaults to **[]**.
   */
  selectedChips: PropTypes__default["default"].array,
  /**
   * Filter enables selection of multiple chips and will add a check mark to selected chips. Choice allows only one selected chip.
   *
   * Defaults to **'default'**.
   */
  selectionType: PropTypes__default["default"].oneOf(["default", "choice", "filter"]),
  /**
   * Trailing icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `trailingIconField` of each chip is used
   *
   * Defaults to **null**.
   */
  trailingIcon: PropTypes__default["default"].func,
  /**
   * Trailing icon property name for each chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
   *
   * Defaults to **'trailingIcon'**.
   */
  trailingIconField: PropTypes__default["default"].string,
  /**
   * Shows chips as `filled` or `outlined`.
   *
   * Defaults to **'filled'**.
   */
  variant: PropTypes__default["default"].oneOf(["filled", "outlined"])
};
const ChipsDefaultProps = {
  chipIdField: "",
  chipKeyField: "id",
  chipLabelField: "label",
  chips: [],
  disabled: false,
  input: false,
  labelRenderer: null,
  leadingIcon: null,
  leadingIconField: "leadingIcon",
  preventChoiceDeselection: false,
  scrollable: false,
  selectedChips: [],
  selectionType: "default",
  trailingIcon: null,
  trailingIconField: "trailingIcon",
  variant: "filled"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ChipPropTypes = {
  /**
   * Chip data to be rendered. If no `label` is passed in, `chipData` will be used. If using an object, use the `chipLabelField` to set property to be rendered as the label. You may also set `leadingIconField` and `trailingIconField`, as well as labelRenderer for additional control.
   *
   * Defaults to **null**.
   */
  chipData: PropTypes__default["default"].any.isRequired,
  /**
   * The property on the chip that represents the id. If one is not provided material will generate an automatic ID.
   *
   * Defaults to **empty string**.
   */
  chipIdField: PropTypes__default["default"].string,
  /**
   * The property on the chip that is the label. The default slot overrides the rendering of the label.
   *
   * Defaults to **empty string**.
   */
  chipLabelField: PropTypes__default["default"].string.isRequired,
  /**
   * Prevent the user from interacting with the chip.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Custom id.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes__default["default"].string,
  /**
   * If the chip is selected on mount.
   *
   * Defaults to **null**.
   */
  initiallySelected: PropTypes__default["default"].bool.isRequired,
  /**
   * Allows chip to be dynamically added and removed upon trailing icon interaction.
   *
   * Defaults to **null**.
   */
  input: PropTypes__default["default"].bool.isRequired,
  /**
   * The label to be rendered on each chip. Optionally `chipData` and `chipLabelField` may be used instead of `label`.
   *
   * Defaults to **null**.
   */
  label: PropTypes__default["default"].node,
  /**
   * Returns the label to be rendered on each chip. Receives the chipData.
   *
   * Defaults to **null**.
   */
  labelRenderer: PropTypes__default["default"].oneOfType([PropTypes__default["default"].node, PropTypes__default["default"].func]),
  /**
   * Slot for leading icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no leading icon, a material icon rendering the `leadingIconPropName` of each chip is used.
   *
   * Defaults to **null**.
   */
  leadingIcon: PropTypes__default["default"].func,
  /**
   * Leading icon property name for the chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
   *
   * Defaults to **empty string**.
   */
  leadingIconField: PropTypes__default["default"].string.isRequired,
  /**
   * Called when chip is clicked.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes__default["default"].func,
  /**
   * Fired when the chip is destroyed.
   *
   * Defaults to **null**.
   */
  onDestroy: PropTypes__default["default"].func,
  /**
   * Called when Enter is pressed.
   *
   * Defaults to **null**.
   */
  onEnter: PropTypes__default["default"].func,
  /**
   * Fired when the chip is mounted.
   *
   * Defaults to **null**.
   */
  onMounted: PropTypes__default["default"].func,
  /**
   * The type`filter` enables selection of multiple chips and will add a check mark to selected chips. The type`choice` allows only one selected chip.
   *
   * Defaults to **'default'**.
   */
  selectionType: PropTypes__default["default"].oneOf(["default", "choice", "filter"]),
  /**
   * Slot for trailing icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no trailing icon, a material icon rendering the `trailingIconPropName` of each chip is used.
   *
   * Defaults to **null**.
   */
  trailingIcon: PropTypes__default["default"].func,
  /**
   * Trailing icon property name for the chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
   *
   * Defaults to **empty string**.
   */
  trailingIconField: PropTypes__default["default"].string.isRequired,
  /**
   * Applies the selected style.
   *
   * Defaults to **'filled'**.
   */
  variant: PropTypes__default["default"].oneOf(["filled", "outlined"]).isRequired
};
const ChipDefaultProps = {
  chipData: null,
  chipIdField: "",
  chipLabelField: "",
  disabled: false,
  id: undefined,
  initiallySelected: null,
  input: null,
  label: null,
  labelRenderer: null,
  leadingIcon: null,
  leadingIconField: "",
  selectionType: "default",
  trailingIcon: null,
  trailingIconField: "",
  variant: "filled"
};

const getChipProp = (props, prop) => {
  var _props$chipData;
  const iconProps = props === null || props === void 0 ? void 0 : (_props$chipData = props.chipData) === null || _props$chipData === void 0 ? void 0 : _props$chipData[prop];
  if (iconProps) {
    if (typeof iconProps === 'string') {
      return {
        icon: iconProps
      };
    }
    if (typeof iconProps === 'object') {
      return iconProps;
    }
    shared.edsWarning(`${prop} chip field must be of type string or object`);
  }
  return {};
};
const leadingIconSlotProps = props => {
  const iconProps = getChipProp(props, props.leadingIconField);
  const hiddenClass = props.initiallySelected ? 'mdc-chip__icon--leading-hidden' : '';
  return {
    chip: props.chipData,
    iconProps: {
      ...iconProps,
      className: `mdc-chip__icon mdc-chip__icon--leading ${hiddenClass}`,
      tabIndex: '-1'
    }
  };
};
const trailingIconSlotProps = props => {
  const {
    icon,
    ...otherIconProps
  } = getChipProp(props, props.trailingIconField);
  return {
    chip: props.chipData,
    iconProps: {
      ...otherIconProps,
      icon: icon || 'cancel',
      className: 'mdc-chip__icon mdc-chip__icon--trailing mdc-chip-trailing-action',
      role: 'button',
      tabIndex: '0'
    }
  };
};
const checkmark = /*#__PURE__*/React__default["default"].createElement("span", {
  className: "mdc-chip__checkmark"
}, /*#__PURE__*/React__default["default"].createElement("svg", {
  className: "mdc-chip__checkmark-svg",
  viewBox: "-2 -3 30 30"
}, /*#__PURE__*/React__default["default"].createElement("path", {
  className: "mdc-chip__checkmark-path",
  fill: "none",
  stroke: "black",
  d: "M1.73,12.91 8.1,19.28 22.79,4.59"
})));
const Chip = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    chipData,
    chipIdField,
    chipLabelField,
    disabled,
    id,
    initiallySelected,
    input,
    label,
    labelRenderer,
    leadingIcon,
    leadingIconField,
    onDestroy,
    onMounted,
    selectionType,
    trailingIcon,
    trailingIconField,
    variant,
    onClick,
    onEnter,
    ...customProps
  } = props;
  const [idActual] = React.useState(() => {
    var _chipData$chipIdField;
    return id || chipIdField && (chipData === null || chipData === void 0 ? void 0 : (_chipData$chipIdField = chipData[chipIdField]) === null || _chipData$chipIdField === void 0 ? void 0 : _chipData$chipIdField.toString()) || shared.edsRandomId();
  });
  const chipRef = React.useRef();
  const state = React.useRef({});
  React.useImperativeHandle(externalRef, () => chipRef.current, []);
  React.useEffect(() => {
    state.current.onMounted = onMounted;
  }, [onMounted]);
  React.useEffect(() => {
    state.current.onDestroy = onDestroy;
  }, [onDestroy]);
  React.useEffect(() => {
    state.current.chipData = chipData;
  }, [chipData]);
  React.useEffect(() => {
    var _currentState$onMount;
    const currentState = state === null || state === void 0 ? void 0 : state.current;
    currentState === null || currentState === void 0 ? void 0 : (_currentState$onMount = currentState.onMounted) === null || _currentState$onMount === void 0 ? void 0 : _currentState$onMount.call(currentState, currentState.chipData, chipRef.current);
    return () => {
      var _currentState$onDestr;
      currentState === null || currentState === void 0 ? void 0 : (_currentState$onDestr = currentState.onDestroy) === null || _currentState$onDestr === void 0 ? void 0 : _currentState$onDestr.call(currentState, currentState.chipData);
    };
  }, []);
  let trailingIconElement;
  let leadingIconElement;
  const leadingIconProps = leadingIconSlotProps(props);
  if (leadingIcon) {
    leadingIconElement = leadingIcon(leadingIconProps);
  } else if (leadingIconProps.iconProps.icon) {
    leadingIconElement = /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, leadingIconProps.iconProps);
  }
  if (input) {
    const slotProps = trailingIconSlotProps(props);
    if (trailingIcon) {
      trailingIconElement = trailingIcon(slotProps);
    } else {
      trailingIconElement = /*#__PURE__*/React__default["default"].createElement(reactIcon.Icon, slotProps.iconProps);
    }
  }
  const [labelActual, setLabelActual] = React.useState();
  React.useEffect(() => {
    if (label) {
      setLabelActual(label);
      return;
    }
    if (labelRenderer) {
      setLabelActual(labelRenderer({
        chip: chipData
      }));
      return;
    }
    if (isObjectLike__default["default"](chipData)) {
      setLabelActual(chipData[chipLabelField]);
      return;
    }
    setLabelActual(chipData);
  }, [chipData, chipLabelField, label, labelRenderer]);
  const chipClasses = clsx__default["default"]('lmnt', 'mdc-chip', 'mdc-chip--touch', initiallySelected && 'mdc-chip--selected', variant === 'outlined' && 'mdc-chip--outline', disabled && 'lmnt-chip--disabled');
  const handleClick = e => {
    if (!disabled) onClick === null || onClick === void 0 ? void 0 : onClick(e);
  };
  const handleKeyPress = e => {
    if (e.key === 'Enter') {
      onEnter === null || onEnter === void 0 ? void 0 : onEnter(e);
    }
  };
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: chipRef,
    className: chipClasses,
    id: idActual,
    role: "row",
    onClick: handleClick,
    tabIndex: 0,
    onKeyUp: handleKeyPress
  }, customProps), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "lmnt mdc-chip__ripple"
  }), leadingIconElement, selectionType === 'filter' && checkmark, /*#__PURE__*/React__default["default"].createElement("span", {
    role: "gridcell"
  }, /*#__PURE__*/React__default["default"].createElement("span", {
    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props
    role: "checkbox",
    tabIndex: "0",
    className: "mdc-chip__primary-action"
  }, /*#__PURE__*/React__default["default"].createElement("span", {
    className: "mdc-chip__text"
  }, labelActual))), trailingIconElement);
});
Chip.displayName = 'Chip';
Chip.propTypes = ChipPropTypes;
Chip.defaultProps = ChipDefaultProps;
var Chip$1 = /*#__PURE__*/React__default["default"].memo(Chip);

const {
  MDCChipSet
} = {
  ...chips.deprecated
};
const createMdcChipSet = element => {
  const chipset = MDCChipSet.attachTo(element);
  chipset.foundation.adapter.removeChipAtIndex = index => {
    // Override removeChipAtIndex so that it doesn't remove the HTML. let react handle that
    if (index >= 0 && index < chipset.chips_.length) {
      chipset.chips_[index].destroy();
      chipset.chips_.splice(index, 1);
    }
  };
  return chipset;
};
const Chips = _ref => {
  let {
    children,
    chipIdField,
    chipKeyField,
    chipLabelField,
    chips,
    input,
    labelRenderer,
    leadingIcon,
    leadingIconField,
    onInteraction,
    onRemoval,
    onUpdateChips,
    onUpdateSelectedChips,
    preventChoiceDeselection,
    scrollable,
    selectedChips,
    selectionType,
    trailingIcon,
    trailingIconField,
    variant,
    disabled,
    ...customProps
  } = _ref;
  const destroyed = React.useRef(false);
  const [chipKeysToId, {
    remove: removeChipId,
    set: addChipId
  }] = reactUse.useMap();
  const [chipsetRef, setChipsetRef] = React.useState(null); // Initialize to null so that useEvent doesn't initially listen to the global window
  const [mdcChipSet, setMdcChipSet] = React.useState(null);
  const getKey = React.useCallback(chip => chip[chipKeyField] || chip, [chipKeyField]);
  const [initiallySelectedChips] = React.useState(() => new Set(selectedChips.map(chip => getKey(chip))));
  const selectedChipSet = React.useMemo(() => new Set(selectedChips.map(chip => getKey(chip))), [getKey, selectedChips]);
  reactCommon.useIsomorphicLayoutEffect(() => {
    destroyed.current = false;
    const chipset = chipsetRef ? createMdcChipSet(chipsetRef) : null;
    setMdcChipSet(chipset);
    return () => {
      if (chipset) {
        destroyed.current = true;
        chipset.destroy();
      }
    };
  }, [chipsetRef]);
  const getId = React.useCallback(chip => chipKeysToId[getKey(chip)], [chipKeysToId, getKey]);
  const getChip = React.useCallback(id => chips.find(chip => getId(chip) === id), [chips, getId]);
  const getMdcChip = React.useCallback(id => mdcChipSet === null || mdcChipSet === void 0 ? void 0 : mdcChipSet.chips.find(chip => chip.id === id), [mdcChipSet]);
  const isSelected = React.useCallback(chip => selectedChipSet.has(getKey(chip)), [getKey, selectedChipSet]);
  const isInitiallySelected = React.useCallback(chip => !!initiallySelectedChips.has(getKey(chip)), [getKey, initiallySelectedChips]);
  const onMounted = React.useCallback((chip, chipElement) => {
    addChipId(getKey(chip), chipElement.id);
    mdcChipSet === null || mdcChipSet === void 0 ? void 0 : mdcChipSet.addChip(chipElement);
  }, [addChipId, getKey, mdcChipSet]);
  const emitSelectedChips = React.useCallback(() => {
    if (onUpdateSelectedChips) {
      const selectedIdsSet = new Set(mdcChipSet === null || mdcChipSet === void 0 ? void 0 : mdcChipSet.selectedChipIds);
      onUpdateSelectedChips(chips.filter(item => selectedIdsSet.has(getId(item))));
    }
  }, [mdcChipSet, onUpdateSelectedChips, chips, getId]);
  const onSelectCallback = React.useCallback(() => {
    if (selectionType !== 'choice') {
      // ignore choice chips since multiple events get fired
      emitSelectedChips();
    }
  }, [selectionType, emitSelectedChips]);
  const onChipRemoval = React.useCallback(chip => {
    if (!input) {
      return;
    }
    const availableChips = new Set(mdcChipSet === null || mdcChipSet === void 0 ? void 0 : mdcChipSet.chips.map(item => item.id));
    const filteredChips = chips.filter(item => availableChips.has(getId(item)));
    if (onUpdateChips) {
      onUpdateChips(filteredChips);
    }
    if (onRemoval) {
      onRemoval(chip);
    }
  }, [chips, getId, input, mdcChipSet, onRemoval, onUpdateChips]);
  const onChipRemovalCallback = React.useCallback(event => {
    onChipRemoval(getChip(event.detail.chipId));
  }, [getChip, onChipRemoval]);
  const onInteractionCallback = React.useCallback(event => {
    if (onInteraction) {
      const chip = getChip(event.detail.chipId);
      onInteraction(chip);
    }
    if (selectionType === 'choice') {
      if (preventChoiceDeselection) {
        const mdcChip = getMdcChip(event.detail.chipId);
        if (!mdcChip.selected) {
          mdcChip.selected = true;
          return;
        }
      }
      emitSelectedChips();
    }
  }, [emitSelectedChips, getChip, getMdcChip, onInteraction, preventChoiceDeselection, selectionType]);
  const onDestroy = React.useCallback(chip => {
    if (destroyed.current) {
      return;
    }
    const id = getId(chip);
    const key = getKey(chip);
    removeChipId(key);
    if (getMdcChip(id)) {
      mdcChipSet.foundation.handleChipRemoval({
        chipId: id
      });
      onSelectCallback();
      onChipRemoval(chip);
    }
  }, [getId, getKey, getMdcChip, mdcChipSet, onChipRemoval, onSelectCallback, removeChipId]);
  React.useEffect(() => {
    const mdcChipMap = new Map(mdcChipSet === null || mdcChipSet === void 0 ? void 0 : mdcChipSet.chips.map(chip => [chip.id, chip]));
    for (const chip of chips) {
      const selected = isSelected(chip);
      const mdcChip = mdcChipMap.get(getId(chip));
      if (mdcChip && selected !== mdcChip.selected) {
        mdcChip.selected = selected;
      }
    }
  }, [chips, getId, isSelected, mdcChipSet]);
  reactUse.useEvent('MDCChip:removal', onChipRemovalCallback, chipsetRef);
  reactUse.useEvent('MDCChip:selection', onSelectCallback, chipsetRef);
  reactUse.useEvent('MDCChip:interaction', onInteractionCallback, chipsetRef);
  const chipElements = React.useMemo(() => chips.map(chip => /*#__PURE__*/React__default["default"].createElement(Chip$1, {
    key: getKey(chip),
    chipData: chip,
    chipIdField: chipIdField
    // chipKeyField={chipKeyField}
    ,
    chipLabelField: chipLabelField,
    initiallySelected: isInitiallySelected(chip),
    input: input,
    labelRenderer: labelRenderer,
    leadingIcon: leadingIcon,
    leadingIconField: leadingIconField,
    onDestroy: onDestroy,
    onMounted: onMounted,
    selectionType: selectionType,
    trailingIcon: trailingIcon,
    trailingIconField: trailingIconField,
    variant: variant,
    disabled: disabled || chip.disabled
  })), [chipIdField, chipLabelField, chips, disabled, getKey, input, isInitiallySelected, labelRenderer, leadingIcon, leadingIconField, onDestroy, onMounted, selectionType, trailingIcon, trailingIconField, variant]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    className: clsx__default["default"]('lmnt', scrollable && 'mdc-chip-set-scrollable-wrapper')
  }, customProps), /*#__PURE__*/React__default["default"].createElement("div", {
    ref: setChipsetRef,
    className: clsx__default["default"]('lmnt', 'mdc-chip-set', selectionType === 'choice' && 'mdc-chip-set--choice', selectionType === 'filter' && 'mdc-chip-set--filter', input && 'mdc-chip-set--input', scrollable && 'mdc-chip-set--input-scroll', disabled && 'lmnt-chips--disabled')
  }, chipElements));
};
Chips.displayName = 'Chips';
Chips.propTypes = ChipsPropTypes;
Chips.defaultProps = ChipsDefaultProps;
var Chips$1 = /*#__PURE__*/React__default["default"].memo(Chips);

exports.Chip = Chip$1;
exports.ChipSet = Chips$1;
exports.Chips = Chips$1;
//# sourceMappingURL=index.js.map
