import React from 'react';


export interface ChipProps {
    /**
    * Chip data to be rendered. If no `label` is passed in, `chipData` will be used. If using an object, use the `chipLabelField` to set property to be rendered as the label. You may also set `leadingIconField` and `trailingIconField`, as well as labelRenderer for additional control. 
    *
    * Defaults to **null**.
    */
    chipData: any;
    /**
    * The property on the chip that represents the id. If one is not provided material will generate an automatic ID.
    *
    * Defaults to **empty string**.
    */
    chipIdField?: string;
    /**
    * The property on the chip that is the label. The default slot overrides the rendering of the label.
    *
    * Defaults to **empty string**.
    */
    chipLabelField: string;
    /**
    * Prevent the user from interacting with the chip.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Custom id.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * If the chip is selected on mount.
    *
    * Defaults to **null**.
    */
    initiallySelected: boolean;
    /**
    * Allows chip to be dynamically added and removed upon trailing icon interaction.
    *
    * Defaults to **null**.
    */
    input: boolean;
    /**
    * The label to be rendered on each chip. Optionally `chipData` and `chipLabelField` may be used instead of `label`.
    *
    * Defaults to **null**.
    */
    label?: React.ReactNode;
    /**
    * Returns the label to be rendered on each chip. Receives the chipData.
    *
    * Defaults to **null**.
    */
    labelRenderer?: React.ReactNode | Function;
    /**
    * Slot for leading icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no leading icon, a material icon rendering the `leadingIconPropName` of each chip is used.
    *
    * Defaults to **null**.
    */
    leadingIcon?: Function;
    /**
    * Leading icon property name for the chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **empty string**.
    */
    leadingIconField: string;
    /**
    * The type`filter` enables selection of multiple chips and will add a check mark to selected chips. The type`choice` allows only one selected chip.
    *
    * Defaults to **'default'**.
    */
    selectionType?: string;
    /**
    * Slot for trailing icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no trailing icon, a material icon rendering the `trailingIconPropName` of each chip is used.
    *
    * Defaults to **null**.
    */
    trailingIcon?: Function;
    /**
    * Trailing icon property name for the chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **empty string**.
    */
    trailingIconField: string;
    /**
    * Applies the selected style.
    *
    * Defaults to **'filled'**.
    */
    variant: string;
    /**
    * Called when chip is clicked.
    */
    onClick?: Function;
    /**
    * Fired when the chip is destroyed.
    */
    onDestroy?: Function;
    /**
    * Called when Enter is pressed.
    */
    onEnter?: Function;
    /**
    * Fired when the chip is mounted.
    */
    onMounted?: Function;
}

/**
* Chips are used to represent small blocks of information that the user has entered or selected. They can be one of the types Choice, Filter, or Input.
 * @prop {any} chipData - Chip data to be rendered. If no `label` is passed in, `chipData` will be used. If using an object, use the `chipLabelField` to set property to be rendered as the label. You may also set `leadingIconField` and `trailingIconField`, as well as labelRenderer for additional control.  Defaults to _null_.
 * @prop {string} chipIdField - The property on the chip that represents the id. If one is not provided material will generate an automatic ID. Defaults to _empty string_.
 * @prop {string} chipLabelField - The property on the chip that is the label. The default slot overrides the rendering of the label. Defaults to _empty string_.
 * @prop {boolean} disabled - Prevent the user from interacting with the chip. Defaults to _false_.
 * @prop {string} id - Custom id. Defaults to _undefined_.
 * @prop {boolean} initiallySelected - If the chip is selected on mount. Defaults to _null_.
 * @prop {boolean} input - Allows chip to be dynamically added and removed upon trailing icon interaction. Defaults to _null_.
 * @prop {React.ReactNode} label - The label to be rendered on each chip. Optionally `chipData` and `chipLabelField` may be used instead of `label`. Defaults to _null_.
 * @prop {React.ReactNode|function} labelRenderer - Returns the label to be rendered on each chip. Receives the chipData. Defaults to _null_.
 * @prop {Function} leadingIcon - Slot for leading icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no leading icon, a material icon rendering the `leadingIconPropName` of each chip is used. Defaults to _null_.
 * @prop {string} leadingIconField - Leading icon property name for the chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _empty string_.
 * @prop {string} selectionType - The type`filter` enables selection of multiple chips and will add a check mark to selected chips. The type`choice` allows only one selected chip. Defaults to _'default'_.
 * @prop {Function} trailingIcon - Slot for trailing icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no trailing icon, a material icon rendering the `trailingIconPropName` of each chip is used. Defaults to _null_.
 * @prop {string} trailingIconField - Trailing icon property name for the chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _empty string_.
 * @prop {string} variant - Applies the selected style. Defaults to _'filled'_.
 *  @event onClick - Called when chip is clicked.
 *  @event onDestroy - Fired when the chip is destroyed.
 *  @event onEnter - Called when Enter is pressed.
 *  @event onMounted - Fired when the chip is mounted.
*/
export const Chip: React.FunctionComponent<ChipProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ChipsProps {
    /**
    * The property on each chip  that represents the id. If one is not provided material will generate an automatic ID.
    *
    * Defaults to **empty string**.
    */
    chipIdField?: string;
    /**
    * The property on each chip that is used as a unique key.
    *
    * Defaults to **'id'**.
    */
    chipKeyField?: string;
    /**
    * The property for the label on each chip. The `labelRenderer` overrides the rendering of the label field
    *
    * Defaults to **'label'**.
    */
    chipLabelField?: string;
    /**
    * Array of chips to manager and render.
    *
    * Defaults to **[]**.
    */
    chips: Array<object>;
    /**
    * Prevent the user from interacting with the chips.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Allows chips to be dynamically added and removed upon trailing icon interaction.
    *
    * Defaults to **false**.
    */
    input?: boolean;
    /**
    * Returns the label to be rendered on each chip. Receives the chipData.
    *
    * Defaults to **null**.
    */
    labelRenderer?: React.ReactNode | Function;
    /**
    * Leading icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `leadingIconField` of each chip is used
    *
    * Defaults to **null**.
    */
    leadingIcon?: Function;
    /**
    * Leading icon property name for each chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **'leadingIcon'**.
    */
    leadingIconField?: string;
    /**
    * Prevents choice chips from being deselected upon interaction.
    *
    * Defaults to **false**.
    */
    preventChoiceDeselection?: boolean;
    /**
    * Chips do not break on a newline. The user must scroll horizontally if there is any overflow.
    *
    * Defaults to **false**.
    */
    scrollable?: boolean;
    /**
    * Array of currently selected chips.
    *
    * Defaults to **[]**.
    */
    selectedChips?: Array<object>;
    /**
    * Filter enables selection of multiple chips and will add a check mark to selected chips. Choice allows only one selected chip.
    *
    * Defaults to **'default'**.
    */
    selectionType?: string;
    /**
    * Trailing icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `trailingIconField` of each chip is used
    *
    * Defaults to **null**.
    */
    trailingIcon?: Function;
    /**
    * Trailing icon property name for each chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.
    *
    * Defaults to **'trailingIcon'**.
    */
    trailingIconField?: string;
    /**
    * Shows chips as `filled` or `outlined`.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when the chip is interacted with (via click/tap or Enter key).
    */
    onInteraction?: Function;
    /**
    * Fired when a chip is removed.
    */
    onRemoval?: Function;
    /**
    * Fired when the chips are removed (*input chips* only).
    */
    onUpdateChips?: Function;
    /**
    * Fired when the selected chips are updated (choice and filter chips only).
    */
    onUpdateSelectedChips?: Function;
}

/**
* Chips are used to represent small blocks of information that the user has entered or selected. They can be one of the types Choice, Filter, or Input
 * @prop {string} chipIdField - The property on each chip  that represents the id. If one is not provided material will generate an automatic ID. Defaults to _empty string_.
 * @prop {string} chipKeyField - The property on each chip that is used as a unique key. Defaults to _'id'_.
 * @prop {string} chipLabelField - The property for the label on each chip. The `labelRenderer` overrides the rendering of the label field Defaults to _'label'_.
 * @prop {[]} chips - Array of chips to manager and render. Defaults to _[]_.
 * @prop {boolean} disabled - Prevent the user from interacting with the chips. Defaults to _false_.
 * @prop {boolean} input - Allows chips to be dynamically added and removed upon trailing icon interaction. Defaults to _false_.
 * @prop {React.ReactNode|function} labelRenderer - Returns the label to be rendered on each chip. Receives the chipData. Defaults to _null_.
 * @prop {Function} leadingIcon - Leading icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `leadingIconField` of each chip is used Defaults to _null_.
 * @prop {string} leadingIconField - Leading icon property name for each chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _'leadingIcon'_.
 * @prop {boolean} preventChoiceDeselection - Prevents choice chips from being deselected upon interaction. Defaults to _false_.
 * @prop {boolean} scrollable - Chips do not break on a newline. The user must scroll horizontally if there is any overflow. Defaults to _false_.
 * @prop {[]} selectedChips - Array of currently selected chips. Defaults to _[]_.
 * @prop {string} selectionType - Filter enables selection of multiple chips and will add a check mark to selected chips. Choice allows only one selected chip. Defaults to _'default'_.
 * @prop {Function} trailingIcon - Trailing icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `trailingIconField` of each chip is used Defaults to _null_.
 * @prop {string} trailingIconField - Trailing icon property name for each chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component. Defaults to _'trailingIcon'_.
 * @prop {string} variant - Shows chips as `filled` or `outlined`. Defaults to _'filled'_.
 *  @event onInteraction - Fired when the chip is interacted with (via click/tap or Enter key).
 *  @event onRemoval - Fired when a chip is removed.
 *  @event onUpdateChips - Fired when the chips are removed (*input chips* only).
 *  @event onUpdateSelectedChips - Fired when the selected chips are updated (choice and filter chips only).
*/
export const Chips: React.FunctionComponent<ChipsProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
