{"version":3,"file":"index.js","sources":["../generated/propTypes.js","../Chip.js","../Chips.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n *\n * This file is automatically generated by the Element\n * documentation system. Any modifications to this file\n * will be overwritten!\n *\n */\n\nexport const ChipsPropTypes = {\n  /**\n   * The property on each chip  that represents the id. If one is not provided material will generate an automatic ID.\n   *\n   * Defaults to **empty string**.\n   */\n  chipIdField: PropTypes.string,\n  /**\n   * The property on each chip that is used as a unique key.\n   *\n   * Defaults to **'id'**.\n   */\n  chipKeyField: PropTypes.string,\n  /**\n   * The property for the label on each chip. The `labelRenderer` overrides the rendering of the label field\n   *\n   * Defaults to **'label'**.\n   */\n  chipLabelField: PropTypes.string,\n  /**\n   * Array of chips to manager and render.\n   *\n   * Defaults to **[]**.\n   */\n  chips: PropTypes.array.isRequired,\n  /**\n   * Prevent the user from interacting with the chips.\n   *\n   * Defaults to **false**.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Allows chips to be dynamically added and removed upon trailing icon interaction.\n   *\n   * Defaults to **false**.\n   */\n  input: PropTypes.bool,\n  /**\n   * Returns the label to be rendered on each chip. Receives the chipData.\n   *\n   * Defaults to **null**.\n   */\n  labelRenderer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  /**\n   * Leading icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `leadingIconField` of each chip is used\n   *\n   * Defaults to **null**.\n   */\n  leadingIcon: PropTypes.func,\n  /**\n   * Leading icon property name for each chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.\n   *\n   * Defaults to **'leadingIcon'**.\n   */\n  leadingIconField: PropTypes.string,\n  /**\n   * Fired when the chip is interacted with (via click/tap or Enter key).\n   *\n   * Defaults to **null**.\n   */\n  onInteraction: PropTypes.func,\n  /**\n   * Fired when a chip is removed.\n   *\n   * Defaults to **null**.\n   */\n  onRemoval: PropTypes.func,\n  /**\n   * Fired when the chips are removed (*input chips* only).\n   *\n   * Defaults to **null**.\n   */\n  onUpdateChips: PropTypes.func,\n  /**\n   * Fired when the selected chips are updated (choice and filter chips only).\n   *\n   * Defaults to **null**.\n   */\n  onUpdateSelectedChips: PropTypes.func,\n  /**\n   * Prevents choice chips from being deselected upon interaction.\n   *\n   * Defaults to **false**.\n   */\n  preventChoiceDeselection: PropTypes.bool,\n  /**\n   * Chips do not break on a newline. The user must scroll horizontally if there is any overflow.\n   *\n   * Defaults to **false**.\n   */\n  scrollable: PropTypes.bool,\n  /**\n   * Array of currently selected chips.\n   *\n   * Defaults to **[]**.\n   */\n  selectedChips: PropTypes.array,\n  /**\n   * Filter enables selection of multiple chips and will add a check mark to selected chips. Choice allows only one selected chip.\n   *\n   * Defaults to **'default'**.\n   */\n  selectionType: PropTypes.oneOf([\"default\", \"choice\", \"filter\"]),\n  /**\n   * Trailing icon render function. `chip` and `iconProps` is passed into the params. `iconProps` contains all the props for the icon component. If unused, a material icon rendering the `trailingIconField` of each chip is used\n   *\n   * Defaults to **null**.\n   */\n  trailingIcon: PropTypes.func,\n  /**\n   * Trailing icon property name for each chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.\n   *\n   * Defaults to **'trailingIcon'**.\n   */\n  trailingIconField: PropTypes.string,\n  /**\n   * Shows chips as `filled` or `outlined`.\n   *\n   * Defaults to **'filled'**.\n   */\n  variant: PropTypes.oneOf([\"filled\", \"outlined\"]),\n};\n\nexport const ChipsDefaultProps = {\n  chipIdField: \"\",\n  chipKeyField: \"id\",\n  chipLabelField: \"label\",\n  chips: [],\n  disabled: false,\n  input: false,\n  labelRenderer: null,\n  leadingIcon: null,\n  leadingIconField: \"leadingIcon\",\n  preventChoiceDeselection: false,\n  scrollable: false,\n  selectedChips: [],\n  selectionType: \"default\",\n  trailingIcon: null,\n  trailingIconField: \"trailingIcon\",\n  variant: \"filled\",\n};\n\n/**\n *\n * This file is automatically generated by the Element\n * documentation system. Any modifications to this file\n * will be overwritten!\n *\n */\n\nexport const ChipPropTypes = {\n  /**\n   * Chip data to be rendered. If no `label` is passed in, `chipData` will be used. If using an object, use the `chipLabelField` to set property to be rendered as the label. You may also set `leadingIconField` and `trailingIconField`, as well as labelRenderer for additional control.\n   *\n   * Defaults to **null**.\n   */\n  chipData: PropTypes.any.isRequired,\n  /**\n   * The property on the chip that represents the id. If one is not provided material will generate an automatic ID.\n   *\n   * Defaults to **empty string**.\n   */\n  chipIdField: PropTypes.string,\n  /**\n   * The property on the chip that is the label. The default slot overrides the rendering of the label.\n   *\n   * Defaults to **empty string**.\n   */\n  chipLabelField: PropTypes.string.isRequired,\n  /**\n   * Prevent the user from interacting with the chip.\n   *\n   * Defaults to **false**.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Custom id.\n   *\n   * Defaults to **undefined**.\n   */\n  id: PropTypes.string,\n  /**\n   * If the chip is selected on mount.\n   *\n   * Defaults to **null**.\n   */\n  initiallySelected: PropTypes.bool.isRequired,\n  /**\n   * Allows chip to be dynamically added and removed upon trailing icon interaction.\n   *\n   * Defaults to **null**.\n   */\n  input: PropTypes.bool.isRequired,\n  /**\n   * The label to be rendered on each chip. Optionally `chipData` and `chipLabelField` may be used instead of `label`.\n   *\n   * Defaults to **null**.\n   */\n  label: PropTypes.node,\n  /**\n   * Returns the label to be rendered on each chip. Receives the chipData.\n   *\n   * Defaults to **null**.\n   */\n  labelRenderer: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  /**\n   * Slot for leading icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no leading icon, a material icon rendering the `leadingIconPropName` of each chip is used.\n   *\n   * Defaults to **null**.\n   */\n  leadingIcon: PropTypes.func,\n  /**\n   * Leading icon property name for the chip. The leading icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.\n   *\n   * Defaults to **empty string**.\n   */\n  leadingIconField: PropTypes.string.isRequired,\n  /**\n   * Called when chip is clicked.\n   *\n   * Defaults to **null**.\n   */\n  onClick: PropTypes.func,\n  /**\n   * Fired when the chip is destroyed.\n   *\n   * Defaults to **null**.\n   */\n  onDestroy: PropTypes.func,\n  /**\n   * Called when Enter is pressed.\n   *\n   * Defaults to **null**.\n   */\n  onEnter: PropTypes.func,\n  /**\n   * Fired when the chip is mounted.\n   *\n   * Defaults to **null**.\n   */\n  onMounted: PropTypes.func,\n  /**\n   * The type`filter` enables selection of multiple chips and will add a check mark to selected chips. The type`choice` allows only one selected chip.\n   *\n   * Defaults to **'default'**.\n   */\n  selectionType: PropTypes.oneOf([\"default\", \"choice\", \"filter\"]),\n  /**\n   * Slot for trailing icon. `chip` and `iconProps` is passed into the slots params. `iconProps` contains all the props for the icon component. If there is no trailing icon, a material icon rendering the `trailingIconPropName` of each chip is used.\n   *\n   * Defaults to **null**.\n   */\n  trailingIcon: PropTypes.func,\n  /**\n   * Trailing icon property name for the chip. The trailing icon property can either be a string corresponding to an icon, or an object containing all the properties for the icon component.\n   *\n   * Defaults to **empty string**.\n   */\n  trailingIconField: PropTypes.string.isRequired,\n  /**\n   * Applies the selected style.\n   *\n   * Defaults to **'filled'**.\n   */\n  variant: PropTypes.oneOf([\"filled\", \"outlined\"]).isRequired,\n};\n\nexport const ChipDefaultProps = {\n  chipData: null,\n  chipIdField: \"\",\n  chipLabelField: \"\",\n  disabled: false,\n  id: undefined,\n  initiallySelected: null,\n  input: null,\n  label: null,\n  labelRenderer: null,\n  leadingIcon: null,\n  leadingIconField: \"\",\n  selectionType: \"default\",\n  trailingIcon: null,\n  trailingIconField: \"\",\n  variant: \"filled\",\n};\n","import React, {\n    useEffect,\n    useRef,\n    useState,\n    forwardRef,\n    useImperativeHandle\n} from 'react';\nimport { Icon } from '@element/react-icon';\nimport clsx from 'clsx';\nimport { edsRandomId, edsWarning } from '@element/shared';\nimport isObjectLike from 'lodash/isObjectLike';\nimport { ChipPropTypes, ChipDefaultProps } from './generated/propTypes';\n\nconst getChipProp = (props, prop) => {\n    const iconProps = props?.chipData?.[prop];\n    if (iconProps) {\n        if (typeof iconProps === 'string') {\n            return {\n                icon: iconProps\n            };\n        }\n        if (typeof iconProps === 'object') {\n            return iconProps;\n        }\n        edsWarning(`${prop} chip field must be of type string or object`);\n    }\n\n    return {};\n};\n\nconst leadingIconSlotProps = props => {\n    const iconProps = getChipProp(props, props.leadingIconField);\n    const hiddenClass = props.initiallySelected\n        ? 'mdc-chip__icon--leading-hidden'\n        : '';\n    return {\n        chip: props.chipData,\n        iconProps: {\n            ...iconProps,\n            className: `mdc-chip__icon mdc-chip__icon--leading ${hiddenClass}`,\n            tabIndex: '-1'\n        }\n    };\n};\nconst trailingIconSlotProps = props => {\n    const { icon, ...otherIconProps } = getChipProp(\n        props,\n        props.trailingIconField\n    );\n    return {\n        chip: props.chipData,\n        iconProps: {\n            ...otherIconProps,\n            icon: icon || 'cancel',\n            className:\n                'mdc-chip__icon mdc-chip__icon--trailing mdc-chip-trailing-action',\n            role: 'button',\n            tabIndex: '0'\n        }\n    };\n};\n\nconst checkmark = (\n    <span className='mdc-chip__checkmark'>\n        <svg className='mdc-chip__checkmark-svg' viewBox='-2 -3 30 30'>\n            <path\n                className='mdc-chip__checkmark-path'\n                fill='none'\n                stroke='black'\n                d='M1.73,12.91 8.1,19.28 22.79,4.59'\n            />\n        </svg>\n    </span>\n);\n\nconst Chip = forwardRef((props, externalRef) => {\n    const {\n        chipData,\n        chipIdField,\n        chipLabelField,\n        disabled,\n        id,\n        initiallySelected,\n        input,\n        label,\n        labelRenderer,\n        leadingIcon,\n        leadingIconField,\n        onDestroy,\n        onMounted,\n        selectionType,\n        trailingIcon,\n        trailingIconField,\n        variant,\n        onClick,\n        onEnter,\n        ...customProps\n    } = props;\n\n    const [idActual] = useState(\n        () =>\n            id ||\n            (chipIdField && chipData?.[chipIdField]?.toString()) ||\n            edsRandomId()\n    );\n    const chipRef = useRef();\n    const state = useRef({});\n\n    useImperativeHandle(externalRef, () => chipRef.current, []);\n\n    useEffect(() => {\n        state.current.onMounted = onMounted;\n    }, [onMounted]);\n\n    useEffect(() => {\n        state.current.onDestroy = onDestroy;\n    }, [onDestroy]);\n\n    useEffect(() => {\n        state.current.chipData = chipData;\n    }, [chipData]);\n\n    useEffect(() => {\n        const currentState = state?.current;\n        currentState?.onMounted?.(currentState.chipData, chipRef.current);\n        return () => {\n            currentState?.onDestroy?.(currentState.chipData);\n        };\n    }, []);\n\n    let trailingIconElement;\n    let leadingIconElement;\n\n    const leadingIconProps = leadingIconSlotProps(props);\n\n    if (leadingIcon) {\n        leadingIconElement = leadingIcon(leadingIconProps);\n    } else if (leadingIconProps.iconProps.icon) {\n        leadingIconElement = <Icon {...leadingIconProps.iconProps} />;\n    }\n\n    if (input) {\n        const slotProps = trailingIconSlotProps(props);\n        if (trailingIcon) {\n            trailingIconElement = trailingIcon(slotProps);\n        } else {\n            trailingIconElement = <Icon {...slotProps.iconProps} />;\n        }\n    }\n\n    const [labelActual, setLabelActual] = useState();\n\n    useEffect(() => {\n        if (label) {\n            setLabelActual(label);\n            return;\n        }\n        if (labelRenderer) {\n            setLabelActual(\n                labelRenderer({\n                    chip: chipData\n                })\n            );\n            return;\n        }\n        if (isObjectLike(chipData)) {\n            setLabelActual(chipData[chipLabelField]);\n            return;\n        }\n        setLabelActual(chipData);\n    }, [chipData, chipLabelField, label, labelRenderer]);\n\n    const chipClasses = clsx(\n        'lmnt',\n        'mdc-chip',\n        'mdc-chip--touch',\n        initiallySelected && 'mdc-chip--selected',\n        variant === 'outlined' && 'mdc-chip--outline',\n        disabled && 'lmnt-chip--disabled'\n    );\n\n    const handleClick = e => {\n        if (!disabled) onClick?.(e);\n    };\n\n    const handleKeyPress = e => {\n        if (e.key === 'Enter') {\n            onEnter?.(e);\n        }\n    };\n\n    return (\n        <div\n            ref={chipRef}\n            className={chipClasses}\n            id={idActual}\n            role='row'\n            onClick={handleClick}\n            tabIndex={0}\n            onKeyUp={handleKeyPress}\n            {...customProps}\n        >\n            <div className='lmnt mdc-chip__ripple' />\n            {leadingIconElement}\n            {selectionType === 'filter' && checkmark}\n            <span role='gridcell'>\n                <span\n                    // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n                    role='checkbox'\n                    tabIndex='0'\n                    className='mdc-chip__primary-action'\n                >\n                    <span className='mdc-chip__text'>{labelActual}</span>\n                </span>\n            </span>\n            {trailingIconElement}\n        </div>\n    );\n});\n\nChip.displayName = 'Chip';\nChip.propTypes = ChipPropTypes;\nChip.defaultProps = ChipDefaultProps;\n\nexport default React.memo(Chip);\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-underscore-dangle */\nimport React, {\n    useState,\n    useCallback,\n    useMemo,\n    useEffect,\n    useRef\n} from 'react';\nimport clsx from 'clsx';\nimport { useIsomorphicLayoutEffect } from '@element/react-common';\nimport { deprecated } from '@material/chips';\nimport { useEvent, useMap } from 'react-use';\nimport Chip from './Chip';\nimport { ChipsPropTypes, ChipsDefaultProps } from './generated/propTypes';\n\nconst { MDCChipSet } = { ...deprecated };\n\nconst createMdcChipSet = element => {\n    const chipset = MDCChipSet.attachTo(element);\n    chipset.foundation.adapter.removeChipAtIndex = index => {\n        // Override removeChipAtIndex so that it doesn't remove the HTML. let react handle that\n        if (index >= 0 && index < chipset.chips_.length) {\n            chipset.chips_[index].destroy();\n            chipset.chips_.splice(index, 1);\n        }\n    };\n\n    return chipset;\n};\n\nconst Chips = ({\n    children,\n    chipIdField,\n    chipKeyField,\n    chipLabelField,\n    chips,\n    input,\n    labelRenderer,\n    leadingIcon,\n    leadingIconField,\n    onInteraction,\n    onRemoval,\n    onUpdateChips,\n    onUpdateSelectedChips,\n    preventChoiceDeselection,\n    scrollable,\n    selectedChips,\n    selectionType,\n    trailingIcon,\n    trailingIconField,\n    variant,\n    disabled,\n    ...customProps\n}) => {\n    const destroyed = useRef(false);\n    const [chipKeysToId, { remove: removeChipId, set: addChipId }] = useMap();\n    const [chipsetRef, setChipsetRef] = useState(null); // Initialize to null so that useEvent doesn't initially listen to the global window\n    const [mdcChipSet, setMdcChipSet] = useState(null);\n\n    const getKey = useCallback(\n        chip => chip[chipKeyField] || chip,\n        [chipKeyField]\n    );\n\n    const [initiallySelectedChips] = useState(\n        () => new Set(selectedChips.map(chip => getKey(chip)))\n    );\n\n    const selectedChipSet = useMemo(\n        () => new Set(selectedChips.map(chip => getKey(chip))),\n        [getKey, selectedChips]\n    );\n\n    useIsomorphicLayoutEffect(() => {\n        destroyed.current = false;\n        const chipset = chipsetRef ? createMdcChipSet(chipsetRef) : null;\n        setMdcChipSet(chipset);\n\n        return () => {\n            if (chipset) {\n                destroyed.current = true;\n                chipset.destroy();\n            }\n        };\n    }, [chipsetRef]);\n\n    const getId = useCallback(\n        chip => chipKeysToId[getKey(chip)],\n        [chipKeysToId, getKey]\n    );\n\n    const getChip = useCallback(\n        id => chips.find(chip => getId(chip) === id),\n        [chips, getId]\n    );\n\n    const getMdcChip = useCallback(\n        id => mdcChipSet?.chips.find(chip => chip.id === id),\n        [mdcChipSet]\n    );\n\n    const isSelected = useCallback(\n        chip => selectedChipSet.has(getKey(chip)),\n        [getKey, selectedChipSet]\n    );\n\n    const isInitiallySelected = useCallback(\n        chip => !!initiallySelectedChips.has(getKey(chip)),\n        [getKey, initiallySelectedChips]\n    );\n\n    const onMounted = useCallback(\n        (chip, chipElement) => {\n            addChipId(getKey(chip), chipElement.id);\n            mdcChipSet?.addChip(chipElement);\n        },\n        [addChipId, getKey, mdcChipSet]\n    );\n\n    const emitSelectedChips = useCallback(() => {\n        if (onUpdateSelectedChips) {\n            const selectedIdsSet = new Set(mdcChipSet?.selectedChipIds);\n            onUpdateSelectedChips(\n                chips.filter(item => selectedIdsSet.has(getId(item)))\n            );\n        }\n    }, [mdcChipSet, onUpdateSelectedChips, chips, getId]);\n\n    const onSelectCallback = useCallback(() => {\n        if (selectionType !== 'choice') {\n            // ignore choice chips since multiple events get fired\n            emitSelectedChips();\n        }\n    }, [selectionType, emitSelectedChips]);\n\n    const onChipRemoval = useCallback(\n        chip => {\n            if (!input) {\n                return;\n            }\n\n            const availableChips = new Set(\n                mdcChipSet?.chips.map(item => item.id)\n            );\n\n            const filteredChips = chips.filter(item =>\n                availableChips.has(getId(item))\n            );\n\n            if (onUpdateChips) {\n                onUpdateChips(filteredChips);\n            }\n\n            if (onRemoval) {\n                onRemoval(chip);\n            }\n        },\n        [chips, getId, input, mdcChipSet, onRemoval, onUpdateChips]\n    );\n\n    const onChipRemovalCallback = useCallback(\n        event => {\n            onChipRemoval(getChip(event.detail.chipId));\n        },\n        [getChip, onChipRemoval]\n    );\n\n    const onInteractionCallback = useCallback(\n        event => {\n            if (onInteraction) {\n                const chip = getChip(event.detail.chipId);\n                onInteraction(chip);\n            }\n\n            if (selectionType === 'choice') {\n                if (preventChoiceDeselection) {\n                    const mdcChip = getMdcChip(event.detail.chipId);\n                    if (!mdcChip.selected) {\n                        mdcChip.selected = true;\n                        return;\n                    }\n                }\n                emitSelectedChips();\n            }\n        },\n        [\n            emitSelectedChips,\n            getChip,\n            getMdcChip,\n            onInteraction,\n            preventChoiceDeselection,\n            selectionType\n        ]\n    );\n\n    const onDestroy = useCallback(\n        chip => {\n            if (destroyed.current) {\n                return;\n            }\n\n            const id = getId(chip);\n            const key = getKey(chip);\n\n            removeChipId(key);\n\n            if (getMdcChip(id)) {\n                mdcChipSet.foundation.handleChipRemoval({\n                    chipId: id\n                });\n\n                onSelectCallback();\n                onChipRemoval(chip);\n            }\n        },\n        [\n            getId,\n            getKey,\n            getMdcChip,\n            mdcChipSet,\n            onChipRemoval,\n            onSelectCallback,\n            removeChipId\n        ]\n    );\n\n    useEffect(() => {\n        const mdcChipMap = new Map(\n            mdcChipSet?.chips.map(chip => [chip.id, chip])\n        );\n        for (const chip of chips) {\n            const selected = isSelected(chip);\n            const mdcChip = mdcChipMap.get(getId(chip));\n            if (mdcChip && selected !== mdcChip.selected) {\n                mdcChip.selected = selected;\n            }\n        }\n    }, [chips, getId, isSelected, mdcChipSet]);\n\n    useEvent('MDCChip:removal', onChipRemovalCallback, chipsetRef);\n    useEvent('MDCChip:selection', onSelectCallback, chipsetRef);\n    useEvent('MDCChip:interaction', onInteractionCallback, chipsetRef);\n\n    const chipElements = useMemo(\n        () =>\n            chips.map(chip => (\n                <Chip\n                    key={getKey(chip)}\n                    chipData={chip}\n                    chipIdField={chipIdField}\n                    // chipKeyField={chipKeyField}\n                    chipLabelField={chipLabelField}\n                    initiallySelected={isInitiallySelected(chip)}\n                    input={input}\n                    labelRenderer={labelRenderer}\n                    leadingIcon={leadingIcon}\n                    leadingIconField={leadingIconField}\n                    onDestroy={onDestroy}\n                    onMounted={onMounted}\n                    selectionType={selectionType}\n                    trailingIcon={trailingIcon}\n                    trailingIconField={trailingIconField}\n                    variant={variant}\n                    disabled={disabled || chip.disabled}\n                />\n            )),\n        [\n            chipIdField,\n            chipLabelField,\n            chips,\n            disabled,\n            getKey,\n            input,\n            isInitiallySelected,\n            labelRenderer,\n            leadingIcon,\n            leadingIconField,\n            onDestroy,\n            onMounted,\n            selectionType,\n            trailingIcon,\n            trailingIconField,\n            variant\n        ]\n    );\n\n    return (\n        <div\n            className={clsx(\n                'lmnt',\n                scrollable && 'mdc-chip-set-scrollable-wrapper'\n            )}\n            {...customProps}\n        >\n            <div\n                ref={setChipsetRef}\n                className={clsx(\n                    'lmnt',\n                    'mdc-chip-set',\n                    selectionType === 'choice' && 'mdc-chip-set--choice',\n                    selectionType === 'filter' && 'mdc-chip-set--filter',\n                    input && 'mdc-chip-set--input',\n                    scrollable && 'mdc-chip-set--input-scroll',\n                    disabled && 'lmnt-chips--disabled'\n                )}\n            >\n                {chipElements}\n            </div>\n        </div>\n    );\n};\n\nChips.displayName = 'Chips';\nChips.propTypes = ChipsPropTypes;\nChips.defaultProps = ChipsDefaultProps;\n\nexport default React.memo(Chips);\n"],"names":["ChipsPropTypes","chipIdField","PropTypes","string","chipKeyField","chipLabelField","chips","array","isRequired","disabled","bool","input","labelRenderer","oneOfType","node","func","leadingIcon","leadingIconField","onInteraction","onRemoval","onUpdateChips","onUpdateSelectedChips","preventChoiceDeselection","scrollable","selectedChips","selectionType","oneOf","trailingIcon","trailingIconField","variant","ChipsDefaultProps","ChipPropTypes","chipData","any","id","initiallySelected","label","onClick","onDestroy","onEnter","onMounted","ChipDefaultProps","undefined","getChipProp","props","prop","_props$chipData","iconProps","icon","edsWarning","leadingIconSlotProps","hiddenClass","chip","className","tabIndex","trailingIconSlotProps","otherIconProps","role","checkmark","React","createElement","viewBox","fill","stroke","d","Chip","forwardRef","externalRef","customProps","idActual","useState","_chipData$chipIdField","toString","edsRandomId","chipRef","useRef","state","useImperativeHandle","current","useEffect","_currentState$onMount","currentState","call","_currentState$onDestr","trailingIconElement","leadingIconElement","leadingIconProps","Icon","slotProps","labelActual","setLabelActual","isObjectLike","chipClasses","clsx","handleClick","e","handleKeyPress","key","_extends","ref","onKeyUp","displayName","propTypes","defaultProps","memo","MDCChipSet","deprecated","createMdcChipSet","element","chipset","attachTo","foundation","adapter","removeChipAtIndex","index","chips_","length","destroy","splice","Chips","_ref","children","destroyed","chipKeysToId","remove","removeChipId","set","addChipId","useMap","chipsetRef","setChipsetRef","mdcChipSet","setMdcChipSet","getKey","useCallback","initiallySelectedChips","Set","map","selectedChipSet","useMemo","useIsomorphicLayoutEffect","getId","getChip","find","getMdcChip","isSelected","has","isInitiallySelected","chipElement","addChip","emitSelectedChips","selectedIdsSet","selectedChipIds","filter","item","onSelectCallback","onChipRemoval","availableChips","filteredChips","onChipRemovalCallback","event","detail","chipId","onInteractionCallback","mdcChip","selected","handleChipRemoval","mdcChipMap","Map","get","useEvent","chipElements"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,MAAMA,cAAc,GAAG;AAC5B;AACF;AACA;AACA;AACA;EACEC,WAAW,EAAEC,6BAAS,CAACC,MAAM;AAC7B;AACF;AACA;AACA;AACA;EACEC,YAAY,EAAEF,6BAAS,CAACC,MAAM;AAC9B;AACF;AACA;AACA;AACA;EACEE,cAAc,EAAEH,6BAAS,CAACC,MAAM;AAChC;AACF;AACA;AACA;AACA;AACEG,EAAAA,KAAK,EAAEJ,6BAAS,CAACK,KAAK,CAACC,UAAU;AACjC;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAEP,6BAAS,CAACQ,IAAI;AACxB;AACF;AACA;AACA;AACA;EACEC,KAAK,EAAET,6BAAS,CAACQ,IAAI;AACrB;AACF;AACA;AACA;AACA;AACEE,EAAAA,aAAa,EAAEV,6BAAS,CAACW,SAAS,CAAC,CAACX,6BAAS,CAACY,IAAI,EAAEZ,6BAAS,CAACa,IAAI,CAAC,CAAC;AACpE;AACF;AACA;AACA;AACA;EACEC,WAAW,EAAEd,6BAAS,CAACa,IAAI;AAC3B;AACF;AACA;AACA;AACA;EACEE,gBAAgB,EAAEf,6BAAS,CAACC,MAAM;AAClC;AACF;AACA;AACA;AACA;EACEe,aAAa,EAAEhB,6BAAS,CAACa,IAAI;AAC7B;AACF;AACA;AACA;AACA;EACEI,SAAS,EAAEjB,6BAAS,CAACa,IAAI;AACzB;AACF;AACA;AACA;AACA;EACEK,aAAa,EAAElB,6BAAS,CAACa,IAAI;AAC7B;AACF;AACA;AACA;AACA;EACEM,qBAAqB,EAAEnB,6BAAS,CAACa,IAAI;AACrC;AACF;AACA;AACA;AACA;EACEO,wBAAwB,EAAEpB,6BAAS,CAACQ,IAAI;AACxC;AACF;AACA;AACA;AACA;EACEa,UAAU,EAAErB,6BAAS,CAACQ,IAAI;AAC1B;AACF;AACA;AACA;AACA;EACEc,aAAa,EAAEtB,6BAAS,CAACK,KAAK;AAC9B;AACF;AACA;AACA;AACA;AACEkB,EAAAA,aAAa,EAAEvB,6BAAS,CAACwB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"}