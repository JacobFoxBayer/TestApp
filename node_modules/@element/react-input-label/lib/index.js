'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var clsx = require('clsx');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const InputLabelPropTypes = {
  /**
   * Content to be rendered inside the FormField. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node.isRequired,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Applies disabled styling.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Visibly disable the label, though it will still be available to screen readers.
   *
   * Defaults to **false**.
   */
  hideLabel: PropTypes__default["default"].bool
};
const InputLabelDefaultProps = {
  children: null,
  className: undefined,
  disabled: false,
  hideLabel: false
};

const InputLabel = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    className,
    disabled,
    hideLabel,
    targetId,
    ...customProps
  } = props;
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  return /*#__PURE__*/React__default["default"].createElement("label", _extends__default["default"]({
    ref: ref,
    className: clsx__default["default"]('lmnt-input-label', hideLabel && 'sr-only', disabled && 'lmnt-theme-on-surface-disabled', className),
    htmlFor: targetId,
    "aria-labelledby": targetId
  }, customProps), children);
});
InputLabel.displayName = 'InputLabel';
InputLabel.propTypes = InputLabelPropTypes;
InputLabel.defaultProps = InputLabelDefaultProps;

exports.InputLabel = InputLabel;
//# sourceMappingURL=index.js.map
