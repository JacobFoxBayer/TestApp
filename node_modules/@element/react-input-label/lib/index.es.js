import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import clsx from 'clsx';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const InputLabelPropTypes = {
  /**
   * Content to be rendered inside the FormField. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node.isRequired,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Applies disabled styling.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool,
  /**
   * Visibly disable the label, though it will still be available to screen readers.
   *
   * Defaults to **false**.
   */
  hideLabel: PropTypes.bool
};
const InputLabelDefaultProps = {
  children: null,
  className: undefined,
  disabled: false,
  hideLabel: false
};

const InputLabel = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    disabled,
    hideLabel,
    targetId,
    ...customProps
  } = props;
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  return /*#__PURE__*/React.createElement("label", _extends({
    ref: ref,
    className: clsx('lmnt-input-label', hideLabel && 'sr-only', disabled && 'lmnt-theme-on-surface-disabled', className),
    htmlFor: targetId,
    "aria-labelledby": targetId
  }, customProps), children);
});
InputLabel.displayName = 'InputLabel';
InputLabel.propTypes = InputLabelPropTypes;
InputLabel.defaultProps = InputLabelDefaultProps;

export { InputLabel };
//# sourceMappingURL=index.es.js.map
