import React from 'react';


export interface DialogProps {
    /**
    * Button for the approving action of the dialog. When pressed, the dialog will close.
    *
    * Defaults to **null**.
    */
    acceptButton?: React.ReactNode;
    /**
    * slot/element for adding action buttons
    *
    * Defaults to **null**.
    */
    actions?: React.ReactNode;
    /**
    * Button for the cancel/close action of the dialog. When pressed, the dialog will close.
    *
    * Defaults to **null**.
    */
    cancelButton?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Primary content of the dialog. Optional, children may be used instead.
    *
    * Defaults to **null**.
    */
    content?: React.ReactNode;
    /**
    * Custom id for the content container. If one is not specified a random id will be generated.
    *
    * Defaults to **empty string**.
    */
    contentId?: string;
    /**
    * Title information displayed at the top of the dialog.
    *
    * Defaults to **null**.
    */
    header?: React.ReactNode;
    /**
    * Custom id for the header container. If one is not specified a random id will be generated.
    *
    * Defaults to **empty string**.
    */
    headerId?: string;
    /**
    * If true, the dialog will be visible on screen.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Prevents the user from closing the dialog by hitting escape or clicking the scrim.
    *
    * Defaults to **false**.
    */
    preventClose?: boolean;
    /**
    * DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing.
    *
    * Defaults to **null**.
    */
    returnFocusSelector?: string;
    /**
    * If true, the cancel button will be rendered beneath the accept button instead of side-by-side. Stacking of buttons happens automatically in cases where the button text is too long for all buttons to fit on a single line. Setting this prop to true is only required if you want to override this behavior.
    *
    * Defaults to **false**.
    */
    stackedButtons?: boolean;
    /**
    * Fired only when the closing action was triggered via dialog interaction.
    */
    onAction?: Function;
    /**
    * Fired when the Dialog finishes its closing animation. Where `action` is the action which closed the dialog.
    */
    onClosed?: Function;
    /**
    * Fired when the dialog begins its closing animation. action represents the action which closed the dialog.
    */
    onClosing?: Function;
    /**
    * Fired when the dialog finishes its opening animation.
    */
    onOpened?: Function;
    /**
    * Fired when the dialog begins its opening animation.
    */
    onOpening?: Function;
}

/**
* Dialogs inform users about a task and can contain critical information, require decisions, or involve multiple tasks. A dialog is a type of modal window that appears in front of app content to provide critical information or ask for a decision. Dialogs disable all app functionality when they appear, and remain on screen until confirmed, dismissed, or a required action has been taken.
 * @prop {React.ReactNode} acceptButton - Button for the approving action of the dialog. When pressed, the dialog will close. Defaults to _null_.
 * @prop {React.ReactNode} actions - slot/element for adding action buttons Defaults to _null_.
 * @prop {React.ReactNode} cancelButton - Button for the cancel/close action of the dialog. When pressed, the dialog will close. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {React.ReactNode} content - Primary content of the dialog. Optional, children may be used instead. Defaults to _null_.
 * @prop {string} contentId - Custom id for the content container. If one is not specified a random id will be generated. Defaults to _empty string_.
 * @prop {React.ReactNode} header - Title information displayed at the top of the dialog. Defaults to _null_.
 * @prop {string} headerId - Custom id for the header container. If one is not specified a random id will be generated. Defaults to _empty string_.
 * @prop {boolean} open - If true, the dialog will be visible on screen. Defaults to _false_.
 * @prop {boolean} preventClose - Prevents the user from closing the dialog by hitting escape or clicking the scrim. Defaults to _false_.
 * @prop {string} returnFocusSelector - DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing. Defaults to _null_.
 * @prop {boolean} stackedButtons - If true, the cancel button will be rendered beneath the accept button instead of side-by-side. Stacking of buttons happens automatically in cases where the button text is too long for all buttons to fit on a single line. Setting this prop to true is only required if you want to override this behavior. Defaults to _false_.
 *  @event onAction - Fired only when the closing action was triggered via dialog interaction.
 *  @event onClosed - Fired when the Dialog finishes its closing animation. Where `action` is the action which closed the dialog.
 *  @event onClosing - Fired when the dialog begins its closing animation. action represents the action which closed the dialog.
 *  @event onOpened - Fired when the dialog finishes its opening animation.
 *  @event onOpening - Fired when the dialog begins its opening animation.
*/
export const Dialog: React.FunctionComponent<DialogProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface DialogActionProps {
    /**
    * Dialog action
    *
    * Defaults to **empty string**.
    */
    action?: string;
    /**
    * children
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Focus element on dialog upon open
    *
    * Defaults to **null**.
    */
    focused?: boolean;
    /**
    * Base component that will be rendered
    *
    * Defaults to **'div'**.
    */
    tag: string | React.ElementType | React.Component;
}

/**
* A container for a button or similar component. The Dialog will automatically close on interaction if an action is defined.
 * @prop {string} action - Dialog action Defaults to _empty string_.
 * @prop {React.ReactNode} children - children Defaults to _null_.
 * @prop {boolean} focused - Focus element on dialog upon open Defaults to _null_.
 * @prop {string|React.ElementType|React.Component} tag - Base component that will be rendered Defaults to _'div'_.
*/
export const DialogAction: React.FunctionComponent<DialogActionProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


interface DialogButtonReference { current: object; }

export interface DialogButtonProps {
    /**
    * @deprecated _Use `themeColor='secondary'` instead._
    *
    * Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme).
    *
    * Defaults to **undefined**.
    */
    altColor?: boolean;
    /**
    * One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme.
    *
    * Defaults to **'themeDefault'**.
    */
    buttonSize?: string;
    /**
    * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _forwardRef has been implemented for Button._
    *
    * Reference to the DOM button. This enables a greater level of integration.
    *
    * Defaults to **undefined**.
    */
    customRef?: Function|DialogButtonReference;
    /**
    * @deprecated _Use `variant='danger'` instead._
    *
    * Apply danger style to the button.
    *
    * Defaults to **undefined**.
    */
    danger?: boolean;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Sets elevation of the button. Default will be the theme default.
    *
    * Defaults to **'default'**.
    */
    elevation?: string;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply a filled-in style. Previously called `primary`.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Applies a full-width style where the textfield will fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The button will render as an anchor tag. If the tag prop is set, that prop will take precedence.
    *
    * Defaults to **null**.
    */
    href?: string;
    /**
    * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
    *
    * Defaults to **undefined**.
    */
    leadingIcon?: string | Function | React.ReactNode;
    /**
    * @deprecated _Use `variant='outlined'`._
    *
    * Apply outlined style to the button. Previously called `secondary`.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply primary style to the Button.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * @deprecated _Use `'variant=outlined'` instead._
    *
    * Apply secondary style to the Button.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
    *
    * Defaults to **null**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * @deprecated _Use `variant='embedded'` instead._
    *
    * Apply tertiary style to the Button.
    *
    * Defaults to **undefined**.
    */
    tertiary?: boolean;
    /**
    * @deprecated _Use `variant='text'` instead._
    *
    * Apply unfilled, un-outlined style to the Button. Previously called `tertiary`.
    *
    * Defaults to **undefined**.
    */
    text?: boolean;
    /**
    * Sets the theme color for the button. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
    *
    * Defaults to **undefined**.
    */
    trailingIcon?: string | Function | React.ReactNode;
    /**
    * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
    *
    * Defaults to **'button'**.
    */
    type?: string;
    /**
    * @deprecated _Use `elevation='flat' instead._
    *
    * Remove elevation.
    *
    * Defaults to **undefined**.
    */
    unelevated?: boolean;
    /**
    * Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * The primary interaction event for button.
    */
    onClick?: Function;
}

/**
* Button to be used as an action within a dialog. The Dialog will automatically close on interaction if an action is defined. All props from the Button and DialogAction components are accepted on this component
 * @prop {boolean} altColor - Deprecated: Use `themeColor='secondary'` instead. Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme). Defaults to _undefined_.
 * @prop {string} buttonSize - One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme. Defaults to _'themeDefault'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._ Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} customRef - Deprecated: forwardRef has been implemented for Button. Reference to the DOM button. This enables a greater level of integration. Defaults to _undefined_.
 * @prop {boolean} danger - Deprecated: Use `variant='danger'` instead. Apply danger style to the button. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {string} elevation - Sets elevation of the button. Default will be the theme default. Defaults to _'default'_.
 * @prop {boolean} filled - Deprecated: Use `variant='filled'` instead. Apply a filled-in style. Previously called `primary`. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Applies a full-width style where the textfield will fill it's container. Defaults to _false_.
 * @prop {string} href - The button will render as an anchor tag. If the tag prop is set, that prop will take precedence. Defaults to _null_.
 * @prop {string} label - The displayed text. Expects a valid string. If label and children are both set, label will take priority. Defaults to _null_.
 * @prop {string|function|React.ReactNode} leadingIcon - Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control, Defaults to _undefined_.
 * @prop {boolean} outlined - Deprecated: Use `variant='outlined'`. Apply outlined style to the button. Previously called `secondary`. Defaults to _undefined_.
 * @prop {boolean} primary - Deprecated: Use `variant='filled'` instead. Apply primary style to the Button. Defaults to _undefined_.
 * @prop {boolean} secondary - Deprecated: Use `'variant=outlined'` instead. Apply secondary style to the Button. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested. Defaults to _null_.
 * @prop {boolean} tertiary - Deprecated: Use `variant='embedded'` instead. Apply tertiary style to the Button. Defaults to _undefined_.
 * @prop {boolean} text - Deprecated: Use `variant='text'` instead. Apply unfilled, un-outlined style to the Button. Previously called `tertiary`. Defaults to _undefined_.
 * @prop {string} themeColor - Sets the theme color for the button. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|function|React.ReactNode} trailingIcon - Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control. Defaults to _undefined_.
 * @prop {string} type - This applies the html button type (button, submit, reset) or the anchor media type when used with the href property. Defaults to _'button'_.
 * @prop {boolean} unelevated - Deprecated: Use `elevation='flat' instead. Remove elevation. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes. Defaults to _'filled'_.
 *  @event onClick - The primary interaction event for button.
*/
export const DialogButton: React.FunctionComponent<DialogButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
