'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var dialog = require('@material/dialog');
var clsx = require('clsx');
var reactCommon = require('@element/react-common');
var capitalize = require('lodash/capitalize');
var omitBy = require('lodash/omitBy');
var reactUse = require('react-use');
var PropTypes = require('prop-types');
var reactButton = require('@element/react-button');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var capitalize__default = /*#__PURE__*/_interopDefault(capitalize);
var omitBy__default = /*#__PURE__*/_interopDefault(omitBy);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DialogPropTypes = {
  /**
   * Button for the approving action of the dialog. When pressed, the dialog will close.
   *
   * Defaults to **null**.
   */
  acceptButton: PropTypes__default["default"].node,
  /**
   * slot/element for adding action buttons
   *
   * Defaults to **null**.
   */
  actions: PropTypes__default["default"].node,
  /**
   * Button for the cancel/close action of the dialog. When pressed, the dialog will close.
   *
   * Defaults to **null**.
   */
  cancelButton: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Primary content of the dialog. Optional, children may be used instead.
   *
   * Defaults to **null**.
   */
  content: PropTypes__default["default"].node,
  /**
   * Custom id for the content container. If one is not specified a random id will be generated.
   *
   * Defaults to **empty string**.
   */
  contentId: PropTypes__default["default"].string,
  /**
   * Title information displayed at the top of the dialog.
   *
   * Defaults to **null**.
   */
  header: PropTypes__default["default"].node,
  /**
   * Custom id for the header container. If one is not specified a random id will be generated.
   *
   * Defaults to **empty string**.
   */
  headerId: PropTypes__default["default"].string,
  /**
   * Fired only when the closing action was triggered via dialog interaction.
   *
   * Defaults to **null**.
   */
  onAction: PropTypes__default["default"].func,
  /**
   * Fired when the Dialog finishes its closing animation. Where `action` is the action which closed the dialog.
   *
   * Defaults to **null**.
   */
  onClosed: PropTypes__default["default"].func,
  /**
   * Fired when the dialog begins its closing animation. action represents the action which closed the dialog.
   *
   * Defaults to **null**.
   */
  onClosing: PropTypes__default["default"].func,
  /**
   * Fired when the dialog finishes its opening animation.
   *
   * Defaults to **null**.
   */
  onOpened: PropTypes__default["default"].func,
  /**
   * Fired when the dialog begins its opening animation.
   *
   * Defaults to **null**.
   */
  onOpening: PropTypes__default["default"].func,
  /**
   * If true, the dialog will be visible on screen.
   *
   * Defaults to **false**.
   */
  open: PropTypes__default["default"].bool,
  /**
   * Prevents the user from closing the dialog by hitting escape or clicking the scrim.
   *
   * Defaults to **false**.
   */
  preventClose: PropTypes__default["default"].bool,
  /**
   * DOM selector to provide a target to return focus. Accepts any valid _query_ (see mdn docs for Element.querySelector). If omitted focus will return to the last focused element upon closing.
   *
   * Defaults to **null**.
   */
  returnFocusSelector: PropTypes__default["default"].string,
  /**
   * If true, the cancel button will be rendered beneath the accept button instead of side-by-side. Stacking of buttons happens automatically in cases where the button text is too long for all buttons to fit on a single line. Setting this prop to true is only required if you want to override this behavior.
   *
   * Defaults to **false**.
   */
  stackedButtons: PropTypes__default["default"].bool
};
const DialogDefaultProps = {
  acceptButton: null,
  actions: null,
  cancelButton: null,
  className: undefined,
  content: null,
  contentId: "",
  header: null,
  headerId: "",
  open: false,
  preventClose: false,
  returnFocusSelector: null,
  stackedButtons: false
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DialogActionPropTypes = {
  /**
   * Dialog action
   *
   * Defaults to **empty string**.
   */
  action: PropTypes__default["default"].string,
  /**
   * children
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * Focus element on dialog upon open
   *
   * Defaults to **null**.
   */
  focused: PropTypes__default["default"].bool,
  /**
   * Base component that will be rendered
   *
   * Defaults to **'div'**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]).isRequired
};
const DialogActionDefaultProps = {
  action: "",
  children: null,
  focused: null,
  tag: "div"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DialogButtonPropTypes = {
  /**
   * @deprecated _Use `themeColor='secondary'` instead._
   *
   * Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme).
   *
   * Defaults to **undefined**.
   */
  altColor: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `themeColor="secondary"` instead.'),
  /**
   * One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme.
   *
   * Defaults to **'themeDefault'**.
   */
  buttonSize: PropTypes__default["default"].oneOf(["xsmall", "small", "medium", "large", "xlarge", "themeDefault"]),
  /**
   * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * @deprecated _forwardRef has been implemented for Button._
   *
   * Reference to the DOM button. This enables a greater level of integration.
   *
   * Defaults to **undefined**.
   */
  customRef: reactCommon.deprecatedProp(PropTypes__default["default"].oneOfType([PropTypes__default["default"].func,
  // eslint-disable-next-line react/forbid-prop-types
  PropTypes__default["default"].shape({
    current: PropTypes__default["default"].any
  })]), "DialogButton", "forwardRef has been implemented for Button."),
  /**
   * @deprecated _Use `variant='danger'` instead._
   *
   * Apply danger style to the button.
   *
   * Defaults to **undefined**.
   */
  danger: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `variant="danger"` instead.'),
  /**
   * Prevent the user from interacting with the component.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * Sets elevation of the button. Default will be the theme default.
   *
   * Defaults to **'default'**.
   */
  elevation: PropTypes__default["default"].oneOf(["default", "elevated", "flat"]),
  /**
   * @deprecated _Use `variant='filled'` instead._
   *
   * Apply a filled-in style. Previously called `primary`.
   *
   * Defaults to **undefined**.
   */
  filled: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `variant="filled"` instead.'),
  /**
   * Applies a full-width style where the textfield will fill it's container.
   *
   * Defaults to **false**.
   */
  fullWidth: PropTypes__default["default"].bool,
  /**
   * The button will render as an anchor tag. If the tag prop is set, that prop will take precedence.
   *
   * Defaults to **null**.
   */
  href: PropTypes__default["default"].string,
  /**
   * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
   *
   * Defaults to **null**.
   */
  label: PropTypes__default["default"].string,
  /**
   * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
   *
   * Defaults to **undefined**.
   */
  leadingIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].func, PropTypes__default["default"].node]),
  /**
   * The primary interaction event for button.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes__default["default"].func,
  /**
   * @deprecated _Use `variant='outlined'`._
   *
   * Apply outlined style to the button. Previously called `secondary`.
   *
   * Defaults to **undefined**.
   */
  outlined: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `variant="outlined"`.'),
  /**
   * @deprecated _Use `variant='filled'` instead._
   *
   * Apply primary style to the Button.
   *
   * Defaults to **undefined**.
   */
  primary: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `variant="filled"` instead.'),
  /**
   * @deprecated _Use `'variant=outlined'` instead._
   *
   * Apply secondary style to the Button.
   *
   * Defaults to **undefined**.
   */
  secondary: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `"variant=outlined"` instead.'),
  /**
   * By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
   *
   * Defaults to **null**.
   */
  tag: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType, PropTypes__default["default"].instanceOf(React__default["default"].Component)]),
  /**
   * @deprecated _Use `variant='embedded'` instead._
   *
   * Apply tertiary style to the Button.
   *
   * Defaults to **undefined**.
   */
  tertiary: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `variant="embedded"` instead.'),
  /**
   * @deprecated _Use `variant='text'` instead._
   *
   * Apply unfilled, un-outlined style to the Button. Previously called `tertiary`.
   *
   * Defaults to **undefined**.
   */
  text: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `variant="text"` instead.'),
  /**
   * Sets the theme color for the button. Most commonly used when the control is placed on a darker surface.
   *
   * Defaults to **'primary'**.
   */
  themeColor: reactCommon.deprecatedOneOf(PropTypes__default["default"].oneOf(["primary", "secondary", "on-unknown-black", "on-unknown-white", "on-primary", "on-secondary", "on-success", "on-danger"]), ["onUnknownBlack", "onUnknownWhite"], "DialogButton", "Please use one of 'primary','secondary','on-unknown-black','on-unknown-white','on-primary','on-secondary','on-success','on-danger'."),
  /**
   * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
   *
   * Defaults to **undefined**.
   */
  trailingIcon: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].func, PropTypes__default["default"].node]),
  /**
   * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
   *
   * Defaults to **'button'**.
   */
  type: PropTypes__default["default"].oneOf(["button", "submit", "reset"]),
  /**
   * @deprecated _Use `elevation='flat' instead._
   *
   * Remove elevation.
   *
   * Defaults to **undefined**.
   */
  unelevated: reactCommon.deprecatedProp(PropTypes__default["default"].bool, "DialogButton", 'Use `elevation="flat" instead.'),
  /**
   * Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes.
   *
   * Defaults to **'filled'**.
   */
  variant: PropTypes__default["default"].oneOf(["filled", "outlined", "danger", "text", "rounded-small", "rounded-micro"])
};
const DialogButtonDefaultProps = {
  altColor: undefined,
  buttonSize: "themeDefault",
  children: null,
  className: undefined,
  customRef: undefined,
  danger: undefined,
  disabled: false,
  elevation: "default",
  filled: undefined,
  fullWidth: false,
  href: null,
  label: null,
  leadingIcon: undefined,
  outlined: undefined,
  primary: undefined,
  secondary: undefined,
  tag: null,
  tertiary: undefined,
  text: undefined,
  themeColor: "primary",
  trailingIcon: undefined,
  type: "button",
  unelevated: undefined,
  variant: "filled"
};

const Dialog = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    acceptButton,
    actions,
    cancelButton,
    children,
    className,
    content,
    contentId,
    header,
    headerId,
    onAction,
    onClosed,
    onClosing,
    onOpened,
    onOpening,
    open,
    preventClose,
    returnFocusSelector,
    scrollable,
    stackedButtons,
    ...customProps
  } = props;
  const filteredCustomProps = React.useMemo(() => omitBy__default["default"](customProps, (value, key) => key.startsWith('onAction')), [customProps]);
  const [dialogRef, setDialogRef] = React.useState();
  const [mdcDialog, setMdcDialog] = React.useState();
  const [computedHeaderId] = React.useState(() => headerId || reactCommon.edsRandomId());
  const [computedContentId] = React.useState(() => contentId || reactCommon.edsRandomId());
  const ref = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  const hasActions = cancelButton || acceptButton || actions;
  React.useEffect(() => {
    if (!dialogRef) {
      return;
    }
    const dialog$1 = dialog.MDCDialog.attachTo(dialogRef);
    setMdcDialog(dialog$1);
    return () => {
      dialog$1.destroy();
    };
  }, [dialogRef]);
  React.useEffect(() => {
    if (!mdcDialog) {
      return;
    }
    let action = 'close';
    if (preventClose) {
      action = '';
    }
    mdcDialog.scrimClickAction = action;
    mdcDialog.escapeKeyAction = action;
  }, [mdcDialog, preventClose]);
  const onClosedCallback = React.useCallback(event => {
    if (returnFocusSelector) {
      reactCommon.returnFocusAfterClosing(returnFocusSelector);
    }
    if (onClosed) {
      onClosed(event);
    }
    const eventDetail = event.detail;
    const method = customProps[`onAction${capitalize__default["default"](eventDetail.action)}`];
    if (method) {
      method();
    }
    if (eventDetail.action !== 'close' && onAction) {
      onAction(eventDetail);
    }
  }, [customProps, onAction, onClosed, returnFocusSelector]);
  reactUse.useEvent('MDCDialog:closed', onClosedCallback, dialogRef);
  reactUse.useEvent('MDCDialog:closing', onClosing, dialogRef);
  reactUse.useEvent('MDCDialog:opening', onOpening, dialogRef);
  reactUse.useEvent('MDCDialog:opened', onOpened, dialogRef);
  React.useEffect(() => {
    if (open) {
      mdcDialog === null || mdcDialog === void 0 ? void 0 : mdcDialog.open();
    } else {
      mdcDialog === null || mdcDialog === void 0 ? void 0 : mdcDialog.close();
    }
  }, [mdcDialog, open]);
  const onKeyDown = React.useCallback(event => {
    if (event.key !== 'Enter' || hasActions) {
      return;
    }

    // trigger a click event when user hits enter. For some reason material doesn't trigger an action on enter.
    // This is used for dialogs in which there are no action buttons, clicking on the items should close the dialog
    // TODO: look into removing this logic in the future if material fixes this
    if (dialogRef.contains(document.activeElement)) {
      document.activeElement.click();
    }
  }, [dialogRef, hasActions]);
  const dialogClasses = React.useMemo(() => clsx__default["default"]('lmnt', 'lmnt-dialog', 'mdc-dialog', stackedButtons && 'mdc-dialog--stacked', className), [className, stackedButtons]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    className: dialogClasses,
    ref: setDialogRef
  }, filteredCustomProps), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-dialog__container container"
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-dialog__surface",
    role: "alertdialog",
    "aria-modal": "true",
    "aria-labelledby": computedHeaderId,
    "aria-describedby": computedContentId
  }, header && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-dialog__title",
    id: computedHeaderId
  }, header), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-dialog__content",
    id: computedContentId,
    onKeyDown: onKeyDown,
    role: "presentation"
  }, content || children), hasActions && /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-dialog__actions"
  }, actions, cancelButton, acceptButton))), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-dialog__scrim"
  }));
});
Dialog.displayName = 'Dialog';
Dialog.propTypes = DialogPropTypes;
Dialog.defaultProps = DialogDefaultProps;
var Dialog$1 = /*#__PURE__*/React__default["default"].memo(Dialog);

// eslint-disable-next-line no-undef
const DialogAction = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    action,
    focused,
    tag: Tag,
    children,
    ...customProps
  } = props;
  return /*#__PURE__*/React__default["default"].createElement(Tag, _extends__default["default"]({
    ref: externalRef,
    "data-mdc-dialog-action": action,
    "data-mdc-dialog-initial-focus": focused
  }, customProps), children);
});
DialogAction.displayName = 'DialogAction';
DialogAction.propTypes = DialogActionPropTypes;
DialogAction.defaultProps = DialogActionDefaultProps;
var DialogAction$1 = /*#__PURE__*/React__default["default"].memo(DialogAction);

const DialogButton = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    tag,
    className,
    ...customProps
  } = props;
  return /*#__PURE__*/React__default["default"].createElement(DialogAction$1, _extends__default["default"]({
    ref: externalRef,
    tag: tag || reactButton.Button,
    className: clsx__default["default"]('mdc-dialog__button', className)
  }, customProps), children);
});
DialogButton.displayName = 'DialogButton';
DialogButton.propTypes = DialogButtonPropTypes;
DialogButton.defaultProps = DialogButtonDefaultProps;
var DialogButton$1 = /*#__PURE__*/React__default["default"].memo(DialogButton);

exports.Dialog = Dialog$1;
exports.DialogAction = DialogAction$1;
exports.DialogButton = DialogButton$1;
//# sourceMappingURL=index.js.map
