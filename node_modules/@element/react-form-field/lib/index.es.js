import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useRef, useImperativeHandle, useEffect } from 'react';
import { MDCFormField } from '@material/form-field';
import clsx from 'clsx';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const FormFieldPropTypes = {
  /**
   * Reverse the order of the input and label.
   *
   * Defaults to **false**.
   */
  alignEnd: PropTypes.bool,
  /**
   * Content to be rendered inside the FormField. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * The reference of the input the form field will be associated with. It enables a greater level of integration with parent components.
   *
   * Defaults to **null**.
   */
  inputRef: PropTypes.oneOfType([PropTypes.func,
  // eslint-disable-next-line react/forbid-prop-types
  PropTypes.shape({
    current: PropTypes.any
  })])
};
const FormFieldDefaultProps = {
  alignEnd: false,
  children: null,
  className: undefined,
  inputRef: null
};

const FormField = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    inputRef,
    className,
    alignEnd,
    ...customProps
  } = props;
  const ref = useRef();
  const mdcFormField = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  useEffect(() => {
    mdcFormField.current = MDCFormField.attachTo(ref.current);
    return () => {
      mdcFormField.current.destroy();
    };
  });
  useEffect(() => {
    if (inputRef) {
      mdcFormField.current.input = inputRef.current;
    }
  }, [inputRef]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: clsx('lmnt mdc-form-field lmnt-form-field', alignEnd && 'mdc-form-field--align-end', className)
  }, customProps), children);
});
FormField.displayName = 'FormField';
FormField.propTypes = FormFieldPropTypes;
FormField.defaultProps = FormFieldDefaultProps;

export { FormField };
//# sourceMappingURL=index.es.js.map
