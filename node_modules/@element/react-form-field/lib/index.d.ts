import React from 'react';


interface FormFieldReference { current: object; }

export interface FormFieldProps {
    /**
    * Reverse the order of the input and label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * Content to be rendered inside the FormField. Accepts any valid markup.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * The reference of the input the form field will be associated with. It enables a greater level of integration with parent components.
    *
    * Defaults to **null**.
    */
    inputRef?: Function|FormFieldReference;
}

/**
* Form Field is an atomic component most often by other input components such as `Checkbox`, `Radio`, `Switch`, and by another atomic component, `InputLabel`. The typical use-case for this component would be in developing a new input component.
 * @prop {boolean} alignEnd - Reverse the order of the input and label. Defaults to _false_.
 * @prop {React.ReactNode} children - Content to be rendered inside the FormField. Accepts any valid markup. Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} inputRef - The reference of the input the form field will be associated with. It enables a greater level of integration with parent components. Defaults to _null_.
*/
export const FormField: React.FunctionComponent<FormFieldProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
