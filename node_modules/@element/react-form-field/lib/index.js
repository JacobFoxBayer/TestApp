'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var formField = require('@material/form-field');
var clsx = require('clsx');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const FormFieldPropTypes = {
  /**
   * Reverse the order of the input and label.
   *
   * Defaults to **false**.
   */
  alignEnd: PropTypes__default["default"].bool,
  /**
   * Content to be rendered inside the FormField. Accepts any valid markup.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * The reference of the input the form field will be associated with. It enables a greater level of integration with parent components.
   *
   * Defaults to **null**.
   */
  inputRef: PropTypes__default["default"].oneOfType([PropTypes__default["default"].func,
  // eslint-disable-next-line react/forbid-prop-types
  PropTypes__default["default"].shape({
    current: PropTypes__default["default"].any
  })])
};
const FormFieldDefaultProps = {
  alignEnd: false,
  children: null,
  className: undefined,
  inputRef: null
};

const FormField = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    children,
    inputRef,
    className,
    alignEnd,
    ...customProps
  } = props;
  const ref = React.useRef();
  const mdcFormField = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  React.useEffect(() => {
    mdcFormField.current = formField.MDCFormField.attachTo(ref.current);
    return () => {
      mdcFormField.current.destroy();
    };
  });
  React.useEffect(() => {
    if (inputRef) {
      mdcFormField.current.input = inputRef.current;
    }
  }, [inputRef]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: ref,
    className: clsx__default["default"]('lmnt mdc-form-field lmnt-form-field', alignEnd && 'mdc-form-field--align-end', className)
  }, customProps), children);
});
FormField.displayName = 'FormField';
FormField.propTypes = FormFieldPropTypes;
FormField.defaultProps = FormFieldDefaultProps;

exports.FormField = FormField;
//# sourceMappingURL=index.js.map
