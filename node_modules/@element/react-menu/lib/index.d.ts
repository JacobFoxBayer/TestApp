import React from 'react';


export interface MenuProps {
    /**
    * The horizontal position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor.
    *
    * Defaults to **null**.
    */
    absolutePositionX?: number;
    /**
    * The vertical position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor.
    *
    * Defaults to **null**.
    */
    absolutePositionY?: number;
    /**
    * Sets the display position of the menu relative to the parent element. It must be used with Menu Anchor.
    *
    * Defaults to **'BOTTOM_START'**.
    */
    anchorCorner?: string;
    /**
    * Sets the distance from the anchor point that the menu surface should be shown.  The object properties should include at least one of `top`, `bottom`, `left` or `right`.
    *
    * Defaults to **null**.
    */
    anchorMargin?: object;
    /**
    * Custom props to be sent to the MenuAnchor wrapper of the `trigger`
    *
    * Defaults to **{}**.
    */
    anchorProps?: object;
    /**
    * Expects a List or ListGroup component but accepts any valid markup or components.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * Sets the direction property for the menu. For right to left languages use `rtl`.
    *
    * Defaults to **'ltr'**.
    */
    direction?: string;
    /**
    * Prevents the use of absolute position (x/y) props.
    *
    * Defaults to **false**.
    */
    fixed?: boolean;
    /**
    * Sets the width of the menu to the full width of the body. It is to be used with `hoistToBody`. Useful when creating navigation menus for mobile devices.
    *
    * Defaults to **false**.
    */
    fullScreen?: boolean;
    /**
    * Sets the width of the menu to the full width of the parent. Cannot be used with `hoistToBody` or when `absolutePositionY` or `absolutePositionY` is set.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Enables the menu to be rendered as part of the body, enables higher z-index. Requires `surfaceOnly` to be true. This can improve menu to behavior better inside a table. Use with caution: may cause unintended side-effects.
    *
    * Defaults to **false**.
    */
    hoistToBody?: boolean;
    /**
    * Sets the max height of the menu.
    *
    * Defaults to **275**.
    */
    maxHeight?: number;
    /**
    * Controls the visibility of the menu.
    *
    * Defaults to **false**.
    */
    open?: boolean;
    /**
    * Passthrough style object.
    *
    * Defaults to **null**.
    */
    style?: object;
    /**
    * Renders as just the menu surface. While Menu expects a list of items, when surfaceOnly is true any content can go inside the menu.
    *
    * Defaults to **false**.
    */
    surfaceOnly?: boolean;
    /**
    * Background color of the menu.
    *
    * Defaults to **'surface'**.
    */
    themeColor?: string;
    /**
    * Node used to trigger open the menu or menu surface. Will also serve as the anchor.
    *
    * Defaults to **null**.
    */
    trigger?: React.ReactNode;
    /**
    * When used with a List component `wrapFocus` allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation.
    *
    * Defaults to **true**.
    */
    wrapFocus?: boolean;
    /**
    * Fired when html body is clicked. Default behavior is to close the menu.
    */
    handleBodyClick?: Function;
    /**
    * Fired after the menu surface is closed. For best performance, this method should be memoized or wrapped with useCallback.
    */
    onClose?: Function;
    /**
    * Fired after the menu surface is opened. For best performance, this method should be memoized or wrapped with useCallback.
    */
    onOpen?: Function;
    /**
    * Fired when a menu item is selected . It is not available if `surfaceOnly` is true. For best performance, this method should be memoized or wrapped with useCallback.
    */
    onSelect?: Function;
}

/**
* A menu displays a list of choices on a temporary surface. They allow users make a selection from multiple options. Menus appear when users interact with a button, action, or other control. Mostly commonly used with the List component.
 * @prop {number} absolutePositionX - The horizontal position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor. Defaults to _null_.
 * @prop {number} absolutePositionY - The vertical position of the menu, when visible. The menu surface will be hoisted to the body of the DOM. This should only be used when the menu needs to be explicitly positioned and cannot be combined with MenuAnchor. Defaults to _null_.
 * @prop {string} anchorCorner - Sets the display position of the menu relative to the parent element. It must be used with Menu Anchor. Defaults to _'BOTTOM_START'_.
 * @prop {object} anchorMargin - Sets the distance from the anchor point that the menu surface should be shown.  The object properties should include at least one of `top`, `bottom`, `left` or `right`. Defaults to _null_.
 * @prop {object} anchorProps - Custom props to be sent to the MenuAnchor wrapper of the `trigger` Defaults to _{}_.
 * @prop {React.ReactNode} children - Expects a List or ListGroup component but accepts any valid markup or components. Defaults to _null_.
 * @prop {string} direction - Sets the direction property for the menu. For right to left languages use `rtl`. Defaults to _'ltr'_.
 * @prop {boolean} fixed - Prevents the use of absolute position (x/y) props. Defaults to _false_.
 * @prop {boolean} fullScreen - Sets the width of the menu to the full width of the body. It is to be used with `hoistToBody`. Useful when creating navigation menus for mobile devices. Defaults to _false_.
 * @prop {boolean} fullWidth - Sets the width of the menu to the full width of the parent. Cannot be used with `hoistToBody` or when `absolutePositionY` or `absolutePositionY` is set. Defaults to _false_.
 * @prop {boolean} hoistToBody - Enables the menu to be rendered as part of the body, enables higher z-index. Requires `surfaceOnly` to be true. This can improve menu to behavior better inside a table. Use with caution: may cause unintended side-effects. Defaults to _false_.
 * @prop {number} maxHeight - Sets the max height of the menu. Defaults to _275_.
 * @prop {boolean} open - Controls the visibility of the menu. Defaults to _false_.
 * @prop {object} style - Passthrough style object. Defaults to _null_.
 * @prop {boolean} surfaceOnly - Renders as just the menu surface. While Menu expects a list of items, when surfaceOnly is true any content can go inside the menu. Defaults to _false_.
 * @prop {string} themeColor - Background color of the menu. Defaults to _'surface'_.
 * @prop {React.ReactNode} trigger - Node used to trigger open the menu or menu surface. Will also serve as the anchor. Defaults to _null_.
 * @prop {boolean} wrapFocus - When used with a List component `wrapFocus` allows keyboard navigation to jump to the top or bottom of the list to enable continuous navigation. Defaults to _true_.
 *  @event handleBodyClick - Fired when html body is clicked. Default behavior is to close the menu.
 *  @event onClose - Fired after the menu surface is closed. For best performance, this method should be memoized or wrapped with useCallback.
 *  @event onOpen - Fired after the menu surface is opened. For best performance, this method should be memoized or wrapped with useCallback.
 *  @event onSelect - Fired when a menu item is selected . It is not available if `surfaceOnly` is true. For best performance, this method should be memoized or wrapped with useCallback.
*/
export const Menu: React.FunctionComponent<MenuProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface MenuAnchorProps {
    /**
    * Expects a clickable component such as Button or IconButton and the Menu component.
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
}

/**
* A container for the button and Menu that helps position the Menu correctly.
 * @prop {React.ReactNode} children - Expects a clickable component such as Button or IconButton and the Menu component. Defaults to _null_.
*/
export const MenuAnchor: React.FunctionComponent<MenuAnchorProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
