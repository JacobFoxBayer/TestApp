import React from 'react';


export interface TextfieldProps {
    /**
    * @deprecated _Use `fullWidth` instead._
    *
    * Applies a full-width style where the Textfield will fill its container.
    *
    * Defaults to **undefined**.
    */
    block?: boolean;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _See `containerProps`._
    *
    * Add a custom class to the `Textfield` container.
    *
    * Defaults to **undefined**.
    */
    containerClass?: string;
    /**
    * Properties to be added to the container of the textfield.
    *
    * Defaults to **undefined**.
    */
    containerProps?: object;
    /**
    * Enables a character count. _Warning_ requires `maxlength` to be set.
    *
    * Defaults to **false**.
    */
    counter?: boolean;
    /**
    * The starting value of the Textfield when working in uncontrolled mode.
    *
    * Defaults to **undefined**.
    */
    defaultValue?: string | number;
    /**
    * The size of the Textfield will be reduced.
    *
    * Defaults to **false**.
    */
    dense?: boolean;
    /**
    * Textfield will be disabled.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * @deprecated _Use `variant='embedded'_
    *
    * An unfilled, non-outlined and full-width variant of Textfield, intended to be embedded in other components such as TopAppBar or TableHeader.
    *
    * Defaults to **undefined**.
    */
    embedded?: boolean;
    /**
    * @deprecated _Use variant='filled' instead._
    *
    * Apply filled style to the Textfield. Previously called primary.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Sets the Textfield to the focused state.
    *
    * Defaults to **false**.
    */
    focused?: boolean;
    /**
    * The Textfield will expand to 100% width.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * Helper text to be displayed below Textfield, by default only visible on focus.
    *
    * Defaults to **null**.
    */
    helperText?: React.ReactNode;
    /**
    * Randomly generated id for the helper text container element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    helperTextId?: string;
    /**
    * Set the helper text to be permanently visible.
    *
    * Defaults to **false**.
    */
    helperTextPersistent?: boolean;
    /**
    * Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear red when `valid` is set to 'false').
    *
    * Defaults to **false**.
    */
    helperTextValidation?: boolean;
    /**
    * Randomly generated id for the input element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Floating input label. Note: full-width Textfields do not support floating labels - any label on a full-width Textfield will be automatically mapped to a placeholder.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Randomly generated id for the label element. May be overwritten.
    *
    * Defaults to **undefined**.
    */
    labelId?: string;
    /**
    * Custom content to appear before the input.
    *
    * Defaults to **null**.
    */
    leadingContent?: React.ReactNode;
    /**
    * Adds the given Icon or Icon Button to the left of the Textfield. Expects the name of a valid Material.io icon, however in React an icon or icon button component may be passed in instead for more control,
    *
    * Defaults to **null**.
    */
    leadingIcon?: string | React.ReactNode;
    /**
    * @deprecated _Use `maxlength` instead. The case of this prop has changed to be more consistent._
    *
    * Restricts the number of characters that can be entered, best used with counter.
    *
    * Defaults to **undefined**.
    */
    maxLength?: number;
    /**
    * Restricts the number of characters that can be entered, best used with counter.
    *
    * Defaults to **null**.
    */
    maxlength?: number;
    /**
    * Prevents resizing when using `textarea`.
    *
    * Defaults to **true**.
    */
    noResize?: boolean;
    /**
    * @deprecated _Use `variant='outlined'` instead_
    *
    * Apply outlined style to the Textfield. Previously called secondary.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * Non-floating label text, will be replaced when the user starts typing.
    *
    * Defaults to **null**.
    */
    placeholder?: string;
    /**
    * Text that will appear before the label or value of the Textfield. It will be shown on focus. An example use-case might be a currency symbol such as `$`. _Warning:_ This cannot be used with `leadingIcon` or `textarea`.
    *
    * Defaults to **null**.
    */
    prefixText?: string;
    /**
    * @deprecated _This feature is no longer supported. Use `variant='filled'` instead._
    *
    * Enable filled styling.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * @deprecated _Use `variant='embedded'`_
    *
    * Enabled search bar styling, including a full width style.
    *
    * Defaults to **undefined**.
    */
    search?: boolean;
    /**
    * @deprecated _Use `variant='outlined'` instead._
    *
    * Apply secondary style to the Textfield.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * Text that will appear after the label or value of the Textfield. It will be shown on focus. An example use-case might be `.00` if handling currency. _Warning:_ This cannot be used with `trailingIcon` or `textarea`.
    *
    * Defaults to **null**.
    */
    suffixText?: string;
    /**
    * Enabled multi-line text input. _Note_ `textarea` cannot be used with the embedded variant.
    *
    * Defaults to **false**.
    */
    textarea?: boolean;
    /**
    * If defined, a Tooltip will appear on the Textfield. Useful to show the full value, if the value is too long for the Textfield width. The object should be the needed Tooltip properties. Tooltip `text` prop will be set to the current value of the Textfield.  See Tooltip docs for available props.
    *
    * Defaults to **null**.
    */
    tooltip?: boolean | object;
    /**
    * Custom content to appear after the input.
    *
    * Defaults to **null**.
    */
    trailingContent?: React.ReactNode;
    /**
    * Adds the given Icon or Icon Button  to the right of the Textfield . Expects the name of a valid Material.io icon, however in React an icon icon button component may be passed in instead for more control.
    *
    * Defaults to **null**.
    */
    trailingIcon?: string | React.ReactNode;
    /**
    * Support for built-in input types. Browser support for some advanced types such as color or date may be limited or appear differently between browsers. _Note_  the `Datepicker` component should be preferred over the built-in date/time types as it offers more consistency and features._Note_ Slider type is not support, please use the Element `Slider` component instead.
    *
    * Defaults to **'text'**.
    */
    type?: string;
    /**
    * Applies an invalid style to the Textfield.
    *
    * Defaults to **true**.
    */
    valid?: boolean;
    /**
    * The current value of the Textfield component.
    *
    * Defaults to **undefined**.
    */
    value?: string | number;
    /**
    * Applies the selected styling to the Textfield. _Note_ `textarea` does not support the `embedded` variant.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * Fired when focus leaves the input.
    */
    onBlur?: Function;
    /**
    * Fired when each character is entered into the Textfield.
    */
    onChange?: Function;
    /**
    * Fired when the input gains focus.
    */
    onFocus?: Function;
}

/**
* Text fields let users enter and edit text into a UI.
 * @prop {boolean} block - Deprecated: Use `fullWidth` instead. Applies a full-width style where the Textfield will fill its container. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {string} containerClass - Deprecated: See `containerProps`. Add a custom class to the `Textfield` container. Defaults to _undefined_.
 * @prop {object} containerProps - Properties to be added to the container of the textfield. Defaults to _undefined_.
 * @prop {boolean} counter - Enables a character count. _Warning_ requires `maxlength` to be set. Defaults to _false_.
 * @prop {string | number} defaultValue - The starting value of the Textfield when working in uncontrolled mode. Defaults to _undefined_.
 * @prop {boolean} dense - The size of the Textfield will be reduced. Defaults to _false_.
 * @prop {boolean} disabled - Textfield will be disabled. Defaults to _false_.
 * @prop {boolean} embedded - Deprecated: Use `variant='embedded' An unfilled, non-outlined and full-width variant of Textfield, intended to be embedded in other components such as TopAppBar or TableHeader. Defaults to _undefined_.
 * @prop {boolean} filled - Deprecated: Use variant='filled' instead. Apply filled style to the Textfield. Previously called primary. Defaults to _undefined_.
 * @prop {boolean} focused - Sets the Textfield to the focused state. Defaults to _false_.
 * @prop {boolean} fullWidth - The Textfield will expand to 100% width. Defaults to _false_.
 * @prop {React.ReactNode} helperText - Helper text to be displayed below Textfield, by default only visible on focus. Defaults to _null_.
 * @prop {string} helperTextId - Randomly generated id for the helper text container element. May be overwritten. Defaults to _undefined_.
 * @prop {boolean} helperTextPersistent - Set the helper text to be permanently visible. Defaults to _false_.
 * @prop {boolean} helperTextValidation - Set the helper text to use validation styles. Helper text changes with `valid` (e.g., helper text will appear red when `valid` is set to 'false'). Defaults to _false_.
 * @prop {string} id - Randomly generated id for the input element. May be overwritten. Defaults to _undefined_.
 * @prop {string} label - Floating input label. Note: full-width Textfields do not support floating labels - any label on a full-width Textfield will be automatically mapped to a placeholder. Defaults to _null_.
 * @prop {string} labelId - Randomly generated id for the label element. May be overwritten. Defaults to _undefined_.
 * @prop {React.ReactNode} leadingContent - Custom content to appear before the input. Defaults to _null_.
 * @prop {string|React.ReactNode} leadingIcon - Adds the given Icon or Icon Button to the left of the Textfield. Expects the name of a valid Material.io icon, however in React an icon or icon button component may be passed in instead for more control, Defaults to _null_.
 * @prop {number} maxLength - Deprecated: Use `maxlength` instead. The case of this prop has changed to be more consistent. Restricts the number of characters that can be entered, best used with counter. Defaults to _undefined_.
 * @prop {number} maxlength - Restricts the number of characters that can be entered, best used with counter. Defaults to _null_.
 * @prop {boolean} noResize - Prevents resizing when using `textarea`. Defaults to _true_.
 * @prop {boolean} outlined - Deprecated: Use `variant='outlined'` instead Apply outlined style to the Textfield. Previously called secondary. Defaults to _undefined_.
 * @prop {string} placeholder - Non-floating label text, will be replaced when the user starts typing. Defaults to _null_.
 * @prop {string} prefixText - Text that will appear before the label or value of the Textfield. It will be shown on focus. An example use-case might be a currency symbol such as `$`. _Warning:_ This cannot be used with `leadingIcon` or `textarea`. Defaults to _null_.
 * @prop {boolean} primary - Deprecated: This feature is no longer supported. Use `variant='filled'` instead. Enable filled styling. Defaults to _undefined_.
 * @prop {boolean} search - Deprecated: Use `variant='embedded'` Enabled search bar styling, including a full width style. Defaults to _undefined_.
 * @prop {boolean} secondary - Deprecated: Use `variant='outlined'` instead. Apply secondary style to the Textfield. Defaults to _undefined_.
 * @prop {string} suffixText - Text that will appear after the label or value of the Textfield. It will be shown on focus. An example use-case might be `.00` if handling currency. _Warning:_ This cannot be used with `trailingIcon` or `textarea`. Defaults to _null_.
 * @prop {boolean} textarea - Enabled multi-line text input. _Note_ `textarea` cannot be used with the embedded variant. Defaults to _false_.
 * @prop {boolean|object} tooltip - If defined, a Tooltip will appear on the Textfield. Useful to show the full value, if the value is too long for the Textfield width. The object should be the needed Tooltip properties. Tooltip `text` prop will be set to the current value of the Textfield.  See Tooltip docs for available props. Defaults to _null_.
 * @prop {React.ReactNode} trailingContent - Custom content to appear after the input. Defaults to _null_.
 * @prop {string|React.ReactNode} trailingIcon - Adds the given Icon or Icon Button  to the right of the Textfield . Expects the name of a valid Material.io icon, however in React an icon icon button component may be passed in instead for more control. Defaults to _null_.
 * @prop {string} type - Support for built-in input types. Browser support for some advanced types such as color or date may be limited or appear differently between browsers. _Note_  the `Datepicker` component should be preferred over the built-in date/time types as it offers more consistency and features._Note_ Slider type is not support, please use the Element `Slider` component instead. Defaults to _'text'_.
 * @prop {boolean} valid - Applies an invalid style to the Textfield. Defaults to _true_.
 * @prop {string | number} value - The current value of the Textfield component. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected styling to the Textfield. _Note_ `textarea` does not support the `embedded` variant. Defaults to _'filled'_.
 *  @event onBlur - Fired when focus leaves the input.
 *  @event onChange - Fired when each character is entered into the Textfield.
 *  @event onFocus - Fired when the input gains focus.
*/
export const Textfield: React.FunctionComponent<TextfieldProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
