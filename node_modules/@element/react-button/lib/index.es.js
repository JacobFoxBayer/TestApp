import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useRef, useImperativeHandle, useCallback } from 'react';
import clsx from 'clsx';
import { Ripple } from '@element/react-ripple';
import { Icon } from '@element/react-icon';
import { deprecatedProp, deprecatedOneOf, addClass } from '@element/react-common';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ButtonPropTypes = {
  /**
   * @deprecated _Use `themeColor='secondary'` instead._
   *
   * Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme).
   *
   * Defaults to **undefined**.
   */
  altColor: deprecatedProp(PropTypes.bool, "Button", 'Use `themeColor="secondary"` instead.'),
  /**
   * One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme.
   *
   * Defaults to **'themeDefault'**.
   */
  buttonSize: PropTypes.oneOf(["xsmall", "small", "medium", "large", "xlarge", "themeDefault"]),
  /**
   * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * @deprecated _forwardRef has been implemented for Button._
   *
   * Reference to the DOM button. This enables a greater level of integration.
   *
   * Defaults to **undefined**.
   */
  customRef: deprecatedProp(PropTypes.oneOfType([PropTypes.func,
  // eslint-disable-next-line react/forbid-prop-types
  PropTypes.shape({
    current: PropTypes.any
  })]), "Button", "forwardRef has been implemented for Button."),
  /**
   * @deprecated _Use `variant='danger'` instead._
   *
   * Apply danger style to the button.
   *
   * Defaults to **undefined**.
   */
  danger: deprecatedProp(PropTypes.bool, "Button", 'Use `variant="danger"` instead.'),
  /**
   * Prevent the user from interacting with the component.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool,
  /**
   * Sets elevation of the button. Default will be the theme default.
   *
   * Defaults to **'default'**.
   */
  elevation: PropTypes.oneOf(["default", "elevated", "flat"]),
  /**
   * @deprecated _Use `variant='filled'` instead._
   *
   * Apply a filled-in style. Previously called `primary`.
   *
   * Defaults to **undefined**.
   */
  filled: deprecatedProp(PropTypes.bool, "Button", 'Use `variant="filled"` instead.'),
  /**
   * Applies a full-width style where the textfield will fill it's container.
   *
   * Defaults to **false**.
   */
  fullWidth: PropTypes.bool,
  /**
   * The button will render as an anchor tag. If the tag prop is set, that prop will take precedence.
   *
   * Defaults to **null**.
   */
  href: PropTypes.string,
  /**
   * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
   *
   * Defaults to **null**.
   */
  label: PropTypes.string,
  /**
   * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
   *
   * Defaults to **undefined**.
   */
  leadingIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.node]),
  /**
   * The primary interaction event for button.
   *
   * Defaults to **null**.
   */
  onClick: PropTypes.func,
  /**
   * @deprecated _Use `variant='outlined'`._
   *
   * Apply outlined style to the button. Previously called `secondary`.
   *
   * Defaults to **undefined**.
   */
  outlined: deprecatedProp(PropTypes.bool, "Button", 'Use `variant="outlined"`.'),
  /**
   * @deprecated _Use `variant='filled'` instead._
   *
   * Apply primary style to the Button.
   *
   * Defaults to **undefined**.
   */
  primary: deprecatedProp(PropTypes.bool, "Button", 'Use `variant="filled"` instead.'),
  /**
   * @deprecated _Use `'variant=outlined'` instead._
   *
   * Apply secondary style to the Button.
   *
   * Defaults to **undefined**.
   */
  secondary: deprecatedProp(PropTypes.bool, "Button", 'Use `"variant=outlined"` instead.'),
  /**
   * By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
   *
   * Defaults to **null**.
   */
  tag: PropTypes.oneOfType([PropTypes.string, PropTypes.elementType, PropTypes.instanceOf(React.Component)]),
  /**
   * @deprecated _Use `variant='embedded'` instead._
   *
   * Apply tertiary style to the Button.
   *
   * Defaults to **undefined**.
   */
  tertiary: deprecatedProp(PropTypes.bool, "Button", 'Use `variant="embedded"` instead.'),
  /**
   * @deprecated _Use `variant='text'` instead._
   *
   * Apply unfilled, un-outlined style to the Button. Previously called `tertiary`.
   *
   * Defaults to **undefined**.
   */
  text: deprecatedProp(PropTypes.bool, "Button", 'Use `variant="text"` instead.'),
  /**
   * Sets the theme color for the button. Most commonly used when the control is placed on a darker surface.
   *
   * Defaults to **'primary'**.
   */
  themeColor: deprecatedOneOf(PropTypes.oneOf(["primary", "secondary", "on-unknown-black", "on-unknown-white", "on-primary", "on-secondary", "on-success", "on-danger"]), ["onUnknownBlack", "onUnknownWhite"], "Button", "Please use one of 'primary','secondary','on-unknown-black','on-unknown-white','on-primary','on-secondary','on-success','on-danger'."),
  /**
   * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
   *
   * Defaults to **undefined**.
   */
  trailingIcon: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.node]),
  /**
   * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
   *
   * Defaults to **'button'**.
   */
  type: PropTypes.oneOf(["button", "submit", "reset"]),
  /**
   * @deprecated _Use `elevation='flat' instead._
   *
   * Remove elevation.
   *
   * Defaults to **undefined**.
   */
  unelevated: deprecatedProp(PropTypes.bool, "Button", 'Use `elevation="flat" instead.'),
  /**
   * Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes.
   *
   * Defaults to **'filled'**.
   */
  variant: PropTypes.oneOf(["filled", "outlined", "danger", "text", "rounded-small", "rounded-micro"])
};
const ButtonDefaultProps = {
  altColor: undefined,
  buttonSize: "themeDefault",
  children: null,
  className: undefined,
  customRef: undefined,
  danger: undefined,
  disabled: false,
  elevation: "default",
  filled: undefined,
  fullWidth: false,
  href: null,
  label: null,
  leadingIcon: undefined,
  outlined: undefined,
  primary: undefined,
  secondary: undefined,
  tag: null,
  tertiary: undefined,
  text: undefined,
  themeColor: "primary",
  trailingIcon: undefined,
  type: "button",
  unelevated: undefined,
  variant: "filled"
};

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const ButtonGroupPropTypes = {
  /**
   * Children to be rendered. Expects multiple Element Buttons
   *
   * Defaults to **null**.
   */
  children: PropTypes.node,
  /**
   * How much spacing between buttons. Dense is 8p, standard is 16px and airy is 24px.
   *
   * Defaults to **'standard'**.
   */
  variant: PropTypes.oneOf(["dense", "standard", "airy"])
};
const ButtonGroupDefaultProps = {
  children: null,
  variant: "standard"
};

const Button = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    altColor,
    buttonSize,
    children,
    className,
    customRef,
    disabled,
    elevation,
    primary,
    secondary,
    tertiary,
    text,
    danger,
    filled,
    fullWidth,
    href,
    label,
    leadingIcon,
    onClick,
    outlined,
    tag,
    themeColor,
    trailingIcon,
    type,
    unelevated,
    variant,
    ...customProps
  } = props;
  const ref = useRef(customRef || null);
  useImperativeHandle(externalRef, () => ref.current, []);
  const content = label || children;
  const CompTag = tag || (href ? 'a' : 'button');
  const isOutlined = variant === 'outlined' || outlined || secondary;
  const isRounded = variant === 'rounded-small' || variant === 'rounded-micro';
  const isText = variant === 'text' || text || tertiary;
  const isDanger = variant === 'danger' || danger;
  const isFilled = !isOutlined && !isText && !isDanger && (variant === 'filled' || filled || primary);
  const isSecondaryColor = altColor || themeColor === 'secondary';
  const isPrimaryColor = themeColor === 'primary';
  const hasTrailingIcon = trailingIcon && !leadingIcon;
  const isOnUnknownBlack = themeColor === 'onUnknownBlack' || themeColor === 'on-unknown-black';
  const isOnUnknownWhite = themeColor === 'onUnknownWhite' || themeColor === 'on-unknown-white';
  const LeadingIcon = useCallback(() => {
    if (typeof leadingIcon === 'string') {
      return /*#__PURE__*/React.createElement(Icon, {
        tabIndex: 0,
        role: "button",
        className: "mdc-button__icon lmnt-button__icon--leading",
        icon: leadingIcon
      });
    }
    if (typeof leadingIcon === 'function') {
      return leadingIcon({
        className: 'mdc-button__icon lmnt-button__icon--leading'
      });
    }
    return addClass(leadingIcon, 'mdc-button__icon lmnt-button__icon--leading');
  }, [leadingIcon]);
  const TrailingIcon = useCallback(() => {
    if (typeof trailingIcon === 'string') {
      return /*#__PURE__*/React.createElement(Icon, {
        tabIndex: 0,
        role: "button",
        className: "mdc-button__icon lmnt-button__icon--trailing",
        icon: trailingIcon
      });
    }
    if (typeof leadingIcon === 'function') {
      return trailingIcon({
        className: 'mdc-button__icon lmnt-button__icon--trailing'
      });
    }
    return addClass(trailingIcon, 'mdc-button__icon lmnt-button__icon--trailing');
  }, [leadingIcon, trailingIcon]);
  return /*#__PURE__*/React.createElement(Ripple, {
    componentRef: ref
  }, /*#__PURE__*/React.createElement(CompTag, _extends({
    ref: ref,
    href: href,
    onClick: onClick,
    type: type,
    disabled: disabled,
    className: clsx('lmnt', 'mdc-button', 'lmnt-button', isFilled && unelevated && isPrimaryColor && 'lmnt-button--filled-primary', isFilled && unelevated && isSecondaryColor && 'lmnt-button--filled-secondary', isFilled && !unelevated && isPrimaryColor && ['lmnt-button--filled-primary', 'mdc-button--raised'], isFilled && !unelevated && isSecondaryColor && ['lmnt-button--filled-secondary', 'mdc-button--raised'], isFilled && !unelevated && themeColor === 'on-primary' && ['lmnt-button--filled-on-primary', 'mdc-button--raised'], isFilled && !unelevated && themeColor === 'on-secondary' && ['lmnt-button--filled-on-secondary', 'mdc-button--raised'], isFilled && !unelevated && themeColor === 'on-success' && ['lmnt-button--filled-on-success', 'mdc-button--raised'], isFilled && !unelevated && themeColor === 'on-danger' && ['lmnt-button--filled-on-danger', 'mdc-button--raised'], isFilled && !unelevated && isOnUnknownBlack && ['lmnt-button--filled-on-unknown-black', 'mdc-button--raised'], isFilled && !unelevated && isOnUnknownWhite && ['lmnt-button--filled-on-unknown-white', 'mdc-button--raised'], isOutlined && isPrimaryColor && ['lmnt-button--outlined-primary', 'mdc-button--outlined'], isOutlined && isSecondaryColor && ['lmnt-button--outlined-secondary', 'mdc-button--outlined'], isOutlined && isOnUnknownWhite && 'lmnt-button--outlined-on-unknown-white mdc-button--outlined', isOutlined && isOnUnknownBlack && 'lmnt-button--outlined-on-unknown-black mdc-button--outlined', isText && isOnUnknownWhite && 'lmnt-button--text-on-unknown-white mdc-button__text', isText && isOnUnknownBlack && 'lmnt-button--text-on-unknown-black mdc-button__text', isRounded && isOnUnknownWhite && 'lmnt-button--text-on-unknown-white mdc-button__text', isRounded && isOnUnknownBlack && 'lmnt-button--text-on-unknown-black mdc-button__text', isText && isPrimaryColor && 'lmnt-button--text-primary', isText && isSecondaryColor && 'lmnt-button--text-secondary', isDanger && unelevated && isSecondaryColor && 'lmnt-button--danger-secondary', isDanger && unelevated && isPrimaryColor && 'lmnt-button--danger-primary', isDanger && !unelevated && isSecondaryColor && ['lmnt-button--danger-secondary', 'mdc-button--raised'], isDanger && !unelevated && isPrimaryColor && ['lmnt-button--danger-primary', 'mdc-button--raised'], fullWidth && 'lmnt-button--full-width', unelevated && !isText && 'mdc-button--unelevated', elevation === 'flat' && 'lmnt-button--flat', elevation === 'elevated' && 'lmnt-button--elevated', `lmnt-button--${buttonSize}`, variant === 'rounded-small' && 'lmnt-button--rounded lmnt-button--rounded-small mdc-button__text lmnt-button--text-primary', variant === 'rounded-micro' && 'lmnt-button--rounded lmnt-button--rounded-micro mdc-button__text lmnt-button--text-primary', className, 'mdc-touch-target-wrapper')
  }, customProps), /*#__PURE__*/React.createElement("span", {
    className: "mdc-button__ripple"
  }), leadingIcon && LeadingIcon(), /*#__PURE__*/React.createElement("span", {
    className: "mdc-button__label"
  }, content), hasTrailingIcon && TrailingIcon(), /*#__PURE__*/React.createElement("span", {
    className: "mdc-button__touch"
  })));
});
Button.displayName = 'Button';
Button.propTypes = ButtonPropTypes;
Button.defaultProps = ButtonDefaultProps;

const ButtonGroup = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    children,
    className,
    variant,
    ...customProps
  } = props;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: externalRef,
    className: clsx('lmnt', 'lmnt-button-group', variant === 'dense' && 'lmnt-button-group--dense', variant === 'standard' && 'lmnt-button-group--standard', variant === 'airy' && 'lmnt-button-group--airy', className)
  }, customProps), children);
});
ButtonGroup.displayName = 'ButtonGroup';
ButtonGroup.propTypes = ButtonGroupPropTypes;
ButtonGroup.defaultProps = ButtonGroupDefaultProps;

export { Button, ButtonGroup };
//# sourceMappingURL=index.es.js.map
