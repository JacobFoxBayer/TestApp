import React from 'react';


interface ButtonReference { current: object; }

export interface ButtonProps {
    /**
    * @deprecated _Use `themeColor='secondary'` instead._
    *
    * Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme).
    *
    * Defaults to **undefined**.
    */
    altColor?: boolean;
    /**
    * One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme.
    *
    * Defaults to **'themeDefault'**.
    */
    buttonSize?: string;
    /**
    * Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * @deprecated _forwardRef has been implemented for Button._
    *
    * Reference to the DOM button. This enables a greater level of integration.
    *
    * Defaults to **undefined**.
    */
    customRef?: Function|ButtonReference;
    /**
    * @deprecated _Use `variant='danger'` instead._
    *
    * Apply danger style to the button.
    *
    * Defaults to **undefined**.
    */
    danger?: boolean;
    /**
    * Prevent the user from interacting with the component.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * Sets elevation of the button. Default will be the theme default.
    *
    * Defaults to **'default'**.
    */
    elevation?: string;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply a filled-in style. Previously called `primary`.
    *
    * Defaults to **undefined**.
    */
    filled?: boolean;
    /**
    * Applies a full-width style where the textfield will fill it's container.
    *
    * Defaults to **false**.
    */
    fullWidth?: boolean;
    /**
    * The button will render as an anchor tag. If the tag prop is set, that prop will take precedence.
    *
    * Defaults to **null**.
    */
    href?: string;
    /**
    * The displayed text. Expects a valid string. If label and children are both set, label will take priority.
    *
    * Defaults to **null**.
    */
    label?: string;
    /**
    * Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control,
    *
    * Defaults to **undefined**.
    */
    leadingIcon?: string | Function | React.ReactNode;
    /**
    * @deprecated _Use `variant='outlined'`._
    *
    * Apply outlined style to the button. Previously called `secondary`.
    *
    * Defaults to **undefined**.
    */
    outlined?: boolean;
    /**
    * @deprecated _Use `variant='filled'` instead._
    *
    * Apply primary style to the Button.
    *
    * Defaults to **undefined**.
    */
    primary?: boolean;
    /**
    * @deprecated _Use `'variant=outlined'` instead._
    *
    * Apply secondary style to the Button.
    *
    * Defaults to **undefined**.
    */
    secondary?: boolean;
    /**
    * By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested.
    *
    * Defaults to **null**.
    */
    tag?: string | React.ElementType | React.Component;
    /**
    * @deprecated _Use `variant='embedded'` instead._
    *
    * Apply tertiary style to the Button.
    *
    * Defaults to **undefined**.
    */
    tertiary?: boolean;
    /**
    * @deprecated _Use `variant='text'` instead._
    *
    * Apply unfilled, un-outlined style to the Button. Previously called `tertiary`.
    *
    * Defaults to **undefined**.
    */
    text?: boolean;
    /**
    * Sets the theme color for the button. Most commonly used when the control is placed on a darker surface.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control.
    *
    * Defaults to **undefined**.
    */
    trailingIcon?: string | Function | React.ReactNode;
    /**
    * This applies the html button type (button, submit, reset) or the anchor media type when used with the href property.
    *
    * Defaults to **'button'**.
    */
    type?: string;
    /**
    * @deprecated _Use `elevation='flat' instead._
    *
    * Remove elevation.
    *
    * Defaults to **undefined**.
    */
    unelevated?: boolean;
    /**
    * Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes.
    *
    * Defaults to **'filled'**.
    */
    variant?: string;
    /**
    * The primary interaction event for button.
    */
    onClick?: Function;
}

/**
* A button should contain a clear call to action for the user. Action verbs are good text for the button container. The style and size of the button should reflect its hierarchy and importance of the action being called.
 * @prop {boolean} altColor - Deprecated: Use `themeColor='secondary'` instead. Preview feature, this may change. Apply alternative button color scheme (defined by the individual theme). Defaults to _undefined_.
 * @prop {string} buttonSize - One of 'xsmall', 'small', 'medium', 'large' and 'xlarge' will change the size of the button. Defaults according to your theme. Defaults to _'themeDefault'_.
 * @prop {React.ReactNode} children - Content to be rendered inside the button. Can be used instead `label` of to provide more flexibility. Accepts any valid markup. _Warning, if Label is set, it will be used instead of child content._ Defaults to _null_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {reference} customRef - Deprecated: forwardRef has been implemented for Button. Reference to the DOM button. This enables a greater level of integration. Defaults to _undefined_.
 * @prop {boolean} danger - Deprecated: Use `variant='danger'` instead. Apply danger style to the button. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the component. Defaults to _false_.
 * @prop {string} elevation - Sets elevation of the button. Default will be the theme default. Defaults to _'default'_.
 * @prop {boolean} filled - Deprecated: Use `variant='filled'` instead. Apply a filled-in style. Previously called `primary`. Defaults to _undefined_.
 * @prop {boolean} fullWidth - Applies a full-width style where the textfield will fill it's container. Defaults to _false_.
 * @prop {string} href - The button will render as an anchor tag. If the tag prop is set, that prop will take precedence. Defaults to _null_.
 * @prop {string} label - The displayed text. Expects a valid string. If label and children are both set, label will take priority. Defaults to _null_.
 * @prop {string|function|React.ReactNode} leadingIcon - Adds the given Icon to the left of the button text. May not be used with `trailingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control, Defaults to _undefined_.
 * @prop {boolean} outlined - Deprecated: Use `variant='outlined'`. Apply outlined style to the button. Previously called `secondary`. Defaults to _undefined_.
 * @prop {boolean} primary - Deprecated: Use `variant='filled'` instead. Apply primary style to the Button. Defaults to _undefined_.
 * @prop {boolean} secondary - Deprecated: Use `'variant=outlined'` instead. Apply secondary style to the Button. Defaults to _undefined_.
 * @prop {string|React.ElementType|React.Component} tag - By default a button or anchor tag will be rendered, this allows another tag/component to be used instead. A block type element/component is suggested. Defaults to _null_.
 * @prop {boolean} tertiary - Deprecated: Use `variant='embedded'` instead. Apply tertiary style to the Button. Defaults to _undefined_.
 * @prop {boolean} text - Deprecated: Use `variant='text'` instead. Apply unfilled, un-outlined style to the Button. Previously called `tertiary`. Defaults to _undefined_.
 * @prop {string} themeColor - Sets the theme color for the button. Most commonly used when the control is placed on a darker surface. Defaults to _'primary'_.
 * @prop {string|function|React.ReactNode} trailingIcon - Adds the given Icon to the right of the button text. May not be used with `leadingIcon` - if `leadingIcon` and `trailingIcon` are both set, `leadingIcon` will take priority. Expects the name of a valid Material.io icon, however an icon component may be passed in instead for more control. Defaults to _undefined_.
 * @prop {string} type - This applies the html button type (button, submit, reset) or the anchor media type when used with the href property. Defaults to _'button'_.
 * @prop {boolean} unelevated - Deprecated: Use `elevation='flat' instead. Remove elevation. Defaults to _undefined_.
 * @prop {string} variant - Applies the selected style to the button. `rounded-small` and `rounded-micro` are only available on select themes. Defaults to _'filled'_.
 *  @event onClick - The primary interaction event for button.
*/
export const Button: React.FunctionComponent<ButtonProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;


export interface ButtonGroupProps {
    /**
    * Children to be rendered. Expects multiple Element Buttons
    *
    * Defaults to **null**.
    */
    children?: React.ReactNode;
    /**
    * How much spacing between buttons. Dense is 8p, standard is 16px and airy is 24px.
    *
    * Defaults to **'standard'**.
    */
    variant?: string;
}

/**
* 
 *@deprecated Use Group Component instead
A group of buttons.(DEPRECATED)
 * @prop {React.ReactNode} children - Children to be rendered. Expects multiple Element Buttons Defaults to _null_.
 * @prop {string} variant - How much spacing between buttons. Dense is 8p, standard is 16px and airy is 24px. Defaults to _'standard'_.
*/
export const ButtonGroup: React.FunctionComponent<ButtonGroupProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
