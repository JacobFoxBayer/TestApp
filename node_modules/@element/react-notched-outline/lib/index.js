'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var notchedOutline = require('@material/notched-outline');
var clsx = require('clsx');
var PropTypes = require('prop-types');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const NotchedOutlinePropTypes = {
  /**
   * Content to be rendered inside the notched outline. Accepts a string.
   *
   * Defaults to **null**.
   */
  children: PropTypes__default["default"].node,
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Determines if the notch is opened or closed.
   *
   * Defaults to **undefined**.
   */
  closed: PropTypes__default["default"].bool,
  /**
   *
   *
   * Defaults to **null**.
   */
  width: PropTypes__default["default"].number
};
const NotchedOutlineDefaultProps = {
  children: null,
  className: undefined,
  closed: undefined,
  width: null
};

const NotchedOutline = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    closed,
    className,
    children,
    width,
    ...customProps
  } = props;
  const ref = React.useRef();
  const mdcNotchedOutlineRef = React.useRef();
  React.useImperativeHandle(externalRef, () => ref.current, []);
  React.useEffect(() => {
    mdcNotchedOutlineRef.current = notchedOutline.MDCNotchedOutline.attachTo(ref.current);
    return () => {
      mdcNotchedOutlineRef.current.destroy();
    };
  }, []);
  React.useEffect(() => {
    if (closed === undefined) return;
    closed ? mdcNotchedOutlineRef.current.closeNotch() : mdcNotchedOutlineRef.current.notch();
  }, [closed]);
  React.useEffect(() => {
    if (width) {
      mdcNotchedOutlineRef.current.foundation.adapter.setNotchWidthProperty(width);
    } else {
      mdcNotchedOutlineRef.current.foundation.adapter.removeNotchWidthProperty();
    }
  }, [width]);
  return /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    className: clsx__default["default"]('lmnt', 'mdc-notched-outline', className),
    ref: ref
  }, customProps), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-notched-outline__leading"
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-notched-outline__notch"
  }, children), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-notched-outline__trailing"
  }));
});
NotchedOutline.displayName = 'NotchedOutline';
NotchedOutline.propTypes = NotchedOutlinePropTypes;
NotchedOutline.defaultProps = NotchedOutlineDefaultProps;

exports.NotchedOutline = NotchedOutline;
//# sourceMappingURL=index.js.map
