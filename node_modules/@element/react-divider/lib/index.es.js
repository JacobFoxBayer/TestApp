import _extends from '@babel/runtime-corejs3/helpers/extends';
import clsx from 'clsx';
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import PropTypes from 'prop-types';
import { deprecatedProp } from '@element/react-common';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const DividerPropTypes = {
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * @deprecated _Use `themeColor` instead._
   *
   * The name of the desired Element color like 'primary'
   *
   * Defaults to **undefined**.
   */
  dividerColor: deprecatedProp(PropTypes.string, "Divider", "Use `themeColor` instead."),
  /**
   * @deprecated _Use `themeColorImportant` instead._
   *
   * If the border-color should be set with !important
   *
   * Defaults to **undefined**.
   */
  dividerColorImportant: deprecatedProp(PropTypes.bool, "Divider", "Use `themeColorImportant` instead."),
  /**
   * @deprecated _Use `variant` instead._
   *
   * Choose between dense and tall variants.
   *
   * Defaults to **undefined**.
   */
  dividerHeight: deprecatedProp(PropTypes.string, "Divider", "Use `variant` instead."),
  /**
   * Set the border-style with default browser styles. In general, avoid using.
   *
   * Defaults to **empty string**.
   */
  dividerStyle: PropTypes.string,
  /**
   * The name of the desired Element color like 'primary'
   *
   * Defaults to **'on-surface-stroke'**.
   */
  themeColor: PropTypes.oneOf(["", "primary", "primary-variant", "primary-50", "primary-100", "primary-200", "primary-300", "primary-400", "primary-500", "primary-600", "primary-700", "primary-800", "primary-900", "secondary", "secondary-variant", "secondary-50", "secondary-100", "secondary-200", "secondary-300", "secondary-400", "secondary-500", "secondary-600", "secondary-700", "secondary-800", "secondary-900", "danger", "danger-variant", "danger-50", "danger-100", "danger-200", "danger-300", "danger-400", "danger-500", "danger-600", "danger-700", "danger-800", "danger-900", "success", "success-variant", "success-50", "success-100", "success-200", "success-300", "success-400", "success-500", "success-600", "success-700", "success-800", "success-900", "ancillary-100", "ancillary-200", "ancillary-300", "ancillary-400", "ancillary-500", "ancillary-600", "ancillary-700", "ancillary-800", "ancillary-900", "on-surface-stroke"]),
  /**
   * @deprecated _No longer needed._
   *
   * In some cases `themeColor` may be inadvertently overridden by another style, this will ensure the selected color is applied.
   *
   * Defaults to **undefined**.
   */
  themeColorImportant: deprecatedProp(PropTypes.bool, "Divider", "No longer needed."),
  /**
   * Choose between dense and tall variants.
   *
   * Defaults to **'dense'**.
   */
  variant: PropTypes.oneOf(["dense", "tall"]),
  /**
   * Adds top and bottom margin.
   *
   * Defaults to **undefined**.
   */
  verticalMargin: PropTypes.oneOf(["dense", "standard", "airy"])
};
const DividerDefaultProps = {
  className: undefined,
  dividerColor: undefined,
  dividerColorImportant: undefined,
  dividerHeight: undefined,
  dividerStyle: "",
  themeColor: "on-surface-stroke",
  themeColorImportant: undefined,
  variant: "dense",
  verticalMargin: undefined
};

const Divider = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    dividerColor,
    dividerColorImportant,
    dividerHeight,
    dividerStyle,
    themeColor,
    themeColorImportant,
    variant,
    className,
    ...customProps
  } = props;

  // Supporting deprecated props
  const currentThemeColorImportant = dividerColorImportant || themeColorImportant;
  const currentVariant = dividerHeight || variant;
  const currentThemeColor = dividerColor || themeColor;
  const ref = useRef();
  useImperativeHandle(externalRef, () => ref.current, []);
  const classNames = clsx('lmnt', 'lmnt-divider', currentThemeColorImportant && 'lmnt-divider--color-important', currentVariant === 'dense' && 'lmnt-divider--dense', currentVariant === 'tall' && 'lmnt-divider--tall', dividerStyle === 'dotted' && 'lmnt-divider--dotted', dividerStyle === 'dashed' && 'lmnt-divider--dashed', dividerStyle === 'solid' && 'lmnt-divider--solid', dividerStyle === 'double' && 'lmnt-divider--double', dividerStyle === 'groove' && 'lmnt-divider--groove', dividerStyle === 'ridge' && 'lmnt-divider--ridge', dividerStyle === 'inset' && 'lmnt-divider--inset', dividerStyle === 'outset' && 'lmnt-divider--outset', currentThemeColor === 'primary' && 'lmnt-divider--primary', currentThemeColor === 'primary-variant' && 'lmnt-divider--primary-variant', currentThemeColor === 'primary-50' && 'lmnt-divider--primary-50', currentThemeColor === 'primary-100' && 'lmnt-divider--primary-100', currentThemeColor === 'primary-200' && 'lmnt-divider--primary-200', currentThemeColor === 'primary-300' && 'lmnt-divider--primary-300', currentThemeColor === 'primary-400' && 'lmnt-divider--primary-400', currentThemeColor === 'primary-500' && 'lmnt-divider--primary-500', currentThemeColor === 'primary-600' && 'lmnt-divider--primary-600', currentThemeColor === 'primary-700' && 'lmnt-divider--primary-700', currentThemeColor === 'primary-800' && 'lmnt-divider--primary-800', currentThemeColor === 'primary-900' && 'lmnt-divider--primary-900', currentThemeColor === 'secondary' && 'lmnt-divider--secondary', currentThemeColor === 'secondary-variant' && 'lmnt-divider--secondary-variant', currentThemeColor === 'secondary-50' && 'lmnt-divider--secondary-50', currentThemeColor === 'secondary-100' && 'lmnt-divider--secondary-100', currentThemeColor === 'secondary-200' && 'lmnt-divider--secondary-200', currentThemeColor === 'secondary-300' && 'lmnt-divider--secondary-300', currentThemeColor === 'secondary-400' && 'lmnt-divider--secondary-400', currentThemeColor === 'secondary-500' && 'lmnt-divider--secondary-500', currentThemeColor === 'secondary-600' && 'lmnt-divider--secondary-600', currentThemeColor === 'secondary-700' && 'lmnt-divider--secondary-700', currentThemeColor === 'secondary-800' && 'lmnt-divider--secondary-800', currentThemeColor === 'secondary-900' && 'lmnt-divider--secondary-900', currentThemeColor === 'danger' && 'lmnt-divider--danger', currentThemeColor === 'danger-variant' && 'lmnt-divider--danger-variant', currentThemeColor === 'danger-50' && 'lmnt-divider--danger-50', currentThemeColor === 'danger-100' && 'lmnt-divider--danger-100', currentThemeColor === 'danger-200' && 'lmnt-divider--danger-200', currentThemeColor === 'danger-300' && 'lmnt-divider--danger-300', currentThemeColor === 'danger-400' && 'lmnt-divider--danger-400', currentThemeColor === 'danger-500' && 'lmnt-divider--danger-500', currentThemeColor === 'danger-600' && 'lmnt-divider--danger-600', currentThemeColor === 'danger-700' && 'lmnt-divider--danger-700', currentThemeColor === 'danger-800' && 'lmnt-divider--danger-800', currentThemeColor === 'danger-900' && 'lmnt-divider--danger-900', currentThemeColor === 'ancillary-100' && 'lmnt-divider--ancillary-100', currentThemeColor === 'ancillary-200' && 'lmnt-divider--ancillary-200', currentThemeColor === 'ancillary-300' && 'lmnt-divider--ancillary-300', currentThemeColor === 'ancillary-400' && 'lmnt-divider--ancillary-400', currentThemeColor === 'ancillary-500' && 'lmnt-divider--ancillary-500', currentThemeColor === 'ancillary-600' && 'lmnt-divider--ancillary-600', currentThemeColor === 'ancillary-700' && 'lmnt-divider--ancillary-700', currentThemeColor === 'ancillary-800' && 'lmnt-divider--ancillary-800', currentThemeColor === 'ancillary-900' && 'lmnt-divider--ancillary-900', currentThemeColor === 'on-surface-stroke' && 'lmnt-theme-on-surface-stroke', className);
  return /*#__PURE__*/React.createElement("hr", _extends({
    ref: ref,
    className: classNames
  }, customProps));
});
Divider.displayName = 'Divider';
Divider.propTypes = DividerPropTypes;
Divider.defaultProps = DividerDefaultProps;

export { Divider };
//# sourceMappingURL=index.es.js.map
