import React from 'react';


export interface SwitchProps {
    /**
    * Aligns switch to the right of the label.
    *
    * Defaults to **false**.
    */
    alignEnd?: boolean;
    /**
    * The current value of the switch.
    *
    * Defaults to **false**.
    */
    checked?: boolean;
    /**
    * @deprecated _Use `label` instead._
    *
    * Primary content of the switch. Expects a valid string. If `children` and `label` are both set, `label` will take priority.
    *
    * Defaults to **undefined**.
    */
    children?: React.ReactNode;
    /**
    * The css class name to be passed through to the component markup.
    *
    * Defaults to **undefined**.
    */
    className?: string;
    /**
    * Prevent the user from interacting with the control.
    *
    * Defaults to **false**.
    */
    disabled?: boolean;
    /**
    * The label not be displayed, but will still be available to screen readers.
    *
    * Defaults to **false**.
    */
    hideLabel?: boolean;
    /**
    * The html id for the input.
    *
    * Defaults to **undefined**.
    */
    id?: string;
    /**
    * Props to send to the html input
    *
    * Defaults to **undefined**.
    */
    inputProps?: object;
    /**
    * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
    *
    * Defaults to **'Off|On'**.
    */
    label: string;
    /**
    * Color of the switch according to the theme.
    *
    * Defaults to **'primary'**.
    */
    themeColor?: string;
    /**
    * When a switch button is checked, this value will be returned as the second parameter of the `change` handler.
    *
    * Defaults to **null**.
    */
    value?: string | number | boolean | object;
    /**
    * Fired when the control is clicked.
    */
    onChange?: Function;
}

/**
* The Switch is a simple selection control that can have an on and off state. Selection controls are found where users are asked to make decisions or declare preferences.
 * @prop {boolean} alignEnd - Aligns switch to the right of the label. Defaults to _false_.
 * @prop {boolean} checked - The current value of the switch. Defaults to _false_.
 * @prop {React.ReactNode} children - Deprecated: Use `label` instead. Primary content of the switch. Expects a valid string. If `children` and `label` are both set, `label` will take priority. Defaults to _undefined_.
 * @prop {string} className - The css class name to be passed through to the component markup. Defaults to _undefined_.
 * @prop {boolean} disabled - Prevent the user from interacting with the control. Defaults to _false_.
 * @prop {boolean} hideLabel - The label not be displayed, but will still be available to screen readers. Defaults to _false_.
 * @prop {string} id - The html id for the input. Defaults to _undefined_.
 * @prop {object} inputProps - Props to send to the html input Defaults to _undefined_.
 * @prop {string} label - Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers. Defaults to _'Off|On'_.
 * @prop {string} themeColor - Color of the switch according to the theme. Defaults to _'primary'_.
 * @prop {string|number|boolean|object} value - When a switch button is checked, this value will be returned as the second parameter of the `change` handler. Defaults to _null_.
 *  @event onChange - Fired when the control is clicked.
*/
export const Switch: React.FunctionComponent<SwitchProps | React.HTMLProps<HTMLElement> | React.DOMAttributes<HTMLElement>>;
