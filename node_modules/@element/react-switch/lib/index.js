'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime-corejs3/helpers/extends');
var React = require('react');
var _switch = require('@material/switch');
var reactFormField = require('@element/react-form-field');
var clsx = require('clsx');
var shared = require('@element/shared');
var PropTypes = require('prop-types');
var reactCommon = require('@element/react-common');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefault(_extends);
var React__default = /*#__PURE__*/_interopDefault(React);
var clsx__default = /*#__PURE__*/_interopDefault(clsx);
var PropTypes__default = /*#__PURE__*/_interopDefault(PropTypes);

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const SwitchPropTypes = {
  /**
   * Aligns switch to the right of the label.
   *
   * Defaults to **false**.
   */
  alignEnd: PropTypes__default["default"].bool,
  /**
   * The current value of the switch.
   *
   * Defaults to **false**.
   */
  checked: PropTypes__default["default"].bool,
  /**
   * @deprecated _Use `label` instead._
   *
   * Primary content of the switch. Expects a valid string. If `children` and `label` are both set, `label` will take priority.
   *
   * Defaults to **undefined**.
   */
  children: reactCommon.deprecatedProp(PropTypes__default["default"].node, "Switch", "Use `label` instead."),
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes__default["default"].string,
  /**
   * Prevent the user from interacting with the control.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes__default["default"].bool,
  /**
   * The label not be displayed, but will still be available to screen readers.
   *
   * Defaults to **false**.
   */
  hideLabel: PropTypes__default["default"].bool,
  /**
   * The html id for the input.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes__default["default"].string,
  /**
   * Props to send to the html input
   *
   * Defaults to **undefined**.
   */
  inputProps: PropTypes__default["default"].object,
  /**
   * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
   *
   * Defaults to **'Off|On'**.
   */
  label: PropTypes__default["default"].string.isRequired,
  /**
   * Fired when the control is clicked.
   *
   * Defaults to **null**.
   */
  onChange: PropTypes__default["default"].func,
  /**
   * Color of the switch according to the theme.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes__default["default"].oneOf(["primary", "secondary"]),
  /**
   * When a switch button is checked, this value will be returned as the second parameter of the `change` handler.
   *
   * Defaults to **null**.
   */
  value: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].number, PropTypes__default["default"].bool, PropTypes__default["default"].object])
};
const SwitchDefaultProps = {
  alignEnd: false,
  checked: false,
  children: undefined,
  className: undefined,
  disabled: false,
  hideLabel: false,
  id: undefined,
  inputProps: undefined,
  label: "Off|On",
  themeColor: "primary",
  value: null
};

const Switch = /*#__PURE__*/React.forwardRef((props, externalRef) => {
  const {
    alignEnd,
    checked,
    children,
    className,
    disabled,
    hideLabel,
    id,
    inputProps,
    label,
    onChange,
    themeColor,
    value,
    ...customProps
  } = props;
  const [idActual] = React.useState(() => id || shared.edsRandomId());
  const switchRef = React.useRef();
  const mdcSwitch = React.useRef();
  const content = label || children;
  React.useImperativeHandle(externalRef, () => switchRef.current, []);
  const handleChange = event => {
    onChange === null || onChange === void 0 ? void 0 : onChange(event.target.checked, value, event);
  };
  React.useEffect(() => {
    mdcSwitch.current = _switch.MDCSwitch.attachTo(switchRef.current);
    return () => {
      var _mdcSwitch$current;
      (_mdcSwitch$current = mdcSwitch.current) === null || _mdcSwitch$current === void 0 ? void 0 : _mdcSwitch$current.destroy();
    };
  }, []);
  React.useEffect(() => {
    mdcSwitch.current.checked = !!checked;
  }, [checked]);
  return /*#__PURE__*/React__default["default"].createElement(reactFormField.FormField, {
    inputRef: mdcSwitch,
    alignEnd: alignEnd
  }, /*#__PURE__*/React__default["default"].createElement("div", _extends__default["default"]({
    ref: switchRef,
    className: clsx__default["default"]('lmnt mdc-switch lmnt-switch', disabled && 'mdc-switch--disabled', themeColor && `lmnt-switch--${themeColor}`, className)
  }, customProps), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-switch__track"
  }), /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-switch__thumb-underlay"
  }, /*#__PURE__*/React__default["default"].createElement("div", {
    className: "mdc-switch__thumb"
  }), /*#__PURE__*/React__default["default"].createElement("input", _extends__default["default"]({
    onChange: handleChange,
    disabled: disabled,
    type: "checkbox",
    id: idActual,
    role: "switch"
  }, inputProps, {
    className: clsx__default["default"]('mdc-switch__native-control', inputProps === null || inputProps === void 0 ? void 0 : inputProps.className),
    value: value
  })))), /*#__PURE__*/React__default["default"].createElement("label", {
    className: clsx__default["default"]('lmnt-switch-label mdc-switch-label', hideLabel && 'sr-only'),
    htmlFor: idActual
  }, content));
});
Switch.displayName = 'Switch';
Switch.propTypes = SwitchPropTypes;
Switch.SwitchDefaultProps = SwitchDefaultProps;

exports.Switch = Switch;
//# sourceMappingURL=index.js.map
