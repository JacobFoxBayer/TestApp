import _extends from '@babel/runtime-corejs3/helpers/extends';
import React, { forwardRef, useState, useRef, useImperativeHandle, useEffect } from 'react';
import { MDCSwitch } from '@material/switch';
import { FormField } from '@element/react-form-field';
import clsx from 'clsx';
import { edsRandomId } from '@element/shared';
import PropTypes from 'prop-types';
import { deprecatedProp } from '@element/react-common';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const SwitchPropTypes = {
  /**
   * Aligns switch to the right of the label.
   *
   * Defaults to **false**.
   */
  alignEnd: PropTypes.bool,
  /**
   * The current value of the switch.
   *
   * Defaults to **false**.
   */
  checked: PropTypes.bool,
  /**
   * @deprecated _Use `label` instead._
   *
   * Primary content of the switch. Expects a valid string. If `children` and `label` are both set, `label` will take priority.
   *
   * Defaults to **undefined**.
   */
  children: deprecatedProp(PropTypes.node, "Switch", "Use `label` instead."),
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Prevent the user from interacting with the control.
   *
   * Defaults to **false**.
   */
  disabled: PropTypes.bool,
  /**
   * The label not be displayed, but will still be available to screen readers.
   *
   * Defaults to **false**.
   */
  hideLabel: PropTypes.bool,
  /**
   * The html id for the input.
   *
   * Defaults to **undefined**.
   */
  id: PropTypes.string,
  /**
   * Props to send to the html input
   *
   * Defaults to **undefined**.
   */
  inputProps: PropTypes.object,
  /**
   * Display label. The `label` should always be set even when using `hideLabel` - it will be used by screen readers.
   *
   * Defaults to **'Off|On'**.
   */
  label: PropTypes.string.isRequired,
  /**
   * Fired when the control is clicked.
   *
   * Defaults to **null**.
   */
  onChange: PropTypes.func,
  /**
   * Color of the switch according to the theme.
   *
   * Defaults to **'primary'**.
   */
  themeColor: PropTypes.oneOf(["primary", "secondary"]),
  /**
   * When a switch button is checked, this value will be returned as the second parameter of the `change` handler.
   *
   * Defaults to **null**.
   */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.bool, PropTypes.object])
};
const SwitchDefaultProps = {
  alignEnd: false,
  checked: false,
  children: undefined,
  className: undefined,
  disabled: false,
  hideLabel: false,
  id: undefined,
  inputProps: undefined,
  label: "Off|On",
  themeColor: "primary",
  value: null
};

const Switch = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    alignEnd,
    checked,
    children,
    className,
    disabled,
    hideLabel,
    id,
    inputProps,
    label,
    onChange,
    themeColor,
    value,
    ...customProps
  } = props;
  const [idActual] = useState(() => id || edsRandomId());
  const switchRef = useRef();
  const mdcSwitch = useRef();
  const content = label || children;
  useImperativeHandle(externalRef, () => switchRef.current, []);
  const handleChange = event => {
    onChange === null || onChange === void 0 ? void 0 : onChange(event.target.checked, value, event);
  };
  useEffect(() => {
    mdcSwitch.current = MDCSwitch.attachTo(switchRef.current);
    return () => {
      var _mdcSwitch$current;
      (_mdcSwitch$current = mdcSwitch.current) === null || _mdcSwitch$current === void 0 ? void 0 : _mdcSwitch$current.destroy();
    };
  }, []);
  useEffect(() => {
    mdcSwitch.current.checked = !!checked;
  }, [checked]);
  return /*#__PURE__*/React.createElement(FormField, {
    inputRef: mdcSwitch,
    alignEnd: alignEnd
  }, /*#__PURE__*/React.createElement("div", _extends({
    ref: switchRef,
    className: clsx('lmnt mdc-switch lmnt-switch', disabled && 'mdc-switch--disabled', themeColor && `lmnt-switch--${themeColor}`, className)
  }, customProps), /*#__PURE__*/React.createElement("div", {
    className: "mdc-switch__track"
  }), /*#__PURE__*/React.createElement("div", {
    className: "mdc-switch__thumb-underlay"
  }, /*#__PURE__*/React.createElement("div", {
    className: "mdc-switch__thumb"
  }), /*#__PURE__*/React.createElement("input", _extends({
    onChange: handleChange,
    disabled: disabled,
    type: "checkbox",
    id: idActual,
    role: "switch"
  }, inputProps, {
    className: clsx('mdc-switch__native-control', inputProps === null || inputProps === void 0 ? void 0 : inputProps.className),
    value: value
  })))), /*#__PURE__*/React.createElement("label", {
    className: clsx('lmnt-switch-label mdc-switch-label', hideLabel && 'sr-only'),
    htmlFor: idActual
  }, content));
});
Switch.displayName = 'Switch';
Switch.propTypes = SwitchPropTypes;
Switch.SwitchDefaultProps = SwitchDefaultProps;

export { Switch };
//# sourceMappingURL=index.es.js.map
