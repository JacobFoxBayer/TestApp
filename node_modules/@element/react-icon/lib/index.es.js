import _extends from '@babel/runtime-corejs3/helpers/extends';
import clsx from 'clsx';
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { deprecatedProp, deprecatedOneOf, useIsomorphicLayoutEffect, addProps } from '@element/react-common';
import { createPopper } from '@popperjs/core';
import PropTypes from 'prop-types';

/**
 *
 * This file is automatically generated by the Element
 * documentation system. Any modifications to this file
 * will be overwritten!
 *
 */

const IconPropTypes = {
  /**
   * Sets the `aria-hidden` attribute for the icon. If set to true, the icon will not be read by screen readers. Should be used if icon is purely decorative (such as when used in a button or textfield) or labeled by rendered text using `aria-labelledBy` or `aria-label`.
   *
   * Defaults to **null**.
   */
  ariaHidden: PropTypes.bool,
  /**
   * Accessibility label for assistive technologies.
   *
   * Defaults to **null**.
   */
  ariaLabel: PropTypes.string,
  /**
   * Id of the component being labeled for assistive technologies.
   *
   * Defaults to **null**.
   */
  ariaLabelledBy: PropTypes.string,
  /**
   * The custom icon notification badge to be rendered. The icon notification badge component prevents `xsmall` and `small` icon size
   *
   * Defaults to **undefined**.
   */
  badge: PropTypes.node,
  /**
   * The placement of the notification badge on the icon to start.  It will flip to the opposite side if there is no room.
   *
   * Defaults to **'right-start'**.
   */
  badgePlacement: PropTypes.oneOf(["right-start", "left-start"]),
  /**
   * The css class name to be passed through to the component markup.
   *
   * Defaults to **undefined**.
   */
  className: PropTypes.string,
  /**
   * Mostly commonly a string but accepts any valid markup or components. If a custom icon is used styles like color and size will need be handled with custom CSS.
   *
   * Defaults to **null**.
   */
  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),
  /**
   * One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium.
   *
   * Defaults to **'medium'**.
   */
  iconSize: PropTypes.oneOf(["xsmall", "small", "medium", "large", "xlarge"]),
  /**
   * The icon type to be rendered. Not all icons have every type. To see which icons are available for different types see [Material Icons docs](https://material.io/tools/icons)
   *
   * Defaults to **'filled'**.
   */
  iconType: PropTypes.oneOf(["filled", "outlined", "rounded", "two-tone", "sharp"]),
  /**
   * Add pointer icon style
   *
   * Defaults to **false**.
   */
  pointer: PropTypes.bool,
  /**
   * @deprecated _Renamed, see iconSize instead._
   *
   * One of 'xsmall', 'small', 'medium', 'large', and 'xlarge' will change the size of the icon. Defaults to medium.
   *
   * Defaults to **undefined**.
   */
  size: deprecatedProp(PropTypes.oneOf(["xsmall", "small", "medium", "large", "xlarge"]), "Icon", "Renamed, see iconSize instead."),
  /**
   * Color variations. Variants prefixed with `filled-` will add a background color to the icon according to the theme. Variants prefixed with ` color-` will change the color of the icon according to the theme.
   *
   * Defaults to **empty string**.
   */
  variant: deprecatedOneOf(PropTypes.oneOf(["", "filled-danger-alt", "filled-danger", "filled-muted", "filled-primary", "filled-secondary", "color-primary", "color-secondary", "color-on-dark", "blue", "gray", "green", "orange", "purple", "red", "teal", "yellow"]), ["primary-alt", "secondary-alt", "primary", "danger-alt", "danger", "muted"], "Icon", "Please use one of '','filled-danger-alt','filled-danger','filled-muted','filled-primary','filled-secondary','color-primary','color-secondary','color-on-dark','blue','gray','green','orange','purple','red','teal','yellow'.")
};
const IconDefaultProps = {
  ariaHidden: null,
  ariaLabel: null,
  ariaLabelledBy: null,
  badge: undefined,
  badgePlacement: "right-start",
  className: undefined,
  icon: null,
  iconSize: "medium",
  iconType: "filled",
  pointer: false,
  size: undefined,
  variant: ""
};

const Icon = /*#__PURE__*/forwardRef((props, externalRef) => {
  const {
    ariaHidden,
    ariaLabel,
    ariaLabelledBy,
    badge,
    badgePlacement,
    className,
    icon,
    iconType,
    pointer,
    size,
    iconSize,
    variant,
    ...customProps
  } = props;
  const iconRef = useRef();
  const badgeRef = useRef();
  const popperInstance = useRef();
  useImperativeHandle(externalRef, () => iconRef.current, []);
  useIsomorphicLayoutEffect(() => {
    if (badge) {
      let modifiers;
      if (badge.props.counter != null) {
        modifiers = [{
          name: 'flip',
          options: {
            fallbackPlacements: ['right', 'left']
          }
        }, {
          name: 'offset',
          options: {
            offset: _ref => {
              let {
                placement
              } = _ref;
              if (placement === 'right-start') {
                return [-5, -10];
              }
              return [-7, -10];
            }
          }
        }];
      } else {
        modifiers = [{
          name: 'flip',
          options: {
            fallbackPlacements: ['right-start', 'left-start']
          }
        }, {
          name: 'offset',
          options: {
            offset: [0, -10]
          }
        }];
      }
      popperInstance.current = createPopper(iconRef.current, badgeRef.current, {
        placement: badgePlacement,
        modifiers
      });
    }
    return () => {
      var _popperInstance$curre;
      popperInstance === null || popperInstance === void 0 ? void 0 : (_popperInstance$curre = popperInstance.current) === null || _popperInstance$curre === void 0 ? void 0 : _popperInstance$curre.destroy();
    };
  }, [badge, badgePlacement]);
  const classes = clsx('lmnt', 'lmnt-icon', iconType === 'filled' && 'material-icons', iconType === 'outlined' && 'material-icons-outlined', iconType === 'rounded' && 'material-icons-round', iconType === 'two-tone' && 'material-icons-two-tone', iconType === 'sharp' && 'material-icons-sharp', pointer && 'lmnt-icon-pointer', size === 'medium' || iconSize === 'medium' && 'lmnt-icon--medium', size === 'large' || iconSize === 'large' && 'lmnt-icon--large', size === 'xlarge' || iconSize === 'xlarge' && 'lmnt-icon--xlarge', (variant === 'primary' || variant === 'primary-alt' || variant === 'muted' || variant === 'danger' || variant === 'danger-alt' || variant === 'filled-primary' || variant === 'filled-secondary' || variant === 'filled-muted' || variant === 'filled-danger' || variant === 'filled-danger-alt' || variant === 'blue' || variant === 'gray' || variant === 'green' || variant === 'orange' || variant === 'purple' || variant === 'red' || variant === 'teal' || variant === 'yellow') && 'lmnt-icon--fill', (variant === 'danger-alt' || variant === 'filled-danger-alt') && 'lmnt-icon--fill-danger-alt', (variant === 'danger' || variant === 'filled-danger') && 'lmnt-icon--fill-danger', (variant === 'primary' || variant === 'filled-primary') && 'lmnt-icon--fill-primary', (variant === 'primary-alt' || variant === 'filled-secondary') && 'lmnt-icon--fill-secondary', (variant === 'muted' || variant === 'filled-muted') && 'lmnt-icon--fill-muted', (variant === 'secondary-alt' || variant === 'color-on-dark') && 'lmnt-icon--color-on-dark', variant === 'color-primary' && 'lmnt-icon--color-primary', variant === 'color-secondary' && 'lmnt-icon--color-secondary', variant === 'blue' && 'lmnt-icon--utility-blue', variant === 'gray' && 'lmnt-icon--utility-gray', variant === 'green' && 'lmnt-icon--utility-green', variant === 'orange' && 'lmnt-icon--utility-orange', variant === 'purple' && 'lmnt-icon--utility-purple', variant === 'red' && 'lmnt-icon--utility-red', variant === 'teal' && 'lmnt-icon--utility-teal', variant === 'yellow' && 'lmnt-icon--utility-yellow', !badge && (size === 'xsmall' || iconSize === 'xsmall' && 'lmnt-icon--xsmall'), !badge && (size === 'small' || iconSize === 'small' && 'lmnt-icon--small'), className);
  return /*#__PURE__*/React.createElement("i", _extends({
    className: classes,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-hidden": ariaLabel || ariaLabelledBy ? ariaHidden : false
  }, customProps, {
    ref: iconRef
  }), icon, addProps(badge, {
    ref: badgeRef
  }));
});
Icon.displayName = 'Icon';
Icon.propTypes = IconPropTypes;
Icon.defaultProps = IconDefaultProps;

export { Icon };
//# sourceMappingURL=index.es.js.map
